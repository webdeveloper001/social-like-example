(function () {
    'use strict';

    
    angular.module('app', [
        // Angular modules 
        'angulike',
        'color.picker',
        'ngFileUpload',
        'ngAnimate',
        'ngCookies',
        //'ngResource',
        'ngRoute',
        'ngSanitize',
        'ngTouch',
        'ngMessages',
        'oc.lazyLoad',
        //'pascalprecht.translate',
        //'tmh.dynamicLocale',
        
        // Custom modules 
        'login',

        // 3rd Party Modules
        'ui.router',                 // state provider
        'ui.bootstrap.modal',
        'mgcrea.ngStrap',
        
        '720kb.datepicker', //date picker for specials
        '720kb.socialshare',
        'ngFacebook',
        
        'ui.select',
        'infinite-scroll',
        'datatables',
        'wu.masonry'
    ]);
})();
angular.module("app").run(["$templateCache", function($templateCache) {$templateCache.put("app/answer/Partials/answerDetail.html","<div id=\"veil\" ng-hide=\"vm.dataReady\"></div><div id=\"feedLoading\" ng-hide=\"vm.dataReady\"><div style=\"text-align: center\" ng-if=\"!vm.dataReady\"><div><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"></div><p style=\"font-size:large\">loading details...</p></div></div><div ng-if=\"vm.dataReady\" style=\"margin-left: -15px; margin-right: -15px\"><div class=\"container\"><div class=\"text-center\"><button class=\"btn btn-default\" ng-if=\"vm.searchActive\" ng-click=\"vm.backToResults()\" style=\"margin:5px; width:100%; background-color:lightgray\">Back to Results</button></div></div><cat-bar ng-if=\"vm.ranking\" text=\"{{vm.ranking}}\" left-fn=\"vm.goPrev()\" right-fn=\"vm.goNext()\" close-rank=\"vm.closeAnswerDetail()\"></cat-bar><div class=\"row\" style=\"margin:5px;\"><div class=\"col-xs-6 col-sm-3 col-md-2\"><div class=\"text-left\"><small class=\"text-muted\">&nbsp;&nbsp;&nbsp{{vm.answer.views}}&nbspviews</small></div></div><div class=\"col-xs-6 col-sm-9 col-md-10\"><div ng-show=\"{{vm.type == \'Establishment\' || vm.type == \'PersonCust\' || vm.type == \'Event\' }}\" class=\"text-right\"><p ng-attr-style=\"display:{{vm.answer.hasOwner ? \'none\':\'inline\'}};\" class=\"hiw\" ng-click=\"vm.bizRegDialog()\"><u>{{vm.bindtxt}}</u>{{vm.isAdmin?(\' \'+ vm.bizcat):\'\'}}</p><span class=\"glyphicon glyphicon-lock\" ng-attr-style=\"display:{{vm.answer.hasOwner ? \'inline\':\'none\'}}\"></span></div></div></div><answer-header ans=\"{{vm.answer}}\" idx=\"{{vm.idx}}\"></answer-header><div ng-if=\"vm.type == \'Event\'\"><br><div ng-bind-html=\"vm.ehtml\" ng-attr-style=\"{{vm.estyle}}\"><br></div></div><div class=\"text-center\" style=\"margin-right:20px\"><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"vm.answer.family\" ng-click=\"vm.showLocations()\" target=\"_blank\">Other Locations&nbsp&nbsp<span class=\"fa fa-map-marker\"></span></a> <a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"true\" ng-click=\"vm.share()\" target=\"_blank\">Share&nbsp&nbsp<span class=\"fa fa-share\"></span></a></div><div class=\"col-xs-12\" ng-if=\"!vm.answer.isprivate\"><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff\"><h3 class=\"sub-header text-center\">Endorsements</h3></div><p class=\"text-left\" ng-if=\"vm.type != \'Short-Phrase\'\"><strong>{{vm.answer.name}}</strong> is featured in the following ranks:</p><div class=\"well well-light-ranks col-xs-12 col-sm-6 col-md-4 col-lg-4\" style=\"padding-top:5px;\" ng-repeat=\"r in vm.answerRanks | orderBy:\'rank\' | limitTo:vm.dispRanks\"><div class=\"container-bgbox\"><bg-box bc=\"#666666\" shade=\"0\" fc=\"#f8f8ff\" text=\"{{(vm.type == \'Short-Phrase\') ? vm.answer.name : r.title}}\" dir=\"horizontal\" w=\"100%\" h=\"40px\"></bg-box></div><p class=\"text-center\" ng-if=\"vm.type == \'Short-Phrase\'\">on {{r.title}}</p><div class=\"row\" ng-if=\"true\" style=\"padding-bottom:5px;padding-top:5px; margin-top:0px\"><img ng-attr-style=\"height:55px;width:auto;\" class=\"col-xs-3 col-md-1 col-lg-1\" ng-src=\"{{r.icon}}\"><div class=\"col-xs-6\" style=\"min-width:175px\"><p style=\"padding-top:3px;margin-bottom:px;\">Ranked <strong>#{{r.rank}}</strong> out of <strong>{{r.answers}}</strong></p><div class=\"text-center\" style=\"margin-top:2px\"><span ng-click=\"vm.UpVote(r)\" ng-attr-style=\"color:{{r.thumbUp}};margin-right: {{vm.sm?\'0px\':\'20px\'}};font-size: 18px;\" class=\"pull-left\">&nbsp&nbsp <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> <span style=\"color:black;font-size: 14px;\">&nbsp;{{r.upV}}&nbsp;&nbsp;</span></span> <span ng-click=\"vm.DownVote(r)\" ng-attr-style=\"color:{{r.thumbDn}};margin-right: {{vm.sm?\'0px\':\'20px\'}};font-size: 18px;\" class=\"pull-right\"><i class=\"fa fa-thumbs-down\" aria-hidden=\"true\"></i> <span style=\"color:black;font-size: 14px;\">&nbsp;{{r.downV}}</span> &nbsp&nbsp</span></div></div><a href=\"\" class=\"text-center col-xs-3\" ng-click=\"vm.gotoRank(r)\">Full ranking</a></div><p ng-attr-style=\"display:{{vm.deleteButton ? \'inline\':\'none\'}};color:red\" ng-click=\"vm.deleteThisCatans(r)\">&lt;&lt;Delete&gt;&gt;</p></div><p ng-show=\"{{vm.answerRanks.length > 3}}\" style=\"background-color:lightgray;cursor:pointer\" ng-click=\"vm.showRanks()\">{{vm.dispRanks > 3 ? \'Show less\':(\'Show more (\' + (vm.answerRanks.length - 3) + \')\') }}</p><div ng-if=\"vm.isAdmin\"><div class=\"text-left\"><button class=\"btn btn-primary\" ng-click=\"vm.addCatans()\">Add Catans</button></div><div class=\"input-group\" ng-if=\"vm.addctsactive\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.addctsval\" bs-options=\"c for c in vm.addctsopts\" bs-typeahead=\"\"> <span class=\"input-group-btn text-right\"><button class=\"btn btn-success\" type=\"button\" ng-click=\"vm.addcts()\">Add</button></span></div></div></div><div class=\"container col-xs-12\" ng-if=\"vm.answer.hasranks\"><div class=\"row\" ng-if=\"vm.type != \'Short-Phrase\'\"><div class=\"col-xs-12\"><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff;\"><h3 class=\"sub-header text-center\">The Favorites</h3></div></div></div><div class=\"row\" style=\"padding:0px;margin:0px;border:0px\"><div ng-repeat=\"n in vm.myranks\"><div class=\"container col-xs-3 col-sm-2 col-md-2 col-lg-2\" ng-click=\"vm.gotoCustomRank(n)\" ng-attr-style=\"border-top:3px solid white;border-bottom:3px solid white;background-color:{{n.bc}};color:{{n.fc}};height:{{vm.sm ? \'90px\':\'150px\'}};margin:0px;padding:0px;position:relative;\"><h3 class=\"hidden-xs text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%);cursor:pointer;\">{{n.title}}<h4 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%);cursor:pointer;\">{{n.title}}</h4></h3></div><div class=\"col-xs-3 col-sm-2 col-md-2 col-lg-2\" ng-click=\"vm.gotoCustomRank(n)\" style=\"margin:0px;padding:0px;\"><img ng-src=\"{{n.image}}\" ng-attr-style=\"border-top:3px solid white;border-bottom:3px solid white;width:95%;height:{{vm.sm ? \'90px\':\'150px\'}};cursor:pointer;\"></div></div></div><div class=\"text-right\"><a href=\"\" ng-if=\"vm.userIsOwner\" ng-click=\"vm.addRankforAnswer()\">Edit Ranking/List</a></div></div><div class=\"container col-xs-12\" ng-if=\"vm.userIsOwner&&!vm.answer.hasranks&&!vm.hideCustomRanksMsg&&!vm.answer.isprivate &&vm.answer.type==\'Establishment\'||vm.answer.type==\'PersonCust\'\"><br><div class=\"alert alert-info\">This Favorites section contains <strong>Custom Ranks</strong> and it is <strong>only visible to you</strong> Custom Ranks are:<br><br><i class=\"fa fa-check\"></i>&nbsp<strong>Interactive lists</strong> about anything in your business.<br><i class=\"fa fa-check\"></i>&nbsp<strong>Showcase in detail</strong> your products and/or services.<br><i class=\"fa fa-check\"></i>&nbspA great way to <strong>engage your audience</strong>.<br><i class=\"fa fa-check\"></i>&nbspCan be anything from <i>Food or Drink Items</i>, <i>Newest or Best-selling Products</i>, <i>Popular Services</i>, <i>Recent Projects</i>, <i>Success Stories</i>, <i>Staff Members</i> or anything you choose.<br><br>Below are some examples on how you can use Custom Ranks to enhance your business profile.<div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff;\"><h3 class=\"sub-header text-center\">The Favorites</h3></div><div class=\"row\" style=\"padding:0px;margin:0px;border:0px\"><div ng-repeat=\"n in vm.myranks\"><div class=\"container col-xs-3 col-sm-2 col-md-2 col-lg-2\" ng-click=\"vm.gotoCustomRank(n)\" ng-attr-style=\"border-top:3px solid #D9EDF7;border-bottom:3px solid #D9EDF7;background-color:{{n.bc}};color:{{n.fc}};height:{{vm.sm ? \'90px\':\'150px\'}};margin:0px;padding:0px;position:relative;\"><h3 class=\"hidden-xs text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%);cursor:pointer;\">{{n.title}}<h4 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%);cursor:pointer;\">{{n.title}}</h4></h3></div><div class=\"col-xs-3 col-sm-2 col-md-2 col-lg-2\" ng-click=\"vm.gotoCustomRank(n)\" style=\"margin:0px;padding:0px;\"><img ng-src=\"{{n.image}}\" ng-attr-style=\"border-top:3px solid #D9EDF7;border-bottom:3px solid #D9EDF7;width:95%;height:{{vm.sm ? \'90px\':\'150px\'}};cursor:pointer;\"></div></div></div><div class=\"text-right\"><button class=\"btn btn-default\" ng-click=\"vm.gotoMyBusiness()\" style=\"margin:5px\">Purchase Custom Ranks</button> <button class=\"btn btn-default\" ng-click=\"vm.hideCustomRanks()\" style=\"margin:5px\">Hide Message</button></div></div></div><div class=\"col-xs-12\" ng-if=\"true\"><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff;\"><h3 class=\"sub-header\" style=\"justify-content:space-between;display:flex\"><span class=\"alignleft\" style=\"cursor:pointer\" ng-click=\"vm.moreImagesRev()\">&nbsp{{vm.showRev?\'&lt\':\' \'}}&nbsp</span> <span class=\"aligncenter\">Photo Gallery</span> <span class=\"alignright\" style=\"cursor:pointer\" ng-click=\"vm.moreImagesFwd()\">&nbsp{{vm.showFwd?\'&gt\':\' \'}}&nbsp</span></h3></div><div class=\"text-right\" ng-if=\"vm.type != \'Short-Phrase\'\"><button ng-if=\"!vm.igdemo\" class=\"btn btn-success\" ng-click=\"vm.getImages()\" ng-attr-style=\"display:{{vm.showImageGallery == false ? \'inline\':\'none\'}};margin:5px;\">Show Images</button></div><div ng-attr-style=\"display:{{vm.showImageGallery == true ? \'inline\':\'none\'}}\"><div class=\"col-xs-6 col-sm-4 col-md-3 col-lg-2\" ng-repeat=\"x in vm.images.slice(vm.i,vm.e)\"><a ng-click=\"vm.selectPhoto($index)\" class=\"thumbnail\"><img ng-src=\"{{x.url}}\" style=\"width:100%;height:120px\"></a></div><div ng-if=\"vm.images.length == 0\">No images in Photo Gallery.</div></div></div><div ng-if=\"vm.type != \'Short-Phrase\'\" class=\"col-xs-12\"><div class=\"row\"><div class=\"col-xs-6\" style=\"padding-top:20px;\"><div class=\"text-center\" ng-if=\"vm.showImageGallery && vm.isLoggedIn\" ng-attr-style=\"display:{{vm.isLoggedIn ? \'inline\':\'none\'}};\"><blob-upload></blob-upload></div></div><div class=\"col-xs-6\"><div class=\"text-center\" ng-if=\"vm.showImageGallery && vm.isLoggedIn\">Get from Instagram&nbsp&nbsp&nbsp <img ng-src=\"/assets/images/glyph-logo_May2016.png\" ng-click=\"vm.selectInstagramImages()\" ng-attr-style=\"width:80px;display:{{vm.isLoggedIn ? \'inline\':\'none\'}};cursor:pointer\"></div></div></div></div><div class=\"col-xs-12\" ng-if=\"vm.answer.ispremium\"><div ng-show=\"{{vm.type == \'Establishment\' || vm.type == \'PersonCust\' }}\"><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff\"><h3 class=\"sub-header text-center\">Specials</h3></div><div class=\"row\" style=\"border-left:5px solid white;border-right:5px solid white;\"><div ng-repeat=\"x in vm.specialsList\"><div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-4\" ng-click=\"vm.showSpecial(x)\" ng-attr-style=\"background-color:{{x.bc}};color:{{x.fc}};cursor:pointer;border:5px solid white;\"><h4 class=\"text-center\">{{x.stitle}}</h4></div></div></div><div class=\"text-right\"><a href=\"\" ng-if=\"vm.userIsOwner\" ng-click=\"vm.openSpecials()\">Edit Specials</a></div></div></div><div class=\"container col-xs-12\" ng-if=\"vm.userIsOwner&&!vm.answer.ispremium&&!vm.hideGetPremiumMsg &&!vm.answer.isprivate&&vm.answer.type==\'Establishment\'||vm.answer.type==\'PersonCust\'\"><div class=\"alert alert-info\">This Specials section below is only visible when you have <strong>Premium Membership</strong>. Premium Membership allows you to:<br><br><i class=\"fa fa-check\"></i>&nbspCommunicate to users <strong>daily specials, events and deals</strong> real time.<br><i class=\"fa fa-check\"></i>&nbspOffer special deals and control exactly when to start and stop an offering.<br><i class=\"fa fa-check\"></i>&nbspSpecials are shown in the <strong>rankings summary</strong> driving <strong>more customers</strong> to your profile.<br><br>Below are examples on the type of Specials and Promotions you can show with a Premium Membership.<div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff;\"><h3 class=\"sub-header text-center\">Specials</h3></div><div class=\"row\" style=\"border-left:5px solid #D9EDF7;border-right:5px solid #D9EDF7;\"><div ng-repeat=\"x in vm.specialsList\"><div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-4\" ng-click=\"vm.showSpecial(x)\" ng-attr-style=\"background-color:{{x.bc}};color:{{x.fc}};cursor:pointer;border:5px solid #D9EDF7;\"><h4 class=\"text-center\" style=\"padding-top:10px\">{{x.stitle}}</h4></div></div></div><div class=\"text-right\"><button class=\"btn btn-default\" ng-click=\"vm.gotoMyBusiness()\" style=\"margin:5px\">Purchase Premium Membership</button> <button class=\"btn btn-default\" ng-click=\"vm.hideGetPremium()\" style=\"margin:5px\">Hide Message</button></div></div></div><div class=\"col-xs-12\"><div><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff\"><h3 class=\"sub-header text-center\">Opinions</h3></div><table class=\"table table-hover cursor\"><tbody><tr ng-repeat=\"item in vm.vrows | orderBy:\'-delta\'\"><td align=\"middle\" ng-attr-style=\"width:10%\"><img ng-src=\"../../../assets/images/{{item.upImage}}\" style=\"max-height:30px;margin:0px;\" ng-click=\"vm.vrowVoteUp(item)\"></td><td align=\"left\" style=\"width:10%\">{{item.upV}}</td><td align=\"middle\" style=\"width:60%\">{{item.title}}</td><td align=\"right\" style=\"width:10%\">{{item.downV}}</td><td align=\"middle\" ng-attr-style=\"width:10%\"><img ng-src=\"../../../assets/images/{{item.downImage}}\" style=\"max-height:30px;margin:0px;\" ng-click=\"vm.vrowVoteDown(item)\"></td></tr></tbody></table><div class=\"input-group\" style=\"padding:0px;margin:0px;\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.newop\" maxlength=\"40\" placeholder=\"{{\'Write an opinion of \'+ vm.answer.name}}\"> <span class=\"input-group-btn text-right\"><button class=\"btn btn-primary {{vm.addvrowbutton}}\" type=\"button\" ng-click=\"vm.addvrow()\">Add Opinion</button></span></div><div class=\"text-center\" style=\"padding-top:5px\">{{40 - vm.newop.length + \' characters left\'}}</div><br></div></div><div class=\"col-xs-12\" ng-if=\"false\"><div ng-show=\"{{vm.type != \'Establishment\' && vm.type != \'PersonCust\' && vm.type != \'Event\' }}\"><div class=\"well-sm\" style=\"background-color:#666666;color:#f8f8ff\"><h3 class=\"sub-header\">Versus Table</h3></div><table class=\"table table-hover cursor\"><tbody><thead><tr><th align=\"middle\" style=\"width:15%\">Pct (%)</th><th align=\"middle\" style=\"width:60%\">vs. Opponent</th><th align=\"middle\" style=\"width:15%\">Pct (%)</th><th align=\"middle\" style=\"width:10%\">GP</th></tr></thead><tbody><tr ng-repeat=\"x in vm.relativetable | orderBy: \'-Rank\'\"><td align=\"middle\" style=\"width:15%\">{{x.PctF}}</td><td align=\"middle\" style=\"width:60%\">{{x.vsName}}</td><td align=\"middle\" style=\"width:15%\">{{x.PctC}}</td><td align=\"middle\" style=\"width:10%\">{{x.GP}}</td></tr></tbody></tbody></table></div></div><br><br><div class=\"btn-group\" role=\"group\"><button type=\"button\" ng-click=\"vm.goBack()\" class=\"btn btn-default\">Back</button></div><button type=\"button\" ng-click=\"vm.deleteAnswer()\" class=\"btn btn-danger\" ng-if=\"vm.deleteButton\">Delete</button><br><br></div>");
$templateCache.put("app/answer/Partials/answerheader.html","<div class=\"container hidden-xs\" ng-if=\"!isShortPhrase\"><div class=\"row\"><div class=\"container col-sm-6 col-md-4 col-lg-4\" ng-attr-style=\"height:{{mxheight}}px;margin:0px;padding:0px;border:0px;\"><div class=\"container-bgbox\"><bg-box bc=\"{{bc}}\" bc2=\"{{bc2}}\" fc=\"{{fc}}\" text=\"{{idx > 0 ? idx + \'. \' + answer.name:answer.name}}\" dir=\"vertical\" w=\"100%\" h=\"120px\"></bg-box></div><div class=\"container\" ng-attr-style=\"width:100%; height:{{mxheight-120}}px;background-color:#d8d8d8;padding-top:5px\"><strong ng-if=\"answer.eventloc\">Location:</strong> <a ng-if=\"answer.eventloc\" ng-click=\"gotoLocationAnswer()\" target=\"_blank\">{{answer.eventloc}}</a><br ng-if=\"answer.eventloc\"><strong ng-if=\"answer.location\">Address:</strong> <a ng-if=\"answer.location\" href=\"http://maps.apple.com/maps?q={{answer.location}}\" target=\"_blank\">{{answer.location}}</a><font ng-if=\"answer.dist&&answer.location\" style=\"color:gray\">&nbsp&nbsp({{answer.dist}} mi away)</font><br ng-if=\"answer.location\"><strong ng-if=\"answer.cityarea\">{{(answer.cityarea) ? \'Neighborhood:\' : \"\"}}</strong> {{(answer.cityarea) ? answer.cityarea : \"\"}}<br ng-attr-style=\"display:{{(answer.cityarea) ? \'inline\' : \'none\'}}\"><strong ng-if=\"answer.phone\">Phone:</strong> <a ng-if=\"answer.phone\" href=\"tel:{{answer.phone}}\">{{answer.phone}}</a><br ng-attr-style=\"display:{{(answer.phone) ? \'inline\' : \'none\'}}\"><strong ng-if=\"answer.website\">Website:</strong> <a ng-if=\"answer.website.indexOf(\'http\') >=0\" href=\"{{answer.website}}\" target=\"_blank\">{{answer.website}}</a> <a ng-if=\"answer.website.indexOf(\'http\') == -1\" href=\"http://{{answer.website}}\" target=\"_blank\">{{answer.website}}</a><br ng-if=\"answer.website\"><strong ng-if=\"answer.email\">{{(answer.email) ? \'Email:\' : \"\"}}</strong> {{(answer.email) ? answer.email : \"\"}}<br ng-attr-style=\"display:{{(answer.email) ? \'inline\' : \'none\'}}\"><i ng-attr-style=\"display:{{hrset ? \'inline\':\'none\'}}\">{{hourstr}}</i><div class=\"text-center answer_info_buttons\"><br><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"!answer.hasOwner || userIsOwner\" ng-click=\"editAnswer()\" target=\"_blank\">Edit&nbsp&nbsp<span class=\"fa fa-pencil\"></span></a><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"isMobile && answer.phone\" href=\"tel:{{answer.phone}}\" target=\"_blank\">Call&nbsp&nbsp<span class=\"fa fa-phone\"></span></a> <a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"answer.lat && answer.lng\" href=\"http://maps.apple.com/maps?q={{answer.lat}}, {{answer.lng}}\" target=\"_blank\">Directions&nbsp&nbsp<span class=\"fa fa-arrow-right\"></span></a> <a type=\"button\" class=\"btn btn-default hidden-md hidden-lg hidden-xl\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"answer.lat && answer.lng\" ng-click=\"toggleimgmode()\">{{imgmode}}&nbsp&nbsp<span class=\"{{imgmodeicon}}\"></span></a></div></div></div><div class=\"col-sm-6 col-md-4 col-lg-4\" style=\"margin:0px;padding:0px;border:0px;\"><img class=\"displayed\" ng-src=\"{{answer.imageurl}}\" alt=\"Moustiers Sainte Marie\" ng-attr-style=\"height:{{mxheight}}px;width:100%;margin-left:auto;margin-right:auto;\" ng-click=\"showUrl()\" ng-if=\"modeIsImage\"> <img class=\"displayed\" ng-src=\"https://maps.googleapis.com/maps/api/staticmap?center={{answer.location}}&zoom=13&size={{width2}}x{{mxheight}}&maptype=roadmap &markers=color:red%7Clabel:%7C{{answer.lat}},{{answer.lng}}&key=AIzaSyDKXsql-P8czb4nAQMXjkFpm_I5HqKsQpo\" ng-if=\"!modeIsImage\"></div><div class=\"hidden-sm col-md-4 col-lg-4\" style=\"margin:0px;padding:0px;border:0px;\"><img class=\"displayed\" ng-src=\"https://maps.googleapis.com/maps/api/staticmap?center={{answer.location}}&zoom=13&size={{width3}}x{{mxheight}}&maptype=roadmap &markers=color:red%7Clabel:%7C{{answer.lat}},{{answer.lng}}&key=AIzaSyDKXsql-P8czb4nAQMXjkFpm_I5HqKsQpo\" ng-if=\"hasMap\"><div class=\"container\" ng-attr-style=\"background-color:#d8d8d8;width:{{width3}}px;height:{{mxheight}}px;margin-left:auto;margin-right:auto;\" ng-if=\"!hasMap\"></div></div></div></div><div class=\"container hidden-sm hidden-md hidden-lg hidden-xl\" ng-if=\"!isShortPhrase\"><div class=\"container-bgbox\"><bg-box bc=\"{{bc}}\" bc2=\"{{bc2}}\" fc=\"{{fc}}\" text=\"{{idx > 0 ? idx + \'. \' + answer.name:answer.name}}\" dir=\"vertical\" w=\"100%\" h=\"75px\"></bg-box></div><div class=\"container\" style=\"margin:0px;padding:0px;border:0px;\"><img class=\"displayed\" ng-src=\"{{answer.imageurl}}\" alt=\"Moustiers Sainte Marie\" style=\"height:auto;width:100%;\" ng-click=\"showUrl()\" ng-if=\"modeIsImage\"> <img class=\"displayed\" ng-src=\"https://maps.googleapis.com/maps/api/staticmap?center={{answer.location}}&zoom=13&size={{width}}x{{mxheight}}&maptype=roadmap &markers=color:red%7Clabel:%7C{{answer.lat}},{{answer.lng}}&key=AIzaSyDKXsql-P8czb4nAQMXjkFpm_I5HqKsQpo\" ng-if=\"!modeIsImage\"></div></div><div class=\"container-answer\" style=\"width:100%;height:auto\" ng-if=\"isShortPhrase\"><br><h2 style=\"text-align:center\"><strong>{{answer.name}}</strong></h2><br><h4 style=\"text-align:center\">{{answer.addinfo}}</h4></div><div class=\"answer_info row\" ng-if=\"!isShortPhrase\" style=\"padding:0px;margin:0px;border:0px;\"><div class=\"container hidden-sm hidden-md hidden-lg hidden-xl\"><br ng-if=\"answer.eventloc\"><strong ng-if=\"answer.eventloc\">Location:</strong> <a ng-if=\"answer.eventloc\" ng-click=\"gotoLocationAnswer()\" target=\"_blank\">{{answer.eventloc}}</a><br ng-if=\"answer.location\"><strong ng-if=\"answer.location\">Address:</strong> <a ng-if=\"answer.location\" href=\"http://maps.apple.com/maps?q={{answer.location}}\" target=\"_blank\">{{answer.location}}</a><font ng-if=\"answer.dist&&answer.location\" style=\"color:gray\">&nbsp&nbsp({{answer.dist}} mi away)</font><br ng-if=\"answer.location\"><div class=\"row\"><div class=\"col-xs-9\"><strong ng-if=\"answer.cityarea\">{{(answer.cityarea) ? \'Neighborhood:\' : \"\"}}</strong> {{(answer.cityarea) ? answer.cityarea : \"\"}}<br ng-attr-style=\"display:{{(answer.cityarea) ? \'inline\' : \'none\'}}\"><strong ng-if=\"answer.phone\">Phone:</strong> <a ng-if=\"answer.phone\" href=\"tel:{{answer.phone}}\">{{answer.phone}}</a><br ng-attr-style=\"display:{{(answer.phone) ? \'inline\' : \'none\'}}\"><strong ng-if=\"answer.website\">Website:</strong> <a ng-if=\"answer.website.indexOf(\'http\') >=0\" href=\"{{answer.website}}\" target=\"_blank\">{{answer.website}}</a> <a ng-if=\"answer.website.indexOf(\'http\') == -1\" href=\"http://{{answer.website}}\" target=\"_blank\">{{answer.website}}</a><br ng-if=\"answer.website\"><strong ng-if=\"answer.email\">{{(answer.email) ? \'Email:\' : \"\"}}</strong> {{(answer.email) ? answer.email : \"\"}}<br ng-attr-style=\"display:{{(answer.email) ? \'inline\' : \'none\'}}\"></div><div class=\"col-xs-3 text-left\"><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;margin-top:15px;\" ng-if=\"!answer.hasOwner || userIsOwner\" ng-click=\"editAnswer()\" target=\"_blank\">&nbsp&nbsp<span class=\"fa fa-pencil\"></span></a></div></div><i ng-attr-style=\"display:{{hrset ? \'inline\':\'none\'}}\">{{hourstr}}</i></div><div class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center answer_info_buttons\" style=\"padding-top:10px;\"><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"isMobile && answer.phone\" href=\"tel:{{answer.phone}}\" target=\"_blank\">Call&nbsp&nbsp<span class=\"fa fa-phone\"></span></a> <a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"answer.lat && answer.lng\" href=\"http://maps.apple.com/maps?q={{answer.lat}}, {{answer.lng}}\" target=\"_blank\">Directions&nbsp&nbsp<span class=\"fa fa-arrow-right\"></span></a> <a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"answer.lat && answer.lng\" ng-click=\"toggleimgmode()\">{{imgmode}}&nbsp&nbsp<span class=\"{{imgmodeicon}}\"></span></a></div></div><div style=\"padding:5px\"></div><div ng-if=\"!isShortPhrase && !isEvent\" ng-attr-style=\"display:{{answer.addinfo ? \'inline\':\'none\'}};\"><span>{{answer.addinfo_teaser}}</span> <span ng-show=\"completeinfo\">{{answer.addinfo_complete}}</span> <span ng-if=\"answer.addinfo.length > 0\" ng-click=\"showcomplete()\" style=\"background-color:lightgray;cursor:pointer\">{{moretext}}</span><br ng-attr-style=\"display:{{answer.addinfo ? \'inline\':\'none\'}}\"></div>");
$templateCache.put("app/answer/Partials/blobupload.html","<button type=\"file\" ngf-select=\"uploadFiles($file, $invalidFiles)\" accept=\"image/*\" ngf-max-size=\"3MB\" class=\"btn btn-primary text-center\" ngf-resize=\"{width: 100, height: 100, quality: .1, type: \'image/jpeg\', ratio: \'19:11\', centerCrop: true, pattern=\'.jpg\', restoreExif: false}\" role=\"button\" ngf-validate-after-resize=\"boolean\" ngf-model-invalid=\"invalidFiles\">Upload New Image</button><br><br><div style=\"font:smaller\">{{errFile.name}} {{errorMsg}}</div><div style=\"font:smaller\"><span class=\"progress\" ng-show=\"f.progress >= 0\"><div ng-attr-style=\"width:{{f.progress}}%\" ng-bind=\"f.progress + \'%\'\"></div></span></div><br>");
$templateCache.put("app/answer/Partials/catbar.html","<div class=\"container\"><div class=\"row\"><div class=\"container-bgbox col-xs-1\"><bg-box bc=\"{{bc}}\" bc2=\"{{bc}}\" fc=\"{{fc}}\" text=\"<\" dir=\"horizontal\" w=\"100%\" h=\"{{ht}}px\" ng-click=\"goPrev()\" style=\"cursor:pointer\"></bg-box></div><div class=\"container-bgbox col-xs-10\"><bg-box bc=\"{{bc}}\" bc2=\"{{bc2}}\" fc=\"{{fc}}\" text=\"{{text}}\" dir=\"horizontal\" w=\"100%\" h=\"{{ht}}px\" ng-click=\"selRank()\" style=\"cursor:pointer\"></bg-box></div><div class=\"container-bgbox col-xs-1\"><bg-box bc=\"{{bc2}}\" bc2=\"{{bc2}}\" fc=\"{{fc}}\" text=\">\" dir=\"horizontal\" w=\"100%\" h=\"{{ht}}px\" ng-click=\"goNext()\" style=\"cursor:pointer\"></bg-box></div></div></div>");
$templateCache.put("app/common/partials/bgbox.html","<div ng-if=\"dirHor\"><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{h}}; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><h4 class=\"text-center\" style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{text}}</h4></div></div><div ng-if=\"dirVer\"><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{h}}; background: {{bc}}; background: -webkit-linear-gradient({{bc}}, {{bc2}}); background: -o-linear-gradient({{bc}}, {{bc2}}); background: -moz-linear-gradient({{bc}}, {{bc2}}); background: linear-gradient({{bc}}, {{bc2}});\"><h3 class=\"hidden-xs text-center\" style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{text}}</h3><h4 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\" style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{text}}</h4></div></div>");
$templateCache.put("app/common/partials/bgbox2.html","<div ng-if=\"dirHor\"><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{h-30}}px;cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><h4 ng-if=\"!isRankOfDay\" class=\"text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:60%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{text}}</h4><p ng-if=\"!isRankOfDay\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; bottom:0px; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{question}}</p><div ng-if=\"isRankOfDay\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h3 class=\"text-center\" style=\"padding-top:8px\">{{title}}</h3><p>{{question}}</p></div></div><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{30}}px;cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><div class=\"text-center\" ng-attr-style=\"color:white;font-size:small\"><i class=\"fa fa-eye\"></i> {{views}} | <i class=\"fa fa-list-ol\"></i> {{answers}} | <i class=\"fa fa-comment\"></i> {{comments}}</div></div></div><div ng-if=\"dirVer\"><div class=\"container\" style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{h}};cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient({{bc}}, {{bc2}}); background: -o-linear-gradient({{bc}}, {{bc2}}); background: -moz-linear-gradient({{bc}}, {{bc2}}); background: linear-gradient({{bc}}, {{bc2}});\"><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\" ng-attr-style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\">{{text}}</h3></div><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{30}}px;cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><div class=\"text-center\" style=\"color:white;font-size:small\"><i class=\"fa fa-eye\"></i> {{views}} | <i class=\"fa fa-list-ol\"></i> {{answers}} | <i class=\"fa fa-comment\"></i> {{comments}}</div></div></div>");
$templateCache.put("app/common/partials/bgbox3.html","<div ng-if=\"dirHor\" ng-click=\"addView()\"><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:auto;cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><p></p><p style=\"text-align:center\"><img ng-src=\"{{imageurl}}\" style=\"width:90%;min-height:100px\"></p><p style=\"text-align:left; padding:0px;margin:0px;\">&nbsp&nbsp&nbsp<u>{{type}}</u></p><h4 ng-if=\"sm\" class=\"text-center\" ng-attr-style=\"padding:3px; margin:0px;\">{{text}}</h4><h3 ng-if=\"!sm\" class=\"text-center\" ng-attr-style=\"padding:3px; margin:0px;\">{{text}}</h3><p></p><div class=\"text-center\" ng-attr-style=\"color:white;font-size:small;min-height:30px\" ng-if=\"showStats\"><i class=\"fa fa-eye\"></i> {{views}} | <i class=\"fa fa-list-ol\"></i> {{answers}} | <i class=\"fa fa-comment\"></i> {{comments}}</div></div></div><div ng-if=\"dirVer\"><div class=\"container\" style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{h}};cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient({{bc}}, {{bc2}}); background: -o-linear-gradient({{bc}}, {{bc2}}); background: -moz-linear-gradient({{bc}}, {{bc2}}); background: linear-gradient({{bc}}, {{bc2}});\"><p class=\"text-left\">{{type}}</p><h4 ng-if=\"!isRankOfDay\" class=\"text-center\" ng-attr-style=\"padding:3px; margin:0px;\">{{text}}</h4><img ng-src=\"{{imageurl}}\"></div><div class=\"container\" ng-attr-style=\"color:{{fc}};margin:0px;padding:0px;border:0px;position:relative;width:{{w}};height:{{30}}px;cursor:pointer; background: {{bc}}; background: -webkit-linear-gradient(left, {{bc}}, {{bc2}}); background: -o-linear-gradient(right, {{bc}}, {{bc2}}); background: -moz-linear-gradient(right, {{bc}}, {{bc2}}); background: linear-gradient(to right, {{bc}}, {{bc2}});\"><div class=\"text-center\" style=\"color:white;font-size:small\"><i class=\"fa fa-eye\"></i> {{views}} | <i class=\"fa fa-list-ol\"></i> {{answers}} | <i class=\"fa fa-comment\"></i> {{comments}}</div></div></div>");
$templateCache.put("app/content/partials/answer-block.html","<div ng-class=\"sm?\'\':\'rank-item\'\" style=\"padding-bottom:10px\"><div class=\"row\" ng-click=\"ansSel(answer)\"><div class=\"container-bgbox col-xs-6\"><div style=\"position:absolute; z-index: 50; padding: 2px; font-size: 17px; color: #fff\"><small><i class=\"{{answer.icon}}\" aria-hidden=\"true\"></i> <span class=\"tooltiptext\">{{answer.itext}}</span></small></div><bg-box2 bc=\"{{bc}}\" shade=\"{{shade}}\" fc=\"{{fc}}\" text=\"{{answer.name}}\" dir=\"horizontal\" w=\"100%\" h=\"{{sm ? \'150\':\'200\'}}\" stats=\"{{stats}}\"></bg-box2></div><div class=\"col-xs-6\" style=\"margin:0px;padding:0px;border:0px;\" ng-if=\"!isShortPhrase\"><img ng-src=\"{{image1}}\" ng-attr-style=\"display:{{image1 != undefined ? \'inline\':\'none\'}};width:100%;height:{{sm ? \'150px\':\'200px\'}};cursor:pointer;\"></div></div></div>");
$templateCache.put("app/content/partials/content-block.html","<div class=\"row\"><div class=\"col-xs-12 col-sm-6 col-md-4\" ng-repeat=\"ranking in initalHomeData\" ng-if=\"initalHomeData\"><rank-item rank-object=\"ranking\"></rank-item></div></div><div class=\"row\"><div infinite-scroll=\"loadMore()\" infinite-scroll-distance=\"0\" infinite-scroll-disabled=\"(!pageDataLoaded || scrollDataLoading) || endReached\" class=\"col-xs-12\" id=\"inifinite-container\" style=\"padding:0px;margin:0px\"><div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-4\" ng-repeat=\"rankingID in scrollingData.slice(startIndex, currentIndex)\"><rank-item rank-object=\"uniqueResult[rankingID]\"></rank-item></div><div ng-if=\"(pageDataLoaded || scrollDataLoading) && !endReached\" class=\"col-xs-12 text-center\"><a><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"> Loading More...</a></div><div ng-if=\"endReached\" class=\"col-xs-12 text-center\" style=\"border: 1px solid #00b3e4;font-size: 14px\">End Reached.</div></div></div>");
$templateCache.put("app/content/partials/facebook-follow.html","");
$templateCache.put("app/content/partials/rank-block.html","<div ng-class=\"sm?\'\':\'rank-item\'\" style=\"padding-bottom:10px\"><div class=\"row\" ng-click=\"rankSel(rank,false)\"><div class=\"container-bgbox col-xs-6\"><div style=\"position:absolute;background-color:red; z-index: 50; padding: 2px; font-size: 14px; color: #fff\" ng-if=\"rod\">&nbspRanking of the Day&nbsp</div><div style=\"position:absolute; z-index: 50; padding: 2px; font-size: 17px; color: #fff\" ng-if=\"!rod\"><small><i class=\"fa fa-list-ol\" aria-hidden=\"true\"></i></small></div><bg-box2 bc=\"{{bc}}\" shade=\"{{shade}}\" fc=\"{{fc}}\" text=\"{{title}}\" dir=\"horizontal\" w=\"100%\" h=\"{{sm ? \'150\':\'200\'}}\" stats=\"{{stats}}\"></bg-box2></div><div class=\"col-xs-6\" style=\"margin:0px;padding:0px;border:0px;\" ng-if=\"!isShortPhrase\"><img ng-src=\"{{image1}}\" ng-attr-style=\"display:{{image1 != undefined ? \'inline\':\'none\'}};width:100%;height:{{sm ? \'150px\':\'200px\'}};cursor:pointer;\"></div></div></div>");
$templateCache.put("app/content/partials/rank-of-day.html","<div ng-class=\"sm?\'\':\'rank-item\'\" style=\"padding-bottom:10px\"><div class=\"row\" ng-click=\"rankSel(rank,false)\" ng-if=\"isBasic\"><div class=\"container-bgbox col-xs-12 col-sm-12\" ng-if=\"part==\'title\'\"><div style=\"position:absolute;background-color:red; z-index: 50; padding: 2px; font-size: 17px; color: #fff\">&nbspRanking of the Day&nbsp</div><bg-box2 bc=\"{{bc}}\" shade=\"{{shade}}\" fc=\"{{fc}}\" text=\"{{title}}\" dir=\"horizontal\" w=\"100%\" h=\"{{sm ? \'150\':\'200\'}}\" stats=\"{{stats}}\" question=\"{{rankObject.question}}\" is-rank-of-day=\"{{true}}\"></bg-box2></div><div class=\"col-xs-12 col-sm-12 row\" style=\"margin:0px; padding: 0px; border:0px;cursor:pointer;\" ng-if=\"part==\'image\'\"><div class=\"col-xs-6\" style=\"padding: 0px\"><img ng-src=\"{{image1}}\" ng-attr-style=\"display:{{image1 != undefined ? \'inline\':\'none\'}};width:100%;height:{{sm ? \'150px\':\'200px\'}};\"></div><div class=\"col-xs-6\" style=\"padding: 0px\" ng-if=\"!isShortPhrase\"><img ng-src=\"{{image2}}\" ng-attr-style=\"display:{{image2 != undefined ? \'inline\':\'none\'}};width:100%;height:{{sm ? \'150px\':\'200px\'}};\"></div><div class=\"container-bgbox col-xs-6\" ng-if=\"isShortPhrase\"><bg-box bc=\"{{bcp}}\" bc2=\"{{bc2p}}\" fc=\"{{fcp}}\" text=\"{{title1}}\" dir=\"horizontal\" w=\"100%\" h=\"{{sm ? \'150px\':\'200px\'}}\"></bg-box></div></div></div></div>");
$templateCache.put("app/content/partials/result-block.html","<div ng-class=\"sm?\'\':\'result-item\'\"><div class=\"row\" ng-click=\"resSel(result)\"><div class=\"container-bgbox col-xs-12\"><bg-box3 bc=\"{{bc}}\" shade=\"{{shade}}\" fc=\"{{fc}}\" text=\"{{title}}\" dir=\"horizontal\" introtext=\"{{introtext}}\" w=\"100%\" h=\"{{sm ? \'150\':\'200\'}}\" stats=\"{{stats}}\" type=\"{{type}}\" imageurl=\"{{imageurl}}\" isanswer=\"{{isAnswer}}\"></bg-box3></div></div></div>");
$templateCache.put("app/content/partials/search-block.html","<div class=\"\" ng-show=\"contentLoaded\"><div infinite-scroll=\"loadMore(false)\" infinite-scroll-distance=\"3\" infinite-scroll-disabled=\"scrollDataLoading || endReached || disableScrolling\" id=\"inifinite-container\"><div masonry=\"\"><div class=\"col-xs-6 col-sm-6 col-md-4 col-lg-3 masonry-brick minxs280\" ng-repeat=\"x in displayResults\"><div style=\"width:95%\"><result-item result-object=\"x\"></result-item></div></div></div></div><div ng-if=\"scrollDataLoading && !endReached\" class=\"col-xs-12 text-center\"><a><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"> Loading More...</a></div><div ng-if=\"endReached\" class=\"col-xs-12 text-center\" style=\"border: 1px solid #00b3e4;font-size: 20px\">No more results.</div></div><div ng-attr-style=\"position:relative;width:100%;height:150px;\" ng-if=\"!contentLoaded\"><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px;position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"></div>");
$templateCache.put("app/content/partials/trend-block.html","<div class=\"\"><div class=\"\"><div class=\"col-xs-12 trend-tab\" style=\"padding: 0px; background-color:#e6e6e6\"><ul class=\"nav nav-tabs trend-tab\" style=\"background-color: white\"><li class=\"active\" style=\"cursor: pointer\"><a data-toggle=\"tab\" href=\"#userfeed\">Feed</a></li><li style=\"cursor: pointer\"><a data-toggle=\"tab\" href=\"#popular\">Popular</a></li><li style=\"cursor: pointer\"><a data-toggle=\"tab\" href=\"#newest\">Newest</a></li></ul><div class=\"tab-content\" style=\"\"><div class=\"tab-pane in active fade\" style=\"padding-top:10px;padding-bottom:10px;\" ng-class=\"showAll ==\'true\' ?\'\':\'trend-tab-single-page\'\" id=\"userfeed\"><userfeed-block show-all=\"true\" show-qty=\"{{userfeedLimit}}\"></userfeed-block><p class=\"text-center\" style=\"color:blue; margin-top:10px\" ng-if=\"showAll == \'true\'\"><a class=\"btn btn-default\" style=\"margin-right:20px;\" ng-click=\"seeMore(\'userfeed\')\">See More</a><a class=\"btn btn-default\" ng-click=\"goBack()\">Back</a></p></div><div class=\"tab-pane fade\" style=\"padding-top:10px;padding-bottom:10px;\" ng-class=\"showAll ==\'true\' ?\'\':\'trend-tab-single-page\'\" id=\"popular\"><div class=\"col-xs-12 media ranking-blog-item\" ng-repeat=\"ranking in popularOrder | limitTo:popularLimit\" style=\"cursor: pointer;\" ng-click=\"rankSel(ranking)\"><div class=\"profile-avatar-wrapper media-left\"><img ng-src=\"{{ranking.realimage}}\"></div><div class=\"media-body\" style=\"vertical-align: middle;\">{{ranking.title}} <span class=\"pull-right\">{{ranking.views}} Views</span></div></div><p class=\"text-center\" style=\"color:blue; margin-top:10px\" ng-if=\"showAll == \'true\'\"><a class=\"btn btn-default\" style=\"margin-right:20px;\" ng-click=\"seeMore(\'popular\')\">See More</a><a class=\"btn btn-default\" ng-click=\"goBack()\">Back</a></p></div><div class=\"tab-pane fade\" style=\"padding-top:10px;padding-bottom:10px;\" id=\"newest\" ng-class=\"showAll ==\'true\' ?\'\':\'trend-tab-single-page\'\"><div class=\"col-xs-12 media ranking-blog-item\" ng-repeat=\"ranking in newestOrder| limitTo:newestLimit\" ng-click=\"rankSel(ranking)\" style=\"cursor: pointer;\"><div class=\"profile-avatar-wrapper media-left\"><img ng-src=\"{{ranking.realimage}}\"></div><div class=\"media-body\" style=\"vertical-align: middle;\">{{ranking.title}}<span class=\"pull-right\">{{ranking.humanized}}</span></div></div><p class=\"text-center\" style=\"color:blue; margin-top:10px\" ng-if=\"showAll == \'true\'\"><a class=\"btn btn-default\" style=\"margin-right:20px;\" ng-click=\"seeMore(\'newest\')\">See More</a><a class=\"btn btn-default\" ng-click=\"goBack()\">Back</a></p></div></div><p class=\"text-center\" style=\"color:blue;margin-top:10px\" ng-if=\"showAll == \'false\'\"><a class=\"btn btn-default\" href=\"/trends\">See More</a></p></div></div></div>");
$templateCache.put("app/content/partials/userfeed-block.html","<button type=\"button\" class=\"btn btn-default pull-right\" style=\"vertical-align:middle;\" ng-click=\"refreshFeed()\"><span class=\"glyphicon glyphicon-refresh\" style=\"padding-top:0px;padding-bottom:0px;\" aria-hidden=\"true\"></span></button><div ng-repeat=\"x in feeds | orderBy:\'-id\' | limitTo:fres\" style=\"padding:0px;border:0px;margin-top:10px;\"><div class=\"row\" style=\"margin:4px\"><div class=\"col-xs-12 media\" style=\"padding-left: 5px;padding-right: 5px;\"><div ng-if=\"!x.picture\" class=\"profile-avatar-wrapper media-left\"><div class=\"empty-profile-avatar-wrapper\" ng-attr-style=\"background-color:{{x.bc}};color:{{x.fc}};\">{{x.initials}}</div></div><div ng-if=\"x.picture\" class=\"profile-avatar-wrapper media-left\" align=\"middle\"><img ng-src=\"{{x.picture}}\" class=\"img-responsive img-circle profile-avatar\"></div><div ng-if=\"x.action == \'addedAnswer\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} added <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a> to <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a>.</div><div ng-if=\"x.action == \'upVoted\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} endorsed <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a> in <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a>.</div><div ng-if=\"x.action == \'downVoted\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} voted down <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a> in <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a>.</div><div ng-if=\"x.action == \'commentR\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} posted a comment in <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a>.</div><div ng-if=\"x.action == \'commentA\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} posted a comment for <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div><div ng-if=\"x.action == \'editA\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} edited the information of <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div><div ng-if=\"x.action == \'upVotedVrow\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} endorses the opinion: <em>{{x.text2}}</em> for <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div><div ng-if=\"x.action == \'downVotedVrow\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} disagrees with the opinion: <em>{{x.text2}}</em> for <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div><div ng-if=\"x.action == \'binded\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} bound account to <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div><div ng-if=\"x.action == \'addedRank\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} added a new ranking <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a>.</div><div ng-if=\"x.action == \'addedCustomRank\'\" class=\"media-body\" style=\"vertical-align: middle;\">{{x.actorusername}} created the ranking <a ng-click=\"gotoRank(x)\" style=\"cursor:pointer\">{{x.text2}}</a> for <a ng-click=\"gotoAnswer(x)\" style=\"cursor:pointer\">{{x.text1}}</a>.</div></div></div></div>");
$templateCache.put("app/layout/Partials/cwrapper.html","");
$templateCache.put("app/layout/Partials/layout.html","<div ui-view=\"navbar\" style=\"position: fixed; z-index: 1000; width: 100%\"></div><div class=\"container\" style=\"padding-left:5px;padding-right:5px; margin-bottom: 20px;\"><div id=\"veil\" ng-show=\"vm.isLoading\"></div><div id=\"feedLoading\" ng-show=\"vm.isLoading\"><div style=\"text-align: center\" ng-if=\"vm.isLoading\"><div><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"></div><p style=\"font-size:large\">{{vm.veilMsg}}</p></div></div><div ng-hide=\"vm.isLoading\"><div class=\"container\" style=\"margin-top: 60px\" ng-show=\"vm.barIsActive\"><div class=\"row\" style=\"padding-bottom:10px\"><div class=\"hidden-sm hidden-md hidden-lg hidden-xl\"><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;\"><button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'food\')\">Food</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'activities\')\">Activities</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'nightlife\')\">Nightlife</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'beauty\')\">Beauty</button></div><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px\"><button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'shopping\')\">Shopping</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'events\')\">Events</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'family\')\">Family</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'health\')\">Health</button></div><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;padding-bottom:7px\"><button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'services\')\">Services</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'fitness\')\">Fitness</button> <button class=\"col-xs-3 btn btn-default\" ng-click=\"vm.quickFilter(\'sports\')\">Sports</button> <button class=\"col-xs-3 btn btn-default\" style=\"padding-left:5px\" ng-click=\"vm.quickFilter(\'neighborhood\')\"><small>{{vm.nh != \'\'? vm.nh:\'Neighborhood\'}}</small></button></div></div><div class=\"hidden-xs\"><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;\"><button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'food\')\">Food</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'activities\')\">Activities</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'nightlife\')\">Nightlife</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'beauty\')\">Beauty</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'shopping\')\">Shopping</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'events\')\">Events</button></div><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;padding-bottom:7px\"><button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'family\')\">Family</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'health\')\">Health</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'services\')\">Services</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'fitness\')\">Fitness</button> <button class=\"col-xs-2 btn btn-default\" ng-click=\"vm.quickFilter(\'sports\')\">Sports</button> <button class=\"col-xs-2 btn btn-default\" style=\"padding-left:5px\" ng-click=\"vm.quickFilter(\'neighborhood\')\">{{vm.nh != \'\'? vm.nh:\'Neighborhood\'}}</button></div></div><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;padding-bottom:7px;\" ng-show=\"vm.nhctrl\"><div class=\"col-xs-3\" style=\"padding-left:0px;padding-right:0px;\"><p style=\"padding-top:5px\">Neighborhood</p></div><div class=\"col-xs-5\" style=\"padding-left:0px;padding-right:0px;\"><input type=\"text\" class=\"form-control\" placeholder=\"Enter Neighborhood\" ng-model=\"vm.nhinp\" bs-options=\"c for c in vm.nhops\" bs-typeahead=\"\"></div><button class=\"col-xs-2 btn btn-success\" type=\"submit\" ng-click=\"vm.selectNh()\">Select</button> <button class=\"col-xs-2 btn btn-default\" type=\"submit\" ng-click=\"vm.clearNh()\">Clear</button></div><div class=\"col-xs-12\" style=\"padding-left:0px;padding-right:0px;\"><div class=\"col-xs-7\" style=\"padding-left:0px;padding-right:0px;\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" placeholder=\"Search San Diego\" ng-model=\"vm.val\" ng-change=\"vm.getResults()\" id=\"SearchInput\"><div class=\"input-group-btn\"><button class=\"btn btn-default\" type=\"submit\"><i class=\"glyphicon glyphicon-search\"></i></button></div></div></div><div class=\"col-xs-3\" style=\"padding-left:0px;padding-right:0px\"><button class=\"btn btn-default\" style=\"width:100%\" ng-click=\"vm.goAddRank()\">Add Rank&nbsp&nbsp</button></div><button class=\"col-xs-2 btn btn-default pull-right\" ng-click=\"vm.showTrends()\"><i class=\"fa fa-rss\" aria-hidden=\"true\"></i></button></div></div></div><div class=\"input-group\" style=\"width:100%\" ng-if=\"vm.isAdmin&&!vm.childActive\"><div class=\"text-center\" ng-attr-style=\"display:{{vm.isAdmin ? \'inline\':\'none\'}}\"><div class=\"btn-group col-sm-6 col-md-6\"><button class=\"btn btn-primary {{vm.selEditRank}}\" ng-click=\"vm.editRank()\">Edit Mode</button> <button class=\"btn btn-primary {{vm.selViewRank}}\" ng-click=\"vm.viewRank()\">View Mode</button></div></div></div><div ng-show=\"!vm.childActive\"><search-block ng-click=\"vm.hideSearch()\" query=\"{{vm.val}}\" ans=\"vm.showans\" ranks=\"true\" length=\"vm.slen\" init=\"vm.initready\" data=\"vm.dataready\" rod=\"vm.rodready\" scrollactive=\"!vm.childActive\"></search-block></div><br ng-if=\"vm.childActive\"><br ng-if=\"vm.childActive\"><br ng-if=\"vm.childActive\"><div ui-view=\"\" ng-if=\"!vm.isLoading && vm.childActive\" class=\"container\" id=\"page-containter\" style=\"\"></div></div><a href=\"#\" class=\"back-to-top\" style=\"display: inline;\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></a></div><br><br><footer class=\"footer\" style=\"position: fixed; bottom: 0px; background: white; width: 100%; padding-top: 20px;\"><div class=\"container\"><p class=\"text-muted\">Rank-X is a registered trademark property of Rank-X LLC. San Diego, CA - 2017 <span><a ng-click=\"vm.goPrivacyPolicy()\">Privacy Policy</a></span> <span><a ng-click=\"vm.goRankofDayConsole()\">RoD</a></span></p></div></footer>");
$templateCache.put("app/layout/Partials/navbar.html","<nav class=\"navbar navbar-inverse\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand\" href=\"/cwrapper\" ng-click=\"vm.gotoHome()\" style=\"cursor:pointer;padding:0px;border:0px;margin:0px;\"><img src=\"/assets/images/logosqwborder.jpg\" style=\"width:60px;\"></a> <a class=\"navbar-brand home-link\" ng-click=\"vm.selCity()\" style=\"font-size:medium\">San Diego</a> <a class=\"navbar-brand navbar-profile-picture-wrapper\" ng-show=\"vm.user\" href=\"/favs\" ng-click=\"vm.gotofavs()\"><img class=\"img-responsive img-circle navbar-profile-picture\" ng-src=\"{{vm.user.picture.data.url}}\"> <span style=\"font-size:medium\">{{vm.user.first_name}}</span></a> <a class=\"navbar-brand\" ng-if=\"vm.warning\" style=\"background-color:#33cccc;color:black;margin:2px\" ng-click=\"vm.goWarning()\"><i class=\"fa fa-warning\"></i></a> <a class=\"navbar-brand\" ng-if=\"vm.coordsRdy\" ng-click=\"vm.goCoords()\" style=\"margin:0px;\"><i class=\"fa fa-location-arrow\"></i></a></div><div id=\"navbar\" class=\"navbar-collapse collapse\"><ul class=\"nav navbar-nav navbar-right\"><li ng-if=\"vm.hasBusiness\"><a href=\"/mybusiness\" ng-click=\"vm.gotomybusiness()\">My Business</a></li><li ng-if=\"vm.isPromoter\"><a href=\"/promoterconsole\" ng-click=\"vm.goPromoterConsole()\">Promote</a></li><li><a href=\"/about\" ng-click=\"vm.gotoAbout()\">About</a></li><li><a href=\"/tour\" ng-click=\"vm.gotoTour()\">Tour</a></li><li ng-if=\"vm.isAdmin\"><a href=\"\" ng-click=\"vm.gotoAdmin()\">Admin</a></li><li ng-if=\"!vm.isLoggedIn\"><a ng-click=\"vm.goToLogin()\">Login</a></li><li ng-if=\"vm.isLoggedIn\"><a href=\"/logout\" ng-click=\"vm.logout()\" class=\"\">Logout</a></li></ul></div></div></nav>");
$templateCache.put("app/rank/Partials/RankSummary.html","<div ng-if=\"!vm.foodNearMe\"><div id=\"veil\" ng-hide=\"vm.dataReady\"></div><div id=\"feedLoading\" ng-hide=\"vm.dataReady\"><div style=\"text-align: center\" ng-if=\"!vm.dataReady\"><div><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"></div><p style=\"font-size:large\">loading rank...</p></div></div></div><div ng-if=\"vm.foodNearMe\"><div id=\"veil\" ng-show=\"vm.loadingAnswers\"></div><div id=\"feedLoading\" ng-show=\"vm.loadingAnswers\"><div style=\"text-align: center\"><div><img src=\"/assets/images/loading.gif\" class=\"img\" style=\"width:50px;height:50px\"></div><p style=\"font-size:large\">Wait a moment, finding some delicious food near by...</p></div></div></div><div ng-if=\"vm.dataReady && !vm.loadingAnswers\"><div class=\"text-left\"><button class=\"btn btn-default\" ng-click=\"vm.backToResults()\" style=\"margin:5px; width:100%; background-color:lightgray\">Back to Results</button> <button class=\"btn btn-default\" ng-if=\"vm.hasParent\" ng-click=\"vm.gotoParentRank()\" style=\"margin:5px; width:100%; background-color:lightgray\">{{vm.parentRank.title}}</button></div><div class=\"text-left\" ng-if=\"vm.isCustomRank\"><button class=\"btn btn-default\" ng-click=\"vm.answerDetail(vm.rankOwner)\" style=\"margin:5px; width:100%; background-color:lightgray\">Return to {{vm.rankOwner.name}}</button></div><div class=\"container\"><div class=\"row\"><div class=\"container-bgbox col-xs-6 col-sm-4 col-md-4 col-lg-3\"><bg-box bc=\"{{vm.bc}}\" shade=\"{{vm.shade}}\" fc=\"{{vm.fc}}\" text=\"{{vm.ranking}}\" dir=\"horizontal\" w=\"100%\" h=\"{{vm.sm ? \'150px\':\'200px\'}}\"></bg-box></div><div ng-if=\"!vm.isShortPhrase\"><div class=\"col-xs-6 col-sm-4 col-md-4 col-lg-3\" style=\"margin:0px;padding:0px;border:0px;\" ng-if=\"!vm.isShortPhrase\"><img ng-src=\"{{vm.image1}}\" ng-attr-style=\"display:{{vm.image1 != undefined ? \'inline\':\'none\'}};width:100%;height:{{vm.sm ? \'150px\':\'200px\'}};\"></div><div class=\"hidden-xs col-sm-4 col-md-4 col-lg-3\" style=\"margin:0px;padding:0px;border:0px;\" ng-if=\"!vm.isShortPhrase\"><img ng-src=\"{{vm.image2}}\" ng-attr-style=\"display:{{vm.image2 != undefined ? \'inline\':\'none\'}};width:100%;height:{{vm.sm ? \'150px\':\'200px\'}};\"></div><div class=\"hidden-xs hidden-sm hidden-md col-lg-3\" style=\"margin:0px;padding:0px;border:0px;\" ng-if=\"!vm.isShortPhrase\"><img ng-src=\"{{vm.image3}}\" ng-attr-style=\"display:{{vm.image3 != undefined ? \'inline\':\'none\'}};width:100%;height:{{vm.sm ? \'150px\':\'200px\'}};\"></div></div><div ng-if=\"vm.isShortPhrase&&vm.hasfimage\"><div class=\"col-xs-6 col-sm-4 col-md-4 col-lg-3\" style=\"margin:0px;padding:0px;border:0px;\"><img ng-src=\"{{vm.fimage}}\" ng-attr-style=\"display:{{vm.image1 != undefined ? \'inline\':\'none\'}};width:100%;height:{{vm.sm ? \'150px\':\'200px\'}};\"></div><div class=\"container hidden-xs col-sm-4 col-md-4 col-lg-3\" ng-attr-style=\"background-color:lightgray;color:black;height:{{sm ? \'150px\':\'200px\'}};margin:0px;padding:0px;border:0px;position:relative;\"><div style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h2 class=\"hidden-xs text-center\">{{vm.title1}}</h2><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\">{{vm.title1}}</h3></div></div><div class=\"container hidden-xs hidden-sm hidden-md col-lg-3\" ng-attr-style=\"background-color:lightgray;color:black;height:{{sm ? \'150px\':\'200px\'}};margin:0px;padding:0px;border:0px;position:relative;\"><div style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h2 class=\"hidden-xs text-center\">{{vm.title2}}</h2><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\">{{vm.title2}}</h3></div></div></div><div ng-if=\"vm.isShortPhrase&&!vm.hasfimage\"><div class=\"container col-xs-6 col-sm-4 col-md-4 col-lg-3\" ng-attr-style=\"background-color:lightgray;color:black;height:{{sm ? \'150px\':\'200px\'}};margin:0px;padding:0px;border:0px;position:relative;\"><div style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h2 class=\"hidden-xs text-center\">{{vm.title1}}</h2><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\">{{vm.title1}}</h3></div></div><div class=\"container hidden-xs col-sm-4 col-md-4 col-lg-3\" ng-attr-style=\"background-color:lightgray;color:black;height:{{sm ? \'150px\':\'200px\'}};margin:0px;padding:0px;border:0px;position:relative;\"><div style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h2 class=\"hidden-xs text-center\">{{vm.title2}}</h2><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\">{{vm.title2}}</h3></div></div><div class=\"container hidden-xs hidden-sm hidden-md col-lg-3\" ng-attr-style=\"background-color:lightgray;color:black;height:{{sm ? \'150px\':\'200px\'}};margin:0px;padding:0px;border:0px;position:relative;\"><div style=\"padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)\"><h2 class=\"hidden-xs text-center\">{{vm.title3}}</h2><h3 class=\"hidden-sm hidden-md hidden-lg hidden-xl text-center\">{{vm.title3}}</h3></div></div></div></div></div><br ng-if=\"vm.introtext\"><p class=\"text-left\">{{vm.introtext}}</p><br><div class=\"row\" style=\"margin:0px;padding:0px;\"><div class=\"col-sm-9 col-md-9 col-lg-10 hidden-xs\" style=\"margin-bottom: 10px; padding:0px\"><div class=\"btn-group text-left\"><button class=\"btn btn-default\" ng-click=\"vm.sortbyHelpDialog()\"><i class=\"fa fa-question-circle\"></i></button> <span style=\"float: left;margin-left: 10px; margin-right: 10px;line-height: 32px\">{{vm.sm ? \'\':\'Sort by:\'}}</span> <button class=\"btn btn-default {{vm.selRank}}\" ng-click=\"vm.sortByRank()\" ng-if=\"vm.type != \'Event\' && !vm.fnm\">Rank</button> <button class=\"btn btn-default {{vm.selUpV}}\" ng-click=\"vm.sortByUpV()\">Popular</button> <button class=\"btn btn-default {{vm.selDistance}}\" ng-click=\"vm.sortByDistance()\" ng-show=\"{{vm.type == \'Establishment\' || vm.type == \'Event\' || vm.type == \'Place\'}}\">Distance</button> <button class=\"btn btn-default {{vm.selDate}}\" ng-click=\"vm.sortByDate()\" ng-show=\"{{vm.type == \'Event\'}}\">Date</button> <button class=\"btn btn-default {{vm.selTrending}}\" ng-click=\"vm.sortByTrending()\">Trending</button></div></div><div class=\"col-xs-8 visible-xs\" style=\"margin-bottom: 10px; padding:0px\"><div class=\"dropdown\" style=\"margin:0px; padding:0px;\"><button class=\"btn btn-default\" ng-click=\"vm.sortbyHelpDialog()\"><i class=\"fa fa-question-circle\"></i></button> <span style=\"line-height:32px; margin: 0px 10px;\">Sort By:</span> <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{{vm.sortByName}} <span class=\"caret\"></span></button><ul class=\"dropdown-menu\"><li><a class=\"btn btn-default {{vm.selRank}}\" ng-click=\"vm.sortByRank()\" ng-if=\"vm.type != \'Event\' && !vm.fnm\">Rank</a></li><li><a class=\"btn btn-default {{vm.selUpV}}\" ng-click=\"vm.sortByUpV()\">Popular</a></li><li><a class=\"btn btn-default {{vm.selDistance}}\" ng-click=\"vm.sortByDistance()\" ng-show=\"{{vm.type == \'Establishment\' || vm.type == \'Event\' || vm.type == \'Place\'}}\">Distance</a></li><li><a class=\"btn btn-default {{vm.selDate}}\" ng-click=\"vm.sortByDate()\" ng-show=\"{{vm.type == \'Event\'}}\">Date</a></li><li><a class=\"btn btn-default {{vm.selTrending}}\" ng-click=\"vm.sortByTrending()\">Trending</a></li></ul></div></div><div class=\"col-xs-4 col-sm-3 col-md-3 col-lg-2 btn-group text-center\"><a type=\"button\" class=\"btn btn-default\" style=\"vertical-align:middle;color:#0059b3;border-color:#0059b3;\" ng-if=\"true\" ng-click=\"vm.share()\" target=\"_blank\">Share&nbsp&nbsp<span class=\"fa fa-share\"></span></a></div></div><div class=\"row\"><div class=\"col-xs-12 col-sm-6 text-center\" style=\"margin-bottom: 10px; padding:0px\" ng-if=\"!vm.fnm\"><div class=\"btn-group\" style=\"padding-right:20px\"><button ng-click=\"vm.changeMode(\'endorse\')\" class=\"btn {{vm.mode==\'endorse\' ? \'btn-primary\':\'btn-default\'}}\">Endorsements</button> <button ng-click=\"vm.changeMode(\'specials\')\" class=\"btn {{vm.mode==\'specials\' ? \'btn-primary\':\'btn-default\'}}\">Specials</button></div><button ng-click=\"vm.goRank()\" class=\"btn btn-success {{vm.rankDisabled}}\">&nbsp&nbsp&nbsp&nbspRank&nbsp&nbsp&nbsp&nbsp</button></div><div class=\"col-xs-12 col-sm-6 input-group\"><input type=\"text\" class=\"form-control\" bs-options=\"c for c in vm.opts\" bs-typeahead=\"\" placeholder=\"Filter by Name or Neighborhood\" ng-model=\"vm.val\" ng-change=\"vm.getResults()\" id=\"SearchInput\"><div class=\"input-group-btn\"><button class=\"btn btn-default\" type=\"submit\" ng-click=\"vm.clearSearch()\"><i class=\"glyphicon glyphicon-search\"></i></button></div></div></div><br><table class=\"table table-hover cursor\"><tbody><thead><tr><th ng-if=\"!vm.sm || vm.sortByName==\'Rank\'\" align=\"middle\">Rank</th><th class=\"capitalize\" ng-repeat=\"h in vm.fields | filter:{isrequired:true}\" align=\"middle\">{{h.label}}</th><th ng-if=\"!vm.sm || vm.sortByName==\'Popular\'\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">Diff.</th><th ng-if=\"(!vm.sm || vm.sortByName==\'Distance\') && vm.haveLocation\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">Dist (mi)</th><th ng-if=\"(!vm.sm || vm.sortByName==\'Trending\')\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">Last month</th><th ng-if=\"(!vm.sm || vm.sortByName==\'Date\') && vm.type == \'Event\' && vm.mode==\'specials\'\" align=\"middle\">Date</th><th ng-if=\"vm.type == \'Establishment\' && vm.mode==\'specials\'\" style=\"width:{{vm.sm?\'150px\':\'200px\'}}\" class=\"text-center\">Specials</th><th ng-if=\"vm.mode == \'endorse\'\" style=\"width:{{vm.sm?\'150px\':\'200px\'}}\" class=\"text-center\">Endorsements</th><th ng-if=\"vm.mode==\'endorse\'\">&nbsp</th></tr></thead><tbody><tr ng-repeat=\"x in vm.answers | limitTo: vm.limit\" style=\"height:43px\" ng-click=\"vm.answerDetail(x)\"><td ng-if=\"!vm.sm || vm.sortByName == \'Rank\'\" align=\"middle\">{{x.Rank}}</td><td ng-repeat=\"h in vm.fields | filter:{isrequired:true}\"><a ng-attr-style=\"text-decoration: none;\" href=\"{{\'/answerDetail/\' + x.slug }}\" ng-click=\"vm.answerDetail(x)\">{{ x[h.name]}}</a></td><td ng-if=\"(!vm.sm || vm.sortByName == \'Distance\') && vm.haveLocation\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">{{x.dist}}</td><td ng-if=\"!vm.sm || vm.sortByName == \'Popular\'\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">{{x.upV - x.downV > 0 ? (\'+\'+(x.upV-x.downV)):(x.upV-x.downV)}}</td><td ng-if=\"!vm.sm || vm.sortByName == \'Trending\'\" align=\"middle\" style=\"width:{{vm.sm?\'10px\':\'auto\'}}\">{{x.trendUpV!=undefined&&x.trendUpV!=NaN?x.trendUpV:0}}</td><td ng-if=\"(!vm.sm || vm.sortByName == \'Date\') && vm.type == \'Event\' && vm.mode==\'specials\'\" align=\"middle\">{{x.date}}</td><td ng-show=\"vm.type == \'Establishment\' && vm.mode==\'specials\'\" ng-attr-style=\"background-color:{{x.sp_bc}};color:{{x.sp_fc}};\" ng-click=\"vm.answerDetail(x)\">{{x.sp_title}}</td><td ng-if=\"vm.mode==\'endorse\'\" style=\"width:{{vm.sm?\'150px\':\'200px\'}}\"><div><span ng-click=\"vm.UpVote(x,$event)\" ng-attr-style=\"color:{{x.thumbUp}};margin-right: {{vm.sm?\'0px\':\'20px\'}};font-size: 18px;\" class=\"pull-left\">&nbsp&nbsp <i class=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i> <span style=\"color:black;font-size: 14px;\">&nbsp;{{x.upV}}&nbsp;&nbsp;</span></span> <span ng-click=\"vm.DownVote(x,$event)\" ng-attr-style=\"color:{{x.thumbDn}};margin-right: {{vm.sm?\'0px\':\'20px\'}};font-size: 18px;\" class=\"pull-right\"><i class=\"fa fa-thumbs-down\" aria-hidden=\"true\"></i> <span style=\"color:black;font-size: 14px;\">&nbsp;{{x.downV}}</span> &nbsp&nbsp</span></div><div class=\"hidden-sm hidden-md hidden-lg hidden-xl\"><div ng-if=\"x.userObjs.length == 1\"><span class=\"badge btn-primary\" ng-click=\"vm.showAllFriendsList(x.userObjs, x.name)\">1 friend endorses this</span></div><div ng-if=\"x.userObjs.length > 1\"><span class=\"badge btn-primary\" ng-click=\"vm.showAllFriendsList(x.userObjs, x.name)\">{{x.userObjs.length}} friends endorse this</span></div></div></td><td class=\"hidden-xs\" ng-if=\"vm.mode==\'endorse\'\" style=\"width:{{vm.sm?\'150px\':\'150px\'}}\"><div ng-if=\"x.userObjs.length == 1\"><span class=\"badge btn-primary\" ng-click=\"vm.showAllFriendsList(x.userObjs, x.name)\">1 friend endorses this</span></div><div ng-if=\"x.userObjs.length > 1\"><span class=\"badge btn-primary\" ng-click=\"vm.showAllFriendsList(x.userObjs, x.name)\">{{x.userObjs.length}} friends endorse this</span></div></td></tr></tbody></tbody></table><div class=\"text-center\" ng-if=\"vm.thereIsMore\"><button class=\"btn btn-default\" ng-click=\"vm.seeMore()\">See More</button></div><div class=\"row\" style=\"margin:0px;\" ng-if=\"!vm.hasAnswerParent || vm.userIsOwner\"><div class=\"col-xs-2\" style=\"padding:0px\"><a class=\"btn btn-primary\" ng-click=\"vm.addAnswer()\">+</a></div><div class=\"col-xs-10\" ng-attr-style=\"display:{{vm.hideInfoBox ? \'none\':\'inline\'}};padding:0px;\" ng-if=\"!vm.addInfoMsgAck || vm.noAnswers\"><div class=\"alert alert-warning\" style=\"padding-top: 5px;padding-bottom: 5px;\"><a class=\"close\" data-dismiss=\"alert\" aria-label=\"close\" ng-click=\"vm.closeAddInfoMsg()\">&times;</a> <span class=\"glyphicon glyphicon-arrow-left\"></span><strong>&nbsp;&nbsp; {{vm.noAnswers ? \'Oops, we have nothing on this list.\':\'Are we missing one?\'}}</strong>&nbsp;&nbsp;Use the \'+\' button to add a new <span ng-if=\"vm.type == \'Establishment\'\">Establishment.</span> <span ng-if=\"vm.type == \'Organization\'\">Organization or Company.</span> <span ng-if=\"vm.type == \'Person\'\">Person.</span> <span ng-if=\"vm.type == \'PersonCust\'\">Professional.</span> <span ng-if=\"vm.type == \'Place\'\">Place.</span> <span ng-if=\"vm.type == \'Short-Phrase\'\">Answer.</span> <span ng-if=\"vm.type == \'Thing\'\">Item.</span> <span ng-if=\"vm.type == \'Event\'\">Event.</span> <span ng-if=\"vm.type == \'Simple\'\">Item.</span></div></div></div><br><br ng-if=\"!vm.sm\"><div class=\"text-center\"><button ng-click=\"vm.loadComments()\" class=\"btn btn-default\" ng-class=\"vm.cm.commLoaded ? \'disabled\' : \'\'\" style=\"background-color:#e6e6e6;width:100%\">COMMENTS ({{vm.numcom}})</button></div><br ng-if=\"!vm.sm\"><div ng-attr-style=\"display:{{vm.cm.commLoaded ? \'inline\':\'none\'}}\"><div ng-repeat=\"x in vm.cm.comments\"><div class=\"col-xs-12 media\"><div ng-if=\"!x.picture\" class=\"profile-avatar-wrapper media-left\"><div class=\"empty-profile-avatar-wrapper\" ng-attr-style=\"background-color:{{x.bc}};color:{{x.fc}};\">{{x.initials}}</div></div><div ng-if=\"x.picture\" class=\"profile-avatar-wrapper media-left\" align=\"middle\"><img ng-src=\"{{x.picture}}\" class=\"img-responsive img-circle profile-avatar\"></div><div class=\"media-body\">{{x.body}}<br><small style=\"color:#bfbfbf\">{{x.username}} - {{x.date}}&nbsp&nbsp <span class=\"dropdown\"><i type=\"button\" class=\"fa fa-flag dropdown-toggle\" data-toggle=\"dropdown\"></i><ul class=\"dropdown-menu dropdown-menu-right\"><li><a ng-click=\"vm.cmFlag(1)\">Off-Topic</a></li><li><a ng-click=\"vm.cmFlag(2)\">Offensive</a></li><li><a ng-click=\"vm.cmFlag(3)\">Spam</a></li></ul></span></small></div></div><br></div><div ng-attr-style=\"display:{{(vm.cm.commLoaded && vm.cm.comments.length == 0 && !vm.isLoggedIn) ? \'inline\':\'none\'}}\"><br><p><small>Nobody has commented yet. Be the first. Log in, endorse answers and leave a comment.</small></p></div><div ng-attr-style=\"display:{{(vm.cm.commLoaded && vm.cm.comments.length > 0 && !vm.isLoggedIn) ? \'inline\':\'none\'}}\"><br><p><small>You must log in and endorse one or more answers to leave a comment.</small></p></div><div ng-attr-style=\"display:{{(vm.cm.commLoaded && vm.isLoggedIn && !vm.commentAllowed) ? \'inline\':\'none\'}}\"><br><p><small>Endorse one or more answers to leave a comment.</small></p></div><div ng-attr-style=\"display:{{(vm.isLoggedIn && vm.commentAllowed) ? \'inline\':\'none\'}}\"><div class=\"media\"><div ng-if=\"!user.picture.data.url\" class=\"profile-avatar-wrapper media-left\"><div class=\"empty-profile-avatar-wrapper\" ng-attr-style=\"background-color:{{x.bc}};color:{{x.fc}};\">{{x.initials}}</div></div><div ng-if=\"user.picture.data.url\" class=\"profile-avatar-wrapper media-left\" align=\"middle\"><img ng-src=\"{{user.picture.data.url}}\" class=\"img-responsive img-circle profile-avatar\"></div><div class=\"media-body\"><textarea class=\"form-control\" ng-model=\"vm.cm.newComment\" placeholder=\"Leave a comment\" style=\"margin-left:0px;margin-right:0px;\"></textarea></div></div><div class=\"text-right\"><button ng-click=\"vm.postComment()\" class=\"btn btn-primary\">Post</button></div></div></div><br></div>");
$templateCache.put("app/admin/Partials/admin.html","<div ui-view=\"navbar\"></div><br><div ng-if=\"!vm.dataready\"><h2>Please wait, loading all admin data...</h2></div><div ng-if=\"vm.dataready\"><div class=\"text-center\" ng-if=\"vm.isAdmin\"><div class=\"btn-group\"><button class=\"btn btn-default {{vm.selKeywords}}\" ng-click=\"vm.keywords()\">Searched-Keyword</button> <button class=\"btn btn-default {{vm.selViews}}\" ng-click=\"vm.views()\">Ranking-Answers Views</button> <button class=\"btn btn-default {{vm.selFlags}}\" ng-click=\"vm.flags()\">Answer Flags</button> <button class=\"btn btn-default {{vm.selAddRanking}}\" ng-click=\"vm.addRank()\">Add Ranking</button> <button class=\"btn btn-default {{vm.selDbMaint}}\" ng-click=\"vm.dbMaint()\">dB Maint</button> <button class=\"btn btn-default {{vm.selQuery}}\" ng-click=\"vm.dbQuery()\">Query</button> <button class=\"btn btn-default {{vm.selSibLocs}}\" ng-click=\"vm.sibLocs()\">Sibbling Locations</button> <button class=\"btn btn-default {{vm.selFoodRanks}}\" ng-click=\"vm.foodranks()\">Food Ranks</button> <button class=\"btn btn-default {{vm.selPayment}}\" ng-click=\"vm.payment()\">Payment</button> <button class=\"btn btn-default {{vm.selPlan}}\" ng-click=\"vm.plan()\">Plan</button> <button class=\"btn btn-default\" ng-click=\"vm.bizAdmin()\">Business</button> <button class=\"btn btn-default\" ng-click=\"vm.cleanDB()\">Clean DB</button> <button class=\"btn btn-default\" ng-click=\"vm.modImages()\">Moderate Images</button> <button class=\"btn btn-default\" ng-click=\"vm.staticPages()\">Static Pages</button> <button class=\"btn btn-default {{vm.selLocations}}\" ng-click=\"vm.golocations()\">Locations</button> <button class=\"btn btn-default {{vm.selsitemap}}\" ng-click=\"vm.gositemap()\">Sitemap</button> <button class=\"btn btn-danger\" ng-click=\"vm.applyRule()\">Apply Rule</button></div></div><div ng-if=\"vm.dataAdmin\"><button class=\"btn btn-default {{vm.selQuery}}\" ng-click=\"vm.dbQuery()\">Query</button> <button class=\"btn btn-default {{vm.selSibLocs}}\" ng-click=\"vm.sibLocs()\">Sibbling Locations</button></div><div ng-if=\"vm.modAdmin\"><button class=\"btn btn-default\" ng-click=\"vm.modImages()\">Moderate Images</button> <button class=\"btn btn-default\" ng-click=\"vm.staticPages()\">Static Pages</button></div></div><br><br><div ui-view=\"\"></div><br><br>");}]);
//# sourceMappingURL=data:application/json;base64,
(function () {
    'use strict';

    angular
        .module('app')
        .factory('staticpages', staticpages);

    staticpages.$inject = ['$http', '$q', '$rootScope','SERVER_URL'];

    function staticpages($http, $q, $rootScope,SERVER_URL) {

        // Members
        var fbUsers = [];

        var service = {
            createPageRank: createPageRank,
            createPageAnswer: createPageAnswer,
            removeFile: removeFile,
            getFileList: getFileList,
            getPageContent: getPageContent, 
        };

        return service;

        function createPageRank(rank){
            var url = SERVER_URL + 'staticpages/createPageRank';
            var req = {
                method: 'POST',
                data: rank,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }

        function createPageAnswer(answer){
            var url = SERVER_URL + 'staticpages/createPageAnswer';
            var req = {
                method: 'POST',
                data: answer,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }

        function getFileList(){
            var url = SERVER_URL + 'staticpages/getFileList';
            var req = {
                method: 'POST',
                data: {},
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }

        function getPageContent(page){
            var url = SERVER_URL + 'staticpages/getPageContent';
            var req = {
                method: 'POST',
                data: page,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }

        function removeFile(page){
            var url = SERVER_URL + 'staticpages/removeFile';
            var req = {
                method: 'POST',
                data: page,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }
      
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('setting', setting);

    setting.$inject = ['$http', '$q', '$rootScope','SERVER_URL'];

    function setting($http, $q, $rootScope,SERVER_URL) {

        // Members
        var fbUsers = [];

        var service = {
            getSetting: getSetting,
            setSetting: setSetting,
            setCodePrice: setCodePrice
        };

        return service;

        function getSetting(){
            var url = SERVER_URL + 'settings/';
            var req = {
                method: 'GET',
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req).then(function(result){
                $rootScope.setting = result.data.settings;
                return result.data.settings;
            });
        }

        function setSetting(setting){
            var url = SERVER_URL + 'settings/';
            var req = {
                method: 'POST',
                url: url,
                data: setting,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req).then(function(result){
                $rootScope.setting = result.data.settings;
                return result.data.settings;
            });
        }

        function setCodePrice(codepriceObj, newPrice){
            var url = SERVER_URL + 'codeprice/';
            var req = {
                method: 'POST',
                url: url,
                data: {
                    codeprice:codepriceObj,
                    newPrice: newPrice
                },
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('mailing', mailing);

    mailing.$inject = ['$http', '$q', '$rootScope','SERVER_URL'];

    function mailing($http, $q, $rootScope,SERVER_URL) {

        // Members
        var fbUsers = [];

        var service = {
            promoterCreated: promoterCreated,
            newBizCreated: newBizCreated,
            planPurchased: planPurchased,
            subscribed: subscribed,
            newImageUploaded: newImageUploaded,

        };

        return service;

        function newBizCreated(useraccnt){

            var url = SERVER_URL + 'mailing/newBizCreated';
            var req = {
                method: 'POST',
                data: useraccnt,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }

        function newImageUploaded(data){
            var url = SERVER_URL + 'mailing/newImageUploaded';
            var req = {
                method: 'POST',
                data: data,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }
        function promoterCreated(promoter){
            var url = SERVER_URL + 'mailing/promoterCreated';
            var req = {
                method: 'POST',
                data: promoter,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }

        function planPurchased(data){
            var url = SERVER_URL + 'mailing/planPurchased';
            var req = {
                method: 'POST',
                data: data,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }
        
        function subscribed(email, username){
            var url = SERVER_URL + 'mailing/userSubscribed';
            var req = {
                method: 'POST',
                data: {email: email, username: username},
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }

            return $http(req);
        }
        // function planPurchased(data){
        //     var url = SERVER_URL + 'mailing/planPurchased';
        //     var req = {
        //         method: 'POST',
        //         data: data,
        //         url: url,
        //         headers: {
        //             'X-Dreamfactory-API-Key': undefined,
        //             'X-DreamFactory-Session-Token': undefined
        //         }
        //     }

        //     return $http(req);
        // }

    }
})();

angular.module('app')
.factory("InstagramService", ["$rootScope", "$location", "$http", "INSTAGRAM_CLIENT_ID", function ($rootScope, $location, $http, INSTAGRAM_CLIENT_ID) {
    var client_id = INSTAGRAM_CLIENT_ID;    
    var pagination = {}; 
    var maxIds = [];
    var currentPageID;
    var nextEnabled = false;
    var service = {         
    	_access_token: null,
	    access_token: function(newToken) {             
	    	if(angular.isDefined(newToken)) {                 
	    		this._access_token = newToken;             
            }             
	    	return this._access_token;         
	    },
    	login: function () {
            var redirect_uri = $location.absUrl().split($location.path())[0] + '/';
	        var igPopup = window.open("https://api.instagram.com/oauth/authorize/?client_id=" + client_id +                 
	        "&redirect_uri=" + redirect_uri +
	        "&response_type=token&scope=likes+relationships+public_content+follower_list",'Instagram Auth', 'width=400, height=600, centerscreen=true, chrome=yes');
        },
        getMyRecentImages: function() {
            return $http.jsonp('https://api.instagram.com/v1/users/self/media/recent?access_token=' + service.access_token())
            .then(function(response){
                
                if(response.data.pagination.next_max_id){
                    nextEnabled = true;
                    maxIds = [response.data.pagination.next_max_id];
                    currentPageID = 0;
                } else {
                    nextEnabled = false;
                }
                
                return response.data.data;
            }); 
        },
        getNextPage: function() {
            return $http.jsonp('https://api.instagram.com/v1/users/self/media/recent?access_token=' + service.access_token() + '&max_id=' + maxIds[currentPageID]).then(function(response){
                if(response.data.pagination.next_max_id) {
                    if (maxIds.indexOf(response.data.pagination.next_max_id) == -1) {
                        maxIds.push(response.data.pagination.next_max_id);
                    }
                    nextEnabled = true;
                } else {
                    nextEnabled = false;
                }
                currentPageID ++;
                return response.data.data;
            }).catch(function(err){
                console.log(err);
            })
        },
        getPreviousPage: function() {

            return $http.jsonp('https://api.instagram.com/v1/users/self/media/recent?access_token=' + service.access_token() + '&max_id=' + maxIds[currentPageID-1]).then(function(response){
                
                currentPageID--;
                nextEnabled = true;
                return response.data.data;
            }).catch(function(err){
                console.log(err);
            })
        },
    
        getUserprofile: function() {
    		return $http.jsonp('https://api.instagram.com/v1/users/self/?access_token=' + service.access_token())
    		.then(function(data){
        		console.log(data);
        		return data;
        	})
        	.catch(function(err){
        		console.log(err);
        	});
        },

        isPreviousAvailable: function() {
            if(maxIds.length == 1 && currentPageID == 0)
                return false;

            if (currentPageID >= 0)
                return true;
            return false;
        },

        isNextAvailable: function() {
            return nextEnabled;
        }
    };     
    $rootScope.$on("igAccessTokenObtained", function (evt, args) {
		service.access_token(args.access_token.replace('#', '').replace('!', ''));   
		$rootScope.$broadcast("instagramLoggedIn", { access_token: service._access_token });
	});
    return service; 
}]);
(function () {
    'use strict';

    angular
        .module('app')
        .factory('filter', filter);

    filter.$inject = ['$http', '$q', '$rootScope', '$window'];

    function filter($http, $q, $rootScope, $window) {

        // Members
        var defaultOptions = {
            isNh: false,
            isCity: true,
            isNhRdy: '',
            cnh: '',
            isAllTopics: true,
            ctopics: ['LifeStyle', 'Social', 'Sports', 'Food', 'Beauty & Fashion', 'Family', 'Technology', 'Dating', 'City', 'Services', 'Health', 'Celebrities']
        };
        var service = {
            loadFilterOptions: loadFilterOptions,
            saveFilterOptions: saveFilterOptions,
            saveInitalHomeData: saveInitalHomeData,
            loadInitalHomeData: loadInitalHomeData
        };

        return service;

        function loadFilterOptions(){
            //$rootScope.filterOptions = $window.localStorage.getItem("Rank-X-Filters");
            if( !$rootScope.filterOptions )
                $rootScope.filterOptions = defaultOptions;
            else
                $rootScope.filterOptions = JSON.parse($rootScope.filterOptions);
            return $rootScope.filterOptions;
        }

        function saveFilterOptions(filterOptions){
            $rootScope.filterOptions = filterOptions;
            $window.localStorage.setItem("Rank-X-Filters", JSON.stringify(filterOptions));
        }


        function loadInitalHomeData(){
            //$rootScope.initalHomeData = $window.localStorage.getItem("Rank-X-HomeData");
            if( !$rootScope.initalHomeData ){
                return false;
            }
            else{
                //$rootScope.initalHomeData = JSON.parse($rootScope.initalHomeData);
                $rootScope.$emit('initalHomeDataLoaded');
                return true;
            }
        }

        function saveInitalHomeData(initalHomeData){
            //$rootScope.initalHomeData = initalHomeData;
            //$window.localStorage.setItem("Ranks-HomeData", JSON.stringify(initalHomeData));
            //$window.localStorage.setItem("Categories-HomeData", JSON.stringify(initalHomeData));
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('fbusers', fbusers);

    fbusers.$inject = ['$http', '$q', '$rootScope', '$facebook'];

    function fbusers($http, $q, $rootScope, $facebook) {

        // Members
        var fbUsers = [];

        var service = {
            findFBUserById: findFBUserById,
            getFBUserById: getFBUserById,
            addFBUser: addFBUser,

            loadProfilePicture: loadProfilePicture
        };

        return service;

        function addFBUser(user){
            fbUsers.push(user);
        }

        function getFBUserById(fbId){
            var user = findFBUserById(fbId);
            if(user)
                return $q.when(user);
            return $facebook.api('/'+fbId+'?fields=first_name,gender,locale,picture,last_name,email', 'GET').then(
            function(user){
                service.addFBUser(user);
                return user;
            },
            function(err){
                return null;
            });
        }

        function findFBUserById(fbId){
            return fbUsers.find(function(user){
                return user.id == fbId;
            });
        }

        function loadProfilePicture(users, fieldName){
            for (var i = 0; i < users.length; i++) {
                var userWithPic = angular.copy(user[i]);
                service.getFBUserById(userWithPic[fieldName])
                .then(function(fbUser){

                });
            }
            return users;
        }
        
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('common', common);

    common.$inject = ['$rootScope'];

    function common($rootScope) {

        //Members
        
        var service = {
            getInclusiveAreas: getInclusiveAreas,
            getIndexFromSlug: getIndexFromSlug
        };

        return service;

        function getInclusiveAreas(nh, arr) {

            var idx = $rootScope.locations.map(function (x) { return x.id; }).indexOf(nh);
            if (idx > -1) {
                var nhSub = $rootScope.locations[idx].sub_areas.split(',').map(Number);
                if (!$rootScope.locations[idx].sub_areas) {
                    arr.push(nh);
                }
                else {
                    arr.push(nh);
                    for (var i = 0; i < nhSub.length; i++) {
                        getInclusiveAreas(nhSub[i], arr);
                    }
                }
            }
            else console.log("Could not find -- ", nh);
        }

        function getIndexFromSlug(slug){
            //first check if slug is number
            if (isNumber(slug)){
                return slug;
            }
            else{
                var slugA = slug.split('-').map(Number);
                return slugA[slugA.length-1];
            }
        }

        function isNumber (o) {
            return ! isNaN (o-0) && o !== null && o !== "" && o !== false;
        }


    }
})();
var openModal = function (modalSelector, options) {
    $(modalSelector).modal({
        'backdrop': options && (options.backdrop == true || options.backdrop == false ) ? options.backdrop : "static",
        "keyboard": options && options.keyboard ? options.keyboard : "false",
        "show": "true"
    });
};

var closeModal = function (modalSelector, callback) {
    $(modalSelector).modal('hide');
    if (callback) {
        callback();
    }
};

function calculateAge(birthday) { // birthday is a date
    var ageDifMs = Date.now() - birthday.getTime();
    var ageDate = new Date(ageDifMs); // miliseconds from epoch
    return Math.abs(ageDate.getUTCFullYear() - 1970);    
}
(function () {
    'user strict';

    angular
        .module('app')
        //.constant('INSTANCE_URL', 'http://bitnami-dreamfactory-df88.westus.cloudapp.azure.com')
        .constant('INSTANCE_URL', 'https://api.rank-x.com')
       // .constant('APP_API_KEY', '7e9a54a80a6ae850bc38ff768d75e143e75c273d1f7e2f265648020bf8c42a3b')
       // .constant('APP_API_KEY','8b8174170d616f3adb571a0b28daf65a0cf07aa149aad9bf6554986856debdf4')
        .constant('APP_API_KEY','d85f0ae42651932fd92bb9dddfe1189c930adc3230ac4f578c4cb54073331555')
        .constant('GOOGLE_API_KEY', 'AIzaSyC2gAzj80m1XpaagvunSDPgEvOCleNNe5A')
        .constant('DEBUG_MODE', false)
        .constant('EMPTY_IMAGE','https://rank-x.com/assets/images/noimage.jpg')
        .constant('INSTAGRAM_CLIENT_ID', "c46745e083b7451a99461240e01da20b")
        .constant('SERVER_URL', "https://server.rank-x.com/")
        //.constant('SERVER_URL', "http://localhost:3000/")
        .constant('STRIPE_CLIENT_ID', "ca_AdOtLByD0cfx8W3d76nnKqLjruvHmGlh")
})();

(function () {
    'use strict';

    var app = angular.module('app');

    // Configure the states and state resolvers
    app.config(['$stateProvider', '$urlRouterProvider','$locationProvider', '$ocLazyLoadProvider',stateConfigurator]);

    function stateConfigurator($stateProvider, $urlRouterProvider,$locationProvider,$ocLazyLoadProvider) {

        var lazyDeferred;
    
        $ocLazyLoadProvider.config({
            loadedModules: ['app'],
            //asyncLoader: require
        });

        // For any unmatched url
        $urlRouterProvider.otherwise('/home');

        var states = [
            {
                name: 'layout',
                abstract: true,
                url: '',
                views: {
                    "@": {
                        templateUrl: 'app/layout/Partials/layout.html',
                        controller: 'layout as vm'
                    },
                    "navbar@layout": {
                        templateUrl: 'app/layout/Partials/navbar.html',
                        controller: 'navbar as vm'
                    }
                }
            },
            {
                name: 'cwrapper',
                parent: 'layout',
                //abstract: true,
                url: '/home', ///cwrapper',
                templateUrl: 'app/layout/Partials/cwrapper.html',
                controller: 'cwrapper as vm',
                resolve: {
                    
                    load: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            rerun: true,
                            files: ['scripts/app2.js']
                        });
                    }]
                    
                }
            },
            {
                name: 'rankSummary',
                parent: 'layout',
                url: '/rankSummary/:index',
                templateUrl: 'app/rank/Partials/RankSummary.html',
                controller: 'rankSummary as vm'
            },
            {
                name: 'editRanking',
                parent: 'layout',
                url: '/editRanking/:index',
                templateUrl: 'app/rank/Partials2/editRanking.html',
                controller: 'editRanking as vm'
            },
            {
                name: 'addAnswer',
                parent: 'layout',
                url: '/addAnswer',
                templateUrl: 'app/answer/Partials2/addAnswer.html',
                controller: 'addAnswer as vm'
            },
            {
                name: 'addEvent',
                parent: 'layout',
                url: '/addEvent',
                templateUrl: 'app/answer/Partials2/addEvent.html',
                controller: 'addEvent as vm'
            },
            {
                name: 'editAnswer',
                parent: 'layout',
                url: '/editAnswer/:index',
                templateUrl: 'app/answer/Partials2/editAnswer.html',
                controller: 'editAnswer as vm'
            },
             {
                name: 'specials',
                parent: 'layout',
                url: '/specials',
                templateUrl: 'app/customer/Partials/specials.html',
                controller: 'specials as vm'
            },
            {
                name: 'editspecial',
                parent: 'layout',
                url: '/editspecial',
                templateUrl: 'app/customer/Partials/editspecial.html',
                controller: 'editspecial as vm'
            },
            {
                name: 'addRankforAnswer',
                parent: 'layout',
                url: '/addRankforAnswer',
                templateUrl: 'app/rank/Partials2/addRankforAnswer.html',
                controller: 'addRankforAnswer as vm'               
            },
            {
                name: 'answerDetail',
                parent: 'layout',
                url: '/answerDetail/:index',
                templateUrl: 'app/answer/Partials/answerDetail.html',
                controller: 'answerDetail as vm',
            },
            {
                name: 'answerRanksManager',
                parent: 'layout',
                url: '/answerRanksManager',
                templateUrl: 'app/answer/Partials2/answerRanksManager.html',
                controller: 'answerRanksManager as vm',
            },
            {
                name: 'editvrows',
                parent: 'layout',
                url: '/editvrows',
                templateUrl: 'app/customer/Partials/editvrows.html',
                controller: 'editvrows as vm'
            },
            {
                name: 'addCustomRank',
                parent: 'layout',
                url: '/addCustomRank',
                templateUrl: 'app/rank/Partials2/addCustomRank.html',
                controller: 'addCustomRank as vm'
            },
            {
                name: 'match',
                parent: 'layout',
                url: '/match',
                templateUrl: 'app/rank/Partials2/match.html',
                controller: 'match as vm'
            },
            {
                name: 'about',
                url: '/about',
                parent: 'layout',
                templateUrl: 'app/layout/Partials2/about.html',
                controller: 'about as vm'
            },
            {
                name: 'privacypolicy',
                url: '/privacypolicy',
                parent: 'layout',
                templateUrl: 'app/layout/Partials2/privacypolicy.html',
                controller: 'privacypolicy as vm'
            },

            {
                name: 'cutomertos',
                url: '/terms-of-service/customers',
                parent: 'layout',
                templateUrl: 'app/layout/Partials2/customertos.html',
                controller: 'customertos as vm'
            },

            {
                name: 'promotertos',
                url: '/terms-of-service/promoters',
                parent: 'layout',
                templateUrl: 'app/layout/Partials2/promotertos.html',
                controller: 'promotertos as vm'
            },

          {
                name: 'mybusiness',
                url: '/mybusiness',
                parent: 'layout',
                templateUrl: 'app/layout/Partials2/mybusiness.html',
                controller: 'mybusiness as vm'
            },
          {
                name: 'promoterconsole',
                url: '/promoterconsole',
                parent: 'layout',
                templateUrl: 'app/promoters/Partials/promoterconsole.html',
                controller: 'promoterconsole as vm'
            },
            {
                name: 'promotersignup',
                url: '/promotersignup',
                parent: 'layout',
                templateUrl: 'app/promoters/Partials/promotersignup.html',
                controller: 'promotersignup as vm'
            },  
            {
                name: 'favs',
                parent: 'layout',
                url: '/favs',
                templateUrl: 'app/user/Partials/favs.html',
                controller: 'favs as vm'
            },

            {
                name: 'feeds',
                parent: 'layout',
                url: '/feeds', ///cwrapper',
                templateUrl: 'app/layout/Partials2/feeds.html',
                controller: 'feeds as vm'
            },
            {
                name: 'trends',
                parent: 'layout',
                url: '/trends', ///cwrapper',
                templateUrl: 'app/layout/Partials2/trends.html',
                controller: 'trends as vm'
            },
            {
                name: 'admin',
                url: '/admin',
                parent: 'layout',
                templateUrl: 'app/admin/Partials/admin.html',
                controller: 'admin as vm',
                resolve: {
                    
                    load: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            rerun: true,
                            files: ['scripts/admin-app.js']
                        });
                    }]
                    
                }
            }
        ];

        $(states).each(function () {

            $stateProvider.state(this);
        });

        $locationProvider.html5Mode(true);
        $locationProvider.hashPrefix('!');
        
    }
})();

(function () {
    'use strict';
    var app = angular.module('app');

    app.config(configure);

    configure.$inject = ['$httpProvider','$locationProvider', '$facebookProvider', '$sceDelegateProvider'];

    function configure($httpProvider, $locationProvide, $facebookProvider, $sceDelegateProvider) {

        // http interceptor
        // My App ID: 1494723870571848
        // Rank-X: 1102409523140826
        $httpProvider.interceptors.push('httpInterceptor');
        $facebookProvider.setAppId('1102409523140826');
        
        //SCE 
        $sceDelegateProvider.resourceUrlWhitelist([
            // Allow same origin resource loads.
            'self',
            // Allow loading from our assets domain.  Notice the difference between * and **.
            'https://api.instagram.com/**'
        ]);
    }
})();

(function () {
    'use strict';

    angular.module('app')
        .run(configureHeaders)
        .run(setAnalytics);

    configureHeaders.$inject = ['$cookies', '$http', '$rootScope', 'APP_API_KEY', '$window'];

    function configureHeaders($cookies, $http, $rootScope, APP_API_KEY, $window) {
        // Configure API Headers
        $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
        $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
        
	    var access = $window.location.hash.replace('#access_token=', '').split("&")[0];

	    if ($window.location.hash.indexOf('access_token') != -1) {
	    	console.log("opener",  $window.opener);

		    var $parentScope = $window.opener.angular.element($window.opener.document).scope(); 
		       
	        $parentScope.$broadcast("igAccessTokenObtained", 
	            { access_token: access });
		    $window.close();
	    	
        }
    }

    setAnalytics.$inject = ['$rootScope', '$location', '$window'];
    function setAnalytics($rootScope, $location, $window) {
        // initialise google analytics
        $window.ga('create', 'UA-88236718-1', 'auto');
        $window.ga('send', 'pageview');
        
        // track pageview on state change
        $rootScope.$on('$stateChangeSuccess', function (event) {
            $window.ga('send', 'pageview', $location.path());
        }); 
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('rank', rank);

    rank.$inject = ['$rootScope'];

    function rank($rootScope) {

        //Members
        $rootScope.A = [];
        var R = [];
        var GP = [];
        var A = [];
        
        var answersR = [];

        var service = {

            computeRanking: computeRanking
        };

        return service;

        function computeRanking(answers, mrecs) {

            var N = answers.length;
            var M = N*(N-1)/2;
            var L = mrecs.length;
            var ansHS = 0;
            var ansLS = 0;
            var GPtemp = 0;
            var mGP = 0; //mean of games played
                        
            //initialize 2d array
            for (var i = 0; i < N; i++) {
                R[i] = new Array(N); //Results Array
                GP[i] = new Array(N); //Games Played Array
                for (var j = 0; j < N; j++) {
                    R[i][j] = 0;
                    GP[i][j] = 0;
                }
                A[i] = answers[i].id;                
            }

            for (i = 0; i < L; i++) {

                ansHS = A.indexOf(mrecs[i].hs);
                ansLS = A.indexOf(mrecs[i].ls);
                if (ansHS >= 0 && ansLS >= 0) {
                    //console.log("HS, LS", ansHS, ansLS);
                    if (mrecs[i].sel == mrecs[i].hs) {
                        R[ansHS][ansLS]++;
                        //R[ansLS][ansHS]--;
                    }
                    else if (mrecs[i].sel == mrecs[i].ls) {
                        //R[ansHS][ansLS]--;
                        R[ansLS][ansHS]++;
                    }
                    GP[ansHS][ansLS]++;
                    GP[ansLS][ansHS]++;
                }
            }
            
            //Get average games played
            GPtemp = 0;
            for (i = 0; i < N; i++) {
                for (j = 0; j < N; j++) {
                    GPtemp = GPtemp + GP[i][j];
                }
            }
            mGP = GPtemp / (4*M); //get half of the mean of games played between each answer
            //console.log("@rank - mGP: ", mGP); 
   
            //Sum relV points for each answer
            for (i = 0; i < N; i++) {
                answers[i].Rank = 0;
                GPtemp = 0;
                for (j = 0; j < N; j++) {
                    //cummulative sum of relative vector points
                    answers[i].Rank = answers[i].Rank + R[i][j];
                    //Get total number of games played for this answer
                    GPtemp = GPtemp + GP[i][j];                                         
                }
                
                answers[i].Rank = answers[i].Rank / GPtemp;
                //if this answer has played fewer games than half the mean, multiply by reducing factor
                //TODO. Now using linear reducing factor. Later can revise for a better statistical curve.
                if (GPtemp < mGP) answers[i].Rank = answers[i].Rank * (GPtemp / mGP);
                if (isNaN(answers[i].Rank)) answers[i].Rank = 0;
            }

            //Check one by one, compare rank and relative comparison
            for (var k = 0; k < N; k++) {
                for (j = 0; j < N; j++) {
                    if (k != j) {
                        if ((answers[j].Rank >= answers[k].Rank) && (R[k][j] > R[j][k]) && (GP[k][j] >= mGP)) {
                            answers[k].Rank = answers[j].Rank + 0.01;
                        }
                    }
                }
            }

            answersR = answers;

            $rootScope.answersR = answersR;
            $rootScope.R = R;
            $rootScope.GP = GP;
            $rootScope.A = A;

        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('matchrec', matchrec);

    matchrec.$inject = ['$http', '$q', '$rootScope'];

    function matchrec($http, $q, $rootScope) {

        // Members
        var _mrecs = [];
        $rootScope.mrecs = _mrecs;
        var json_schema = [];
        var baseURI = '/api/v2/mysql/_table/matchtable';

        var service = {
            GetMatchTable: GetMatchTable,
            GetMatchTableX: GetMatchTableX,
            postRec: postRec,
            deleteRecordsbyAnswer: deleteRecordsbyAnswer,
            deleteRecordsbyCatans: deleteRecordsbyCatans
            //    addTable: addTable
        };

        return service;

        function postRec(data) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            obj.resource.push(data);
            
            //update local copy
            // _mrecs.push(data);
            _mrecs.push.apply(_mrecs, data);
            //update local copy of mrecs by user
            //$rootScope.cmrecs_user.push(data);
            //$rootScope.cmrecs_user.push.apply($rootScope.cmrecs_user, data);  
            
            var url = baseURI;

            return $http.post(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("creating match record was succesful");
                return result.data;
            }
        }

        function GetMatchTable(forceRefresh) {

            if (_areMatchRecsLoaded() && !forceRefresh) {
                return $q.when(_mrecs);
            }
            
            //Get all match records
            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var data = result.data.resource;
                _load (data);

                return _mrecs;
            }
        }

        function GetMatchTableX(data) {

            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'category=' + data[i].category+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            //Get all match records
            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var _mrecsx = result.data.resource;
                var map = _mrecs.map(function(x) {return x.id; });
                _mrecsx.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _mrecs.push(obj);
                });

                if ($rootScope.DEBUG_MODE) console.log("mrecsX data loaded");
                //$rootScope.mrecs = result.data.resource; 
                return _mrecsx;
            }
        }

        function deleteRecordsbyAnswer(answer_id) {
           
            //Delete all match records that correspond to this answer
            
            //delete records from local copy
            for (var i=0; i<_mrecs.length;i++){
                if (_mrecs[i].ls == answer_id || _mrecs[i].hs == answer_id){
                    _mrecs.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=(ls=' + answer_id+') OR (hs=' + answer_id+')'; 
           return $http.delete(url).then(querySuccess, _queryFailed);
           
           function querySuccess(result){
               if ($rootScope.DEBUG_MODE) console.log("deleting match records succesful");
               return;
           }
            
            //TODO: Unable to filter by both ls and hs in a single query. Now using two queries.
            /*
            var url = baseURI + '/_table/matchtable?filter=ls=' + answer_id;
            return $http.delete(url).then(deleteLSRecsSucceeded, _queryFailed);

            function deleteLSRecsSucceeded(result) {
                url = baseURI + '/_table/matchtable?filter=hs=' + answer_id;
                return $http.delete(url).then(deleteHSRecsSucceeded, _queryFailed);
                function deleteHSRecsSucceeded(result) {
                    console.log("deleting records succesful");
                    return;
                }
            }
            */
        }
        
        function deleteRecordsbyCatans(category_id, answer_id) {
           
            //Delete all match records that correspond to this answer
            
            //delete records from local copy
            for (var i=0; i<_mrecs.length;i++){
                if (_mrecs[i].ls == answer_id || _mrecs[i].hs == answer_id){
                    _mrecs.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=(category=' + category_id+') AND (hs=' + answer_id+')'; 
           $http.delete(url).then(querySuccess1, _queryFailed);
           
           var url2 = baseURI + '?filter=(category=' + category_id+') AND (ls=' + answer_id+')'; 
           $http.delete(url2).then(querySuccess2, _queryFailed);
           
           return;
           
           function querySuccess1(result){
               console.log("deleting match records category-hs pair succesful");
               return;
           }
           function querySuccess2(result){
               if ($rootScope.DEBUG_MODE) console.log("deleting match records category-ls pair succesful");
               return;
           } 
        }
        
        function _load(data){
            _mrecs.length = 0;
            data.forEach(function(x){
                _mrecs.push(x);
            });
        }

        function _queryFailed(error) {

            throw error;
        }

        function _areMatchRecsLoaded() {

            return _mrecs.length > 0;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('rankSummary', rankSummary);

    rankSummary.$inject = ['dialog', '$stateParams', '$state', 'catans', 'datetime', 'color','locations'
        , 'answer', 'rank', '$filter', 'table', 'vrowvotes', '$window', 'vrows', '$scope','$http'
        , '$rootScope', '$modal', 'editvote', 'votes', 'commentops','flag','Socialshare', 'SERVER_URL',
        '$location', '$q', 'fbusers', '$timeout','table2','categories','dataloader','common'];

    function rankSummary(dialog, $stateParams, $state, catans, datetime, color, locations
        , answer, rank, $filter, table, vrowvotes, $window, vrows, $scope, $http
        , $rootScope, $modal, editvote, votes, commentops, flag, Socialshare, SERVER_URL, 
        $location, $q, fbusers, $timeout, table2, categories, dataloader, common) {
        /* jshint validthis:true */

        var vm = this;
        vm.title = 'rankSummary';
        vm.addAnswerDisabled = '';
        vm.mode = "endorse";
        //if ($location.absUrl().indexOf('code=')>-1)$window.location.search = '';
        
        // Methods
        vm.answerDetail = answerDetail;
        vm.addAnswer = addAnswer;
        vm.goRank = goRank;
        vm.closeRank = closeRank;
        vm.rankOverall = rankOverall;
        vm.rankPersonal = rankPersonal;
        vm.closeAddInfoMsg = closeAddInfoMsg;
        vm.whyNoDistance = whyNoDistance;
        vm.sortByRank = sortByRank;
        vm.sortByDistance = sortByDistance;
        vm.sortByUpV = sortByUpV;
        vm.sortByDate = sortByDate;
        vm.sortByTrending = sortByTrending;
        vm.loadComments = loadComments;
        vm.postComment = postComment;
        vm.cmFlag = cmFlag;
        vm.share = share;
        vm.changeMode =  changeMode;
        vm.UpVote = UpVote;
        vm.DownVote = DownVote;
        vm.sortbyHelpDialog = sortbyHelpDialog;
        vm.backToResults = backToResults;
        vm.seeMore = seeMore;
        vm.showAllFriendsList = showAllFriendsList;
        vm.getResults = getResults;
        vm.clearSearch = clearSearch;
        
        vm.gotoParentRank = gotoParentRank;
        
        vm.selOverall = 'active';
        vm.selPersonal = '';
        vm.selRank = 'active';
        vm.selDistance = '';
        vm.commLoaded = false;
        vm.userIsOwner = false;
        vm.dataReady = false;
        vm.hasAnswerParent = false;
        vm.isCustomRank = false;
        vm.user = $rootScope.user;
        vm.loadingAnswers = false;
        vm.sortByName = '';
        vm.searchActive = $rootScope.searchActive;
        vm.limit = 20;
        
        //For readability
        var answers = [];
        var catansrecs = [];
        //var useractivities = [];
        var mrecs = [];
        var catArr = [];
        var nhObj = {};

        var answersFull = false;
        var updateExec = false;
        vm.foodNearMe = false;
        var foodNearMe = false;
        var rankIsNearMe = false;
        vm.fnm = false;
        
        //Comments related variables
        var cObj = {};
        cObj.commLoaded = false;
        cObj.initials = '';
        cObj.bc = '';
        cObj.fc = '';
        cObj.comments = [];
        cObj.newComment = '';
        vm.cm = cObj;

        vm.isLoggedIn = $rootScope.isLoggedIn == undefined ? false : $rootScope.isLoggedIn;

        $rootScope.userHasRank = false;
        $rootScope.userActRecId = 0;

        var canswers = [];
        vm.hideInfoBox = false;
        if ($rootScope.addInfoMsgAck) vm.addInfoMsgAck = $rootScope.addInfoMsgAck;
        else (vm.addInfoMsgAck = false);
        
        var updateVoteTableListener = $rootScope.$on('updateVoteTable', function () {
            if (!updateExec) updateVoteTable();
            updateExec = true;
        });
        var rankDataLoadedListener = $rootScope.$on('rankDataLoaded', function () {
            if (vm.dataReady == false) checkRankIsLoaded();
        });
        var coordsRdyRankListener = $rootScope.$on('coordsRdy', function () {
            if ($rootScope.DEBUG_MODE) console.log("received coordsreadyrank");
            //loadData();
            //$scope.$apply(function(){
                vm.haveLocation = true;
                getDistances();
                sortByDistance();
                //console.log('scope.$digest() - ', $scope.$digest());
                //if (!scope.$digest()) 
                $timeout(function(){
                    $scope.$apply();
                });                 
            //});
        });
                               
        var stateChangeListener = $rootScope.$on('$stateChangeStart',
            function (ev, to, toParams, from, fromParams) {
                if (from.name == 'rankSummary' && to.name != 'rankSummary') {
                     if ($rootScope.isLoggedIn) updateRecords();
                }
            });
        
        $scope.$on('$destroy', stateChangeListener);
        $scope.$on('$destroy',updateVoteTableListener);
        $scope.$on('$destroy',rankDataLoadedListener);
        $scope.$on('$destroy',coordsRdyRankListener);

        vm.isMobile = false; 
        // device detection
        if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) 
            vm.isMobile = true;
        
        //Adjust picture size for very small displays
        if ($window.innerWidth < 512) { vm.sm = true; vm.nsm = false; }
        else { vm.sm = false; vm.nsm = true; }

        //Blur main input field -- This was done to prevent keyboard from popping out constantly in
        //Safari browsers
        if (document.getElementById("SearchInput") != null && document.getElementById("SearchInput") != undefined) {
            document.getElementById("SearchInput").blur();
        }
        
        window.prerenderReady = false;

        if ($rootScope.DEBUG_MODE) console.log("$rootScope.rankSummaryDataLoaded - ", $rootScope.rankSummaryDataLoaded);
        if ($rootScope.DEBUG_MODE) console.log("$rootScope.isCustomRank - ", $rootScope.isCustomRank);
        if ($rootScope.DEBUG_MODE) console.log("$stateParams.index - ", $stateParams.index);
        if ($rootScope.DEBUG_MODE) console.log("$rootScope.cCategory - ", $rootScope.cCategory.id, $rootScope.cCategory.cat);

        //if ($rootScope.landRanking != true ) 
        checkRankIsLoaded();
        
        //verify that rank exists in database
        function checkRankIsLoaded(){
            $rootScope.cCategory = null;
            var rankid = common.getIndexFromSlug($stateParams.index);
            var idx = 0;
            
            if ($rootScope.isCustomRank){
                idx = $rootScope.customranks.map(function(x) {return x.id; }).indexOf(Number(rankid));
                if (idx > -1) $rootScope.cCategory = $rootScope.customranks[idx];
            }                                
            else{    
                idx = $rootScope.content.map(function(x) {return x.id; }).indexOf(Number(rankid));
                if (idx > -1) $rootScope.cCategory = $rootScope.content[idx];
            }
            
            //if rank exists continue loading controller, else get from database
            if ($rootScope.cCategory != null) prepareRankSummary();
            else dataloader.getRank($stateParams.index);
        }

        function prepareRankSummary() {
            vm.dataReady = true;
            vm.ranking = $rootScope.cCategory.title;
            //if ($rootScope.rankIsNearMe) vm.ranking = vm.ranking.replace('in San Diego', 'close to me');

            if ($rootScope.cCategory.id == 11942) {
                vm.foodNearMe = true;
                foodNearMe = true;
                vm.fnm = true;
                vm.showR = false;
                if ($rootScope.coordsRdy == undefined || $rootScope.coordsRdy == false) {
                    sortByDistance();
                }
            }

            vm.loadingAnswers = true;
            $timeout(function () {
                if (!foodNearMe) activate();
                else if ($rootScope.coordsRdy) activate();
                vm.loadingAnswers = false;
            });
        }

        function activate() {

            answers = $rootScope.answers;
            catansrecs = $rootScope.catansrecs;
            //useractivities = $rootScope.alluseractivity;
            mrecs = $rootScope.mrecs;

            $rootScope.inFavMode = false;
            if ($rootScope.rankIsNearMe == undefined) rankIsNearMe = false;
            else rankIsNearMe = $rootScope.rankIsNearMe;
            
            $window.scrollTo(0, 0);
            $rootScope.$emit('showLogo');

            $rootScope.rankIsActive = true;
            $rootScope.objNumAct = $rootScope.objNum;

            loadData(); //load data and write to $rootScope
            if (!foodNearMe){
                loadTrendVotes(0);
                if ($rootScope.isLoggedIn && $rootScope.friends_votes) loadFriendsEndorsements(0);
            }

            checkUserCredentials();

            //-----SEO tags ----
            $scope.$parent.$parent.$parent.seo = { 
                pageTitle : $rootScope.cCategory.title, 
                metaDescription: $rootScope.cCategory.question,
            };
            
            //Check if there are no answers
            if (vm.answers.length == 0) vm.noAnswers = true;
            else vm.noAnswers = false;

            getUserData(); //if user is logged in, get user data (vote record, etc)

            if ($rootScope.cvotes) getAnswerVotes();
            else {
                $rootScope.cvotes = [];
                $rootScope.ceditvotes = [];
            }
            createAnswerStatus(); //enables/disables 'Create Answer' button
            
            //Sort first by upV, then execute ranking algorithm
            sortByUpV();
            rank.computeRanking($rootScope.canswers, $rootScope.cmrecs);
            
            //Sort by rank here (this is to grab images of top 3 results)
            if ($rootScope.cmrecs.length > 0) sortByRank();
                       
            //Instead of rank points just show index in array
            for (var i = 0; i < vm.answers.length; i++) {
                vm.answers[i].Rank = i + 1;
            }
            
            //Determine number of user comments
            if ($rootScope.cCategory.numcom == undefined) vm.numcom = 0;
            else vm.numcom = $rootScope.cCategory.numcom;
            
            //Check and update if necessary ranking and Num of items per rank, only for atomic ranks
            //if ($rootScope.cCategory.isatomic == true && !foodNearMe) {
            if (!foodNearMe) {    
                for (var i = 0; i < vm.answers.length; i++) {
                    //console.log("vm.answers[i].Rank, vm.answers[i].catansrank -", vm.answers[i].Rank, vm.answers[i].catansrank);
                    if (vm.answers[i].Rank != vm.answers[i].catansrank) {
                        //console.log("Updated Catans Rank", vm.answers[i].catans);
                        if (vm.answers[i].catans != undefined) {
                            if ($rootScope.DEBUG_MODE) console.log("RS-1");
                            //if rankings is different than on record update catans record
                            if (vm.answers[i].catansrank != vm.answers[i].Rank) 
                                catans.updateRec(vm.answers[i].catans, ['rank'], [vm.answers[i].Rank]);
                        }
                    }
                }
            }                        
            
            //Check number of answers for this ranking
            /*
            if (vm.answers.length == 0) {
                vm.numAns = 0;

                if (!foodNearMe && !$rootScope.cCategory.isGhost) {
                    if (!$rootScope.isCustomRank)
                    table.update($rootScope.cCategory.id,
                        ['answers','image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,'','','']);
                    else
                    table2.update($rootScope.cCategory.id,
                        ['answers','image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,'','','']);
                }
            }*/
            if (vm.answers.length == 1) {
                vm.numAns = 1;
                if ($rootScope.cCategory.type == 'Short-Phrase') {
                    vm.isShortPhrase = true;
                    vm.title1 = vm.answers[0].name;
                    vm.addinfo1 = vm.answers[0].addinfo;
                    vm.image1 = vm.title1 + '##' + vm.addinfo1;
                    if ($rootScope.cCategory.fimage != null && $rootScope.cCategory.fimage != undefined 
                     && $rootScope.cCategory.fimage != ''){
                         vm.hasfimage = true;
                         vm.fimage = $rootScope.cCategory.fimage;
                     }
                     else vm.hasfimage = false;
                }
                else {
                    vm.isShortPhrase = false;
                    if (vm.answers[0].imageurl != undefined && vm.answers[0].imageurl != null && vm.answers[0].imageurl != '') {
                        vm.image1 = vm.answers[0].imageurl;
                        vm.image1ok = true;
                    }
                    else vm.image1ok = false;
                }
                if (!foodNearMe && !$rootScope.cCategory.isGhost) {
                    if (!$rootScope.isCustomRank)
                    table.update($rootScope.cCategory.id,
                        ['answers', 'image1url','image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1,'','']);
                    else
                    table2.update($rootScope.cCategory.id,
                        ['answers', 'image1url','image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1,'','']);
                }
            }
            if (vm.answers.length == 2) {
                vm.numAns = 2;
                if ($rootScope.cCategory.type == 'Short-Phrase') {
                    vm.isShortPhrase = true;
                    vm.title1 = vm.answers[0].name;
                    vm.addinfo1 = vm.answers[0].addinfo;
                    vm.image1 = vm.title1 + '##' + vm.addinfo1;
                    vm.title2 = vm.answers[1].name;
                    vm.addinfo2 = vm.answers[1].addinfo;
                    vm.image2 = vm.title2 + '##' + vm.addinfo2;
                    if ($rootScope.cCategory.fimage != null && $rootScope.cCategory.fimage != undefined 
                     && $rootScope.cCategory.fimage != ''){
                         vm.hasfimage = true;
                         vm.fimage = $rootScope.cCategory.fimage;
                     }
                     else vm.hasfimage = false;

                }
                else {
                    vm.isShortPhrase = false;
                    if (vm.answers[0].imageurl != undefined && vm.answers[0].imageurl != null && vm.answers[0].imageurl != '') {
                        vm.image1 = vm.answers[0].imageurl;
                        vm.image1ok = true;
                    }
                    else vm.image1ok = false;
                    if (vm.answers[1].imageurl != undefined && vm.answers[1].imageurl != null && vm.answers[1].imageurl != '') {
                        vm.image2 = vm.answers[1].imageurl;
                        vm.image2ok = true;
                    }
                    else vm.image2ok = false;
                }
                if (!foodNearMe && !$rootScope.cCategory.isGhost) {
                    if (!$rootScope.isCustomRank)
                    table.update($rootScope.cCategory.id,
                        ['answers', 'image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1, vm.image2,'']);
                    else
                    table2.update($rootScope.cCategory.id,
                        ['answers', 'image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1, vm.image2,'']);
                }
            }

            if (vm.answers.length > 2) {
                vm.numAns = 3;
                if ($rootScope.cCategory.type == 'Short-Phrase') {
                    vm.isShortPhrase = true;
                    vm.title1 = vm.answers[0].name;
                    vm.addinfo1 = vm.answers[0].addinfo;
                    vm.image1 = vm.title1 + '##' + vm.addinfo1;
                    vm.title2 = vm.answers[1].name;
                    vm.addinfo2 = vm.answers[1].addinfo;
                    vm.image2 = vm.title2 + '##' + vm.addinfo2;
                    vm.title3 = vm.answers[2].name;
                    vm.addinfo3 = vm.answers[2].addinfo;
                    vm.image3 = vm.title3 + '##' + vm.addinfo3;
                    if ($rootScope.cCategory.fimage != null && $rootScope.cCategory.fimage != undefined 
                     && $rootScope.cCategory.fimage != ''){
                         vm.hasfimage = true;
                         vm.fimage = $rootScope.cCategory.fimage;
                     }
                     else vm.hasfimage = false;
                    
                }
                else {
                    vm.isShortPhrase = false;
                    //Set Images, initialize values
                    vm.image1 = $rootScope.EMPTY_IMAGE;
                    vm.image2 = $rootScope.EMPTY_IMAGE;
                    vm.image3 = $rootScope.EMPTY_IMAGE;
                    vm.image1ok = true;
                    vm.image2ok = true;
                    vm.image3ok = true;
                    //Load rank images with top 3 results with good images
                    var img = 1;
                    for (var n=0; n < vm.answers.length; n++){

                        if (vm.answers[n].imageurl != undefined && vm.answers[n].imageurl != null 
                            && vm.answers[n].imageurl != '' && vm.answers[n].imageurl != $rootScope.EMPTY_IMAGE) {
                            
                            if (img == 3) { vm.image3 = vm.answers[n].imageurl; break; }
                            if (img == 2) { vm.image2 = vm.answers[n].imageurl; img++ }
                            if (img == 1) { vm.image1 = vm.answers[n].imageurl; img++ }                         
                        
                        //vm.image1ok = true;
                        }
                    }                    
                }
                if (!foodNearMe && !$rootScope.cCategory.isGhost) {
                    if (!$rootScope.isCustomRank)
                    table.update($rootScope.cCategory.id,
                        ['answers', 'image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1, vm.image2, vm.image3]);
                    else
                    table2.update($rootScope.cCategory.id,
                        ['answers', 'image1url', 'image2url', 'image3url'],
                        [$rootScope.canswers.length,
                            vm.image1, vm.image2,'']);
                }
            }

            //Set Feautured Image
            if ($rootScope.cCategory.fimage != undefined && $rootScope.cCategory.fimage != ''){
                if ($rootScope.cCategory.fimage != vm.image1){
                    vm.image3 = vm.image2;
                    vm.image2 = vm.image1;
                    vm.image1 = $rootScope.cCategory.fimage;
                }
            }
            /*//if category doesnt have image set, set to image1;
            if ($rootScope.cCategory.fimage == undefined || $rootScope.cCategory.fimage == ''){
                if ($rootScope.cCategory.type != 'Short-Phrase'){
                    categories.update($rootScope.cCategory.cat,['fimage'],[vm.image1]);
                }
            }*/

            //Set bgbox color specs
            if ($rootScope.cCategory.bc != undefined && $rootScope.cCategory.bc != ''){
                vm.bc = $rootScope.cCategory.bc;
                vm.fc = $rootScope.cCategory.fc;
                vm.shade = $rootScope.cCategory.shade;              
            }
            else{
                //Set colors for title hideInfoBox
                var colors = color.defaultRankColor($rootScope.cCategory);
                vm.bc = colors[0];
                vm.fc = colors[1];
                vm.shade = -4;
            } 
            
            //Sorting rules
            if ($rootScope.DEBUG_MODE) console.log("foodNearMe, ",foodNearMe);
            if ($rootScope.DEBUG_MODE) console.log("rankIsNearMe, ",rankIsNearMe);

            if (foodNearMe || rankIsNearMe) sortByDistance();
            if (vm.isE) sortByDate();
            if (foodNearMe) vm.showR = false;
            if (!foodNearMe && !vm.isE) vm.showR = true || (!vm.sm);

            //TODO update answers in DB
            $rootScope.modeIsImage = true;
            
            if (!$rootScope.isCustomRank && !$rootScope.cCategory.isGhost) incViews(); //increment number of views
            
            if ($rootScope.DEBUG_MODE) console.log("Rank Summary Loaded!");
            
            window.prerenderReady = true;
            $rootScope.isCustomRank = false; 
        }

        function getRankAnswers() {
            $rootScope.canswers4rank = [];
            //get answers that current user has voted Up
            //if ($rootScope.cCategory == 'Establishment') {
            if (true) {
                for (var i = 0; i < $rootScope.cvotes.length; i++) {
                    if ($rootScope.cvotes[i].vote == 1) {
                        for (var k = 0; k < $rootScope.canswers.length; k++) {
                            if ($rootScope.cvotes[i].answer == $rootScope.canswers[k].id) {
                                //Check vote correspond to this category
                                var idx = $rootScope.catansrecs.map(function(x) {return x.id; }).indexOf($rootScope.cvotes[i].catans);
                                if (idx > -1) {
                                    if ($rootScope.catansrecs[idx].category == $rootScope.cCategory.id) {
                                        $rootScope.canswers4rank.push($rootScope.canswers[k]);
                                    }
                                }
                                //break;
                            }
                        }
                    }
                }
            }

            else {
                $rootScope.canswers4rank = $rootScope.canswers;
            }

            if ($rootScope.canswers4rank.length > 0) vm.commentAllowed = true;
            else vm.commentAllowed = false;

            updateStatusRankButton();
            
            //console.log("$rootScope.canswers4rank - ", $rootScope.canswers4rank);
        }

        function updateStatusRankButton(){
            if ($rootScope.canswers4rank.length > 1) vm.rankDisabled = '';
            else vm.rankDisabled = 'disabled';
        }

        function updateVoteTable() {
            //load content of vote table filtered by user
            votes.loadVotesByUser().then(function (votetable) {
                $rootScope.cvotes = votetable;
                getRankAnswers();
            });
        }

        function getUserData() {

            $rootScope.canswers4rank = [];

            if ($rootScope.isLoggedIn) {

                updateVoteTable();                
                
                //Load edit votes for answers in this category
                for (var i = 0; i < $rootScope.editvotes.length; i++) {
                    if ($rootScope.editvotes[i].category == $rootScope.cCategory.id) {
                        var editvoteitem = $rootScope.editvotes[i];
                        $rootScope.ceditvotes.push(editvoteitem);
                    }
                }
                
                //All mrecs for this categroy from this user
                $rootScope.cmrecs_user = [];
                for (var i = 0; i < $rootScope.cmrecs.length; i++) {
                    if ($rootScope.cmrecs[i].user == $rootScope.user.id) {
                        $rootScope.cmrecs_user.push($rootScope.cmrecs[i]);
                    }
                }
            }
            else return;
        }

        function answerDetail(x) {
            //if rank is Custom Rank and has Owner, clear $rootScope.cCategory
            //to avoid showing wrong navigation bar
            if (vm.rankOwner){
                if (x.slug == vm.rankOwner.slug) $rootScope.cCategory = $rootScope.oCategory;
            }
            $state.go("answerDetail", { index: x.slug });
        }

        function goRank() {
            if ($rootScope.isLoggedIn) {
                if ($rootScope.canswers4rank.length > 1) {
                    $state.go("match");
                }
                else {
                    dialog.getDialog('answersFew');
                    return;
                }
            }
            else {
                dialog.getDialog('notLoggedIn');
            }
        }

        function addAnswer() {
            if ($rootScope.isLoggedIn && $rootScope.cCategory != undefined) {
                if (answersFull) {
                    dialog.getDialog('answersFull');
                    return;
                }
                else {

                    if($rootScope.cCategory.isGhost) {

                        var item = {
                            title: $rootScope.cCategory.title,
                            type: $rootScope.cCategory.type,
                            tags: $rootScope.cCategory.tags,
                            keywords: $rootScope.cCategory.keywords,
                            question: $rootScope.cCategory.question,
                            fimage: $rootScope.cCategory.fimage,
                            bc: $rootScope.cCategory.bc,
                            fc: $rootScope.cCategory.fc,
                            shade: $rootScope.cCategory.shade,
                            introtext: $rootScope.cCategory.introtext,
                            user: $rootScope.cCategory.user ,

                            views: 0,
                            answers: 0,
                            image1url: $rootScope.EMPTY_IMAGE,
                            image2url: $rootScope.EMPTY_IMAGE,
                            image3url: $rootScope.EMPTY_IMAGE,
                            answertags: '',
                            isatomic: 1, //TODO decide isatomic, numcom, ismp, owner, 
                            timestmp: new Date(),
                            cat: $rootScope.cCategory.cat,
                            nh: $rootScope.cCategory.nh,
                        };
                        table.addTable(item).then(function(result){
                            if ($rootScope.DEBUG_MODE) console.log("table added --- ", result);
                            var rankid = result.resource[0].id;
                            //Create and update slug
                            var slug = item.title.toLowerCase();; 
                            slug = slug.replace(/ /g,'-');
                            slug = slug.replace('/','at');
                            slug = slug + '-' + rankid;
                            table.update(rankid,['slug'],[slug]);

                            
                            if (vm.type == 'Event') {
                                $rootScope.eventmode = 'add';
                                $state.go("addEvent");
                            }
                            else $state.go("addAnswer");
                        });
                    }
                    else{
                        if (vm.type == 'Event') {
                            $rootScope.eventmode = 'add';
                            $state.go("addEvent");
                        }
                        else $state.go("addAnswer");
                    }
                }
            }
            else {
                //dialog.getDialog('notLoggedIn');
                dialog.loginFacebook();
                return;
            }
        }

        function loadData() {

            //If introtext exist load it, if not, create custom intro text
            if ($rootScope.cCategory.introtext) {
                var start = $rootScope.cCategory.introtext.indexOf('++');
                var end = $rootScope.cCategory.introtext.indexOf('--');
                if (start > -1 && end > -1) vm.introtext = $rootScope.cCategory.introtext.substring(start+2,end);
                else vm.introtext = $rootScope.cCategory.introtext;
            }
            else vm.introtext = 'This is the rank for ' + $rootScope.cCategory.title + '. '+
            ' Help shape the ranking by endorsing your favorites!.';
              
            if ($rootScope.cCategory.owner != 0 && $rootScope.cCategory.owner != undefined){
                vm.isCustomRank = true;
                //if custom rank is demo go to original answer, else get refernce from owner
                if ($rootScope.cCategory.id == 11091 || 
                    $rootScope.cCategory.id == 11092 ||
                    $rootScope.cCategory.id == 11093) vm.rankOwner = $rootScope.oAnswer;
                else{
                    var idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf(Number($rootScope.cCategory.owner));
                    vm.rankOwner = $rootScope.answers[idx];
                } 
            }
            
            var fidx = 0;
            switch ($rootScope.cCategory.type) {
                case "Place": { fidx = 0; break; }
                case "Person": { fidx = 1; break; }
                case "Event": { fidx = 2; break; }
                case "Organization": { fidx = 3; break; }
                case "Short-Phrase": { fidx = 4; break; }
                case "Activity": { fidx = 5; break; }
                case "Establishment": { fidx = 6; break; }
                case "Thing": { fidx = 7; break; }
                case "PersonCust": { fidx = 8; break; }
                case "Simple": { fidx = 9; break; }
            }

            var fields = $rootScope.typeSchema[fidx].fields;
            $rootScope.fields = fields;
            vm.fields = $rootScope.fields;
            vm.type = $rootScope.cCategory.type;

            if (vm.type == 'Event') vm.isE = true;
            else vm.isE = false;

            $rootScope.NhImplied = false;
            $rootScope.NhValue = '';
            if ($rootScope.cCategory.type == 'Establishment' ||
            $rootScope.cCategory.type == 'Place' ||
            $rootScope.cCategory.type == 'Event') {
                //Determine if title already contains neighboorhood
                if ($rootScope.nhs != undefined) {
                    var nhs = $rootScope.nhs;
                    for (var i = 0; i < nhs.length; i++) {
                        if ($rootScope.cCategory.title.indexOf(nhs[i]) > -1) {
                            $rootScope.NhImplied = true;
                            $rootScope.NhValue = nhs[i];
                            break;
                        }
                    }
                }
            }
            //if neighborhood is implied or screen is small dont show column
            //if ($rootScope.NhImplied || vm.sm){
            if (vm.sm) {
                for (var i = 0; i < vm.fields.length; i++) {
                    if (vm.fields[i].name == 'cityarea') {
                        vm.fields[i].isrequired = false;
                        //break;
                    }
                    if (vm.fields[i].name == 'upV') {
                        vm.fields[i].isrequired = false;
                        //break;
                    }
                    if (vm.fields[i].name == 'email') {
                        vm.fields[i].isrequired = false;
                        //break;
                    }
                }
            }

            //Create button to link to parent rank if rank is atomic for better navigation
            if ($rootScope.cCategory.isatomic && $rootScope.NhImplied && $rootScope.NhValue != 'San Diego'){
                var ss = $rootScope.cCategory.title.replace($rootScope.NhValue,'San Diego');
                for (var n=0; n<$rootScope.content.length; n++){
                    if ($rootScope.content[n].title == ss){
                        vm.hasParent = true;
                        vm.parentRank = $rootScope.content[n];
                        dataloader.pulldata('ranks',[vm.parentRank]);
                    }
                }
            }
            
            //Load current answers
            //$rootScope.answers = answers;
            $rootScope.canswers = [];
            var fanswers = [];
            $rootScope.ccatans = [];
            $rootScope.B = [];
            var eventObj = {};
            var obj = {};
            var eventIsCurrent = true;
            
            //Rank is 'Food Near Me' - first time only
            if (foodNearMe && $rootScope.fanswers == undefined) {
                    var answerid = 0;
                    var idx = 0;
                    var isDup = false;
                    var ansObj = {};
                    
                    var ansArr = $rootScope.foodans.cats.split(':').map(Number);

                    for (var j = 0; j < ansArr.length; j++) {
                        idx = $rootScope.answers.map(function (x) { return x.id; }).indexOf(ansArr[j]);
                        if ($rootScope.answers[idx]) {
                            //only add if its not already added
                            isDup = false;
                            if (fanswers.length > 0 && idx > 0) {
                                for (var n = 0; n < fanswers.length; n++) {
                                    if (fanswers[n].id == $rootScope.answers[idx].id) {
                                        isDup = true;
                                        //nidx = n;
                                        break;
                                    }
                                }
                            }
                            //if not duplicated, add to answer array. upV is init to first catans record
                            if (!isDup) {
                                ansObj = $rootScope.answers[idx];
                                //We have user coordinates, so we check that both lat and lng are within approx a mile
                                //1 degree ~ 69 miles, so 1 miles ~ 0.0145 degrees
                                if (Math.abs($rootScope.currentUserLatitude - $rootScope.answers[idx].lat) < 0.0145 &&
                                    Math.abs($rootScope.currentUserLongitude - $rootScope.answers[idx].lng) < 0.0145)
                                    fanswers.push(ansObj);
                            }
                        }
                    }
                
                $rootScope.canswers = fanswers;
                $rootScope.fanswers = fanswers;
            }
            //all other ranks
            if (!foodNearMe) {
                
                for (var i = 0; i < catansrecs.length; i++) {
                           //Puts numbers into array. Pretty sweet!
                        if ($rootScope.cCategory.catstr) catArr = $rootScope.cCategory.catstr.split(':').map(Number);
                        else catArr = [$rootScope.cCategory.id];

                        for (var n = 0; n < catArr.length; n++) {
                            if (catansrecs[i].category == catArr[n]) {
                                for (var k = 0; k < answers.length; k++) {
                                    if (catansrecs[i].answer == answers[k].id && catansrecs[i].isdup != true) {
                                        obj = {};
                                        obj = answers[k];
                                        obj.catans = catansrecs[i].id;
                                        obj.catansrank = catansrecs[i].rank;
                                        obj.upV = catansrecs[i].upV;

                                        obj.upV = catansrecs[i].upV;
                                        obj.downV = catansrecs[i].downV;
                                        obj.catans = catansrecs[i].id;
                                        obj.rank = catansrecs[i].rank;
                                        obj.uservote = {};
                                        obj.upVi = catansrecs[i].upV;
                                        obj.downVi = catansrecs[i].downV;

                                        displayVote(obj);

                                        if (vm.type == 'Event') {

                                            eventObj = JSON.parse(answers[k].eventstr);
                                            if (eventObj) {
                                                mergeObject(answers[k], eventObj);

                                                //To determine if event is current look at end date if exist if not use start date
                                                //if (eventObj.edate != undefined && eventObj.edate != '') obj.date = answers[k].edate.slice(4);
                                                //else obj.date = answers[k].sdate.slice(4);
                                                eventIsCurrent = datetime.eventIsCurrent(obj, answers[k]);

                                                if (eventIsCurrent) {
                                                    $rootScope.canswers.push(obj);
                                                    $rootScope.ccatans.push(catansrecs[i]);
                                                    break;
                                                }
                                                else break;
                                            }
                                        }
                                        else {
                                            if (($rootScope.isCustomRank && obj.isprivate) ||
                                                (!$rootScope.isCustomRank && !obj.isprivate )) {
                                                $rootScope.canswers.push(obj);
                                                $rootScope.ccatans.push(catansrecs[i]);
                                                break;
                                            }
                                        }

                                    }
                                }
                            }
                      //  }                                     
                    }

                }
            }
            //if already loaded all near by places
            if (foodNearMe && $rootScope.fanswers) {
                $rootScope.canswers = $rootScope.fanswers;
            }
            vm.answers = $rootScope.canswers;
            getFilterOptions();
            
            if (vm.answers.length > vm.limit) vm.thereIsMore = true;
            else vm.thereIsMore = false;
            dataloader.pulldata('answers',$rootScope.canswers);
            
            if ($rootScope.currentUserLatitude && $rootScope.currentUserLongitude) {
                vm.haveLocation = true;
                getDistances();
            }
            else vm.haveLocation = false;
            
            //Specials
            var cdate = new Date();
            var dayOfWeek = cdate.getDay();
            var isToday = false;

            for (var j = 0; j < vm.answers.length; j++) {
                isToday = false;
                for (var i = 0; i < $rootScope.specials.length; i++) {
                    if (vm.answers[j].id == $rootScope.specials[i].answer) {
                        if ($rootScope.specials[i].freq == 'weekly') {
                            if (dayOfWeek == 0 && $rootScope.specials[i].sun) isToday = true;
                            if (dayOfWeek == 1 && $rootScope.specials[i].mon) isToday = true;
                            if (dayOfWeek == 2 && $rootScope.specials[i].tue) isToday = true;
                            if (dayOfWeek == 3 && $rootScope.specials[i].wed) isToday = true;
                            if (dayOfWeek == 4 && $rootScope.specials[i].thu) isToday = true;
                            if (dayOfWeek == 5 && $rootScope.specials[i].fri) isToday = true;
                            if (dayOfWeek == 6 && $rootScope.specials[i].sat) isToday = true;
                            if (isToday) {
                                vm.answers[j].sp_bc = $rootScope.specials[i].bc;
                                vm.answers[j].sp_fc = $rootScope.specials[i].fc;
                                vm.answers[j].sp_title = $rootScope.specials[i].stitle;
                                break;
                            }
                        }
                        if ($rootScope.specials[i].freq == 'onetime') {
                            if(moment().isBetween(moment($rootScope.specials[i].sdate), moment($rootScope.specials[i].edate), 'day', '[]')) {
                                vm.answers[j].sp_bc = $rootScope.specials[i].bc;
                                vm.answers[j].sp_fc = $rootScope.specials[i].fc;
                                vm.answers[j].sp_title = $rootScope.specials[i].stitle;
                                break;
                            }
                        }
                    }
                }
                /*
                if (!isToday){
                    vm.answers.sp_bc = 'auto';
                    vm.answers.sp_fc = 'auto';
                    vm.answers.sp_title = '';
                }
                */
            } 
           
            
            //*****TEMP********
            //vm.answers.specials = [];
            /*
            for (var i = 0; i < vm.answers.length; i++) {
                if (i==1) {
                    vm.answers[i].specials = 'Its Happy Hour!';
                    vm.answers[i].style = 'happy';
                }
                else {
                    vm.answers[i].specials = '---';
                    vm.answers[i].style = '';
                }
                
            }
            */
            //**************************************88
            
           
            //Load current mrecs
            $rootScope.cmrecs = [];
            for (var i = 0; i < mrecs.length; i++) {
                if (mrecs[i].category == $rootScope.cCategory.id) {
                    $rootScope.cmrecs.push(mrecs[i]);
                }
            }
            /*            
            //Load edits for answers in this category
            $rootScope.cedits = [];
            for (var i = 0; i < edits.length; i++) {
                if (edits[i].category == $rootScope.cCategory.id) {
                    var edititem = edits[i];
                    $rootScope.cedits.push(edititem);
                }
            }
            */
            /*
            //Load UserActivity data
            //compute number of contributions
            $rootScope.cuseractivity = [];
            //if rank is atomic
            if ($rootScope.cCategory.isatomic == true) {
                for (var i = 0; i < useractivities.length; i++) {
                    if (useractivities[i].category == $rootScope.cCategory.id) {
                        $rootScope.cuseractivity.push(useractivities[i]);

                    }
                }
            }
            //else if rank is not atomic ('near me', 'San Diego', etc)
            else {
                //var catArr2 = $rootScope.cCategory.catstr.split(':').map(Number);
                for (var i = 0; i < useractivities.length; i++) {
                    for (var j = 0; j < catArr.length; j++) {
                        if (useractivities[i].category == catArr[j]) {
                            $rootScope.cuseractivity.push(useractivities[i]);
                            break;
                        }
                    }
                }
            }
            
            vm.numContributors = $rootScope.cuseractivity.length;
            */
            //data loading completed
            vm.isLoading = false;
        }

        function getDistances(){
            //Calculate distances to user
            var p = 0.017453292519943295;    // Math.PI / 180
            var c = Math.cos;
            var a = 0;
            var lat_o = $rootScope.currentUserLatitude;
            var lng_o = $rootScope.currentUserLongitude;
            var lat = 0;
            var lng = 0;
            var dist_mi = 0;
            for (var i = 0; i < vm.answers.length; i++) {
                lat = vm.answers[i].lat;
                lng = vm.answers[i].lng;
                a = 0.5 - c((lat - lat_o) * p) / 2 + c(lat_o * p) * c(lat * p) * (1 - c((lng - lng_o) * p)) / 2;

                dist_mi = (12742 * Math.asin(Math.sqrt(a))) / 1.609; // 2 * R; R = 6371 km
                
                if (dist_mi < 1) vm.answers[i].dist = dist_mi.toPrecision(2);
                else vm.answers[i].dist = dist_mi.toPrecision(3);

                if (vm.answers[i].dist > 2000) vm.answers[i].dist = undefined; 
            }
        }


        function createAnswerStatus() {
            /*
            if ($rootScope.canswers.length >= 30) {
                answersFull = true;
            }
            else {
                answersFull = false;
            }*/
            answersFull = false;
        }

        function rankPersonal() {
            if ($rootScope.isLoggedIn) {
                if ($rootScope.cmrecs_user.length > 0) {
                    vm.selOverall = '';
                    vm.selPersonal = 'active';
                    vm.numContributors = 1;
                    rank.computeRanking($rootScope.canswers, $rootScope.cmrecs_user);
                }
                else dialog.getDialog('noPersonalRank');
            }
            else dialog.getDialog('notLoggedIn');
        }

        function rankOverall() {
            vm.selOverall = 'active';
            vm.selPersonal = '';
            vm.numContributors = $rootScope.cuseractivity.length;
            rank.computeRanking($rootScope.canswers, $rootScope.cmrecs);
        }

        function sortByRank() {
            function compare(a, b) {
                if (a.Rank < 1 || b.Rank < 1 ) return b.Rank - a.Rank;
                else return a.Rank - b.Rank;         
            }
            vm.answers = vm.answers.sort(compare);
            
            getDisplayImages();

            $rootScope.canswers = vm.answers;
            //vm.answers = $filter('orderBy')(vm.answers, 'Rank');
            vm.selRank = 'active';
            vm.selDistance = '';
            vm.selUpV = '';
            vm.selDate = '';
            vm.selTrending = '';
            vm.sortByName = 'Rank';

            vm.showR = true || (!vm.sm);
        }

        function sortByDistance() {
            function compare(a, b) {
                return a.dist - b.dist;
            }

            if (vm.haveLocation) {
                vm.answers = vm.answers.sort(compare);
                getDisplayImages();
                $rootScope.canswers = vm.answers;
                //vm.answers = $filter('orderBy')(vm.answers, 'dist');
                vm.selRank = '';
                vm.selDistance = 'active';
                vm.selUpV = '';
                vm.selDate = '';
                vm.selTrending = '';

                if (foodNearMe) vm.answers = vm.answers.slice(0, 99);
                vm.sortByName = 'Distance';
            }
            else {
                $rootScope.loadRankWhenCoordsRdy = true;
                $rootScope.rankIsNearMe = true;
                dialog.askPermissionToLocate();
                vm.sortByName = 'Distance';
            }
        }

        function sortByUpV() {
            function compare(a, b) {
                return (b.upV-b.downV) - (a.upV-a.downV);
            }
            vm.answers = vm.answers.sort(compare);
            getDisplayImages();

            $rootScope.canswers = vm.answers;
            //vm.answers = $filter('orderBy')(vm.answers, 'dist');
            vm.selRank = '';
            vm.selDistance = '';
            vm.selUpV = 'active';
            vm.selDate = '';
            vm.selTrending = '';
            vm.sortByName = 'Popular';

            if (!foodNearMe && !vm.isE) vm.showR = false || (!vm.sm);

        }


        function sortByTrending() {
            function compare(a, b) {
                
                if((a.trendUpV == 0) && (b.trendUpV == 0))
                    return b.upV - a.upV;
                else
                    return b.trendUpV - a.trendUpV;

            }
            
            vm.answers = vm.answers.sort(compare);
            getDisplayImages();

            $rootScope.canswers = vm.answers;
            //vm.answers = $filter('orderBy')(vm.answers, 'dist');
            vm.selRank = '';
            vm.selDistance = '';
            vm.selUpV = '';
            vm.selDate = '';
            vm.selTrending = 'active';
            vm.sortByName = 'Trending';

            if (!foodNearMe && !vm.isE) vm.showR = false || (!vm.sm);

        }

        function sortByDate() {
            function compare(a, b) {

               var d1 = datetime.date2number(a.date);
               var d2 = datetime.date2number(b.date);
             
               return d1 - d2;
            }

            vm.answers = vm.answers.sort(compare);
            getDisplayImages();

            $rootScope.canswers = vm.answers;
            //vm.answers = $filter('orderBy')(vm.answers, 'dist');
            vm.selRank = '';
            vm.selDistance = '';
            vm.selUpV = '';
            vm.selDate = 'active';
            vm.selTrending = '';
            vm.sortByName = 'Date';

            //if (!vm.isE) vm.showR = false || (!vm.sm);
        }
        function loadComments() {
            commentops.loadComments('category', cObj)
            .then(function(){

                $q.all(cObj.comments.map(function(comment){ return fbusers.getFBUserById(comment.user); }))
                .then(function (fbUsers){
                    for (var i = 0; i < cObj.comments.length; i++) {
                        cObj.comments[i].picture = fbUsers[i] ? fbUsers[i].picture.data.url : null;
                    }
                });
                
            })
        }
        function postComment() {
            commentops.postComment('category', cObj);
        }

        function getDisplayImages() {
            vm.image1 = $rootScope.EMPTY_IMAGE;
            vm.image2 = $rootScope.EMPTY_IMAGE;
            vm.image3 = $rootScope.EMPTY_IMAGE;

            if (vm.answers[0]) vm.image1 = vm.answers[0].imageurl;
            if (vm.answers[1]) vm.image2 = vm.answers[1].imageurl;
            if (vm.answers[2]) vm.image3 = vm.answers[2].imageurl;
        }
        function closeRank() {
            //if ranking is one from answers, return to answer profile
            if ($rootScope.cCategory.title.indexOf('@')>-1){
                $state.go('answerDetail',{index: $rootScope.cCategory.owner});
            }
            else $state.go('cwrapper');
        }

        function closeAddInfoMsg() {
            $rootScope.addInfoMsgAck = true;
            vm.hideInfoBox = true;
            vm.addInfoMsgAck = true;
        }

        function whyNoDistance() {
            dialog.getLocation(callGetLocation);
        }

        function gotoParentRank(){
            updateRecords();
            $state.go('rankSummary',{index: vm.parentRank.id});
        }

        function callGetLocation() {
            console.log("emitGetLocation");
            $rootScope.$emit('getLocation');
        }

        function checkUserCredentials() {
            if ($rootScope.cCategory.owner != 0 && $rootScope.cCategory.owner != undefined)
                    vm.hasAnswerParent = true;
            if ($rootScope.isLoggedIn) {
                if (vm.hasAnswerParent) {
                    var idx = $rootScope.answers.map(function (x) { return x.id; }).indexOf(Number($rootScope.cCategory.owner));
                    var owner = $rootScope.answers[idx].owner;
                    if ($rootScope.user.id == owner) vm.userIsOwner = true;
                }
            }
        }

        function mergeObject(x, y) {
            x.bc = y.bc;
            x.fc = y.fc;
            x.freq = y.freq;
            x.edate = y.edate;
            x.sdate = y.sdate;
            x.etime = y.etime;
            x.etime2 = y.etime2;
            x.stime = y.stime;
            x.stime2 = y.stime2;
            x.mon = y.mon;
            x.tue = y.tue;
            x.wed = y.wed;
            x.thu = y.thu;
            x.fri = y.fri;
            x.sat = y.sat;
            x.sun = y.sun;
        }
        
        function cmFlag(x){
            if ($rootScope.isLoggedIn) {
                if ($rootScope.DEBUG_MODE) console.log("Comment Flagged");
                flag.flagAnswer('comment-rank',$rootScope.cCategory.id, x);
                dialog.getDialog('commentFlagged');
                return;
            }
            else dialog.loginFacebook(); 
            //dialog.getDialog('notLoggedIn'); 
        }
            
            function share(){
                //vm.linkurl = 'https://rank-x.com/rankSummary/' + $rootScope.cCategory.slug; 
                vm.linkurl = SERVER_URL + 'rank' + $rootScope.cCategory.id + '.html';
                vm.tweet = $rootScope.cCategory.title + ', endorse your favorite ones at: ';

                var imageurl = $rootScope.cCategory.image1url;
                if ($rootScope.cCategory.type == 'Short-Phrase')
                    imageurl = 'https://rank-x.com/assets/images/rankxlogosd2_sm.png';

                dialog.shareOptions(shareFunction, vm.isMobile, vm.linkurl, 'Rank-X, '+ vm.ranking + ', '+ $rootScope.cCategory.question + '\n' + imageurl, $scope);
            }
            
            function shareFunction(x){
                
                var imageurl = $rootScope.cCategory.image1url;
                if ($rootScope.cCategory.type == 'Short-Phrase')
                    imageurl = 'https://rank-x.com/assets/images/rankxlogosd2_sm.png';
 
                 switch(x){
                    case 'twitter':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'twitter',
                            'attrs': {
                                'socialshareUrl': vm.linkurl,
                                'socialshareText': vm.tweet,
                                'socialshareHashtags': 'rankxsandiego'
                            }
                        }); 
                        break;
                    }
                    case 'facebook':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        FB.ui(
                        {
                            method: 'feed',
                            link: vm.linkurl,
                            caption: 'Rank-X San Diego',
                        }, function(response){}); 
                        break;
                    }  
                    case 'email':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'email',
                            'attrs': {
                                'socialshareSubject': 'Rank-X, '+vm.ranking,
                                'socialshareBody': vm.linkurl
                            }
                        }); 
                        break;
                    }
                    case 'gplus':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'google',
                            'attrs': {
                                'socialshareUrl': vm.linkurl,
                                'socialshareText': vm.ranking + ', '+ $rootScope.cCategory.question,
                                'socialshareMedia': imageurl                                
                            }
                        }); 
                        break;
                    }
                    case 'pinterest':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'pinterest',
                            'attrs': {
                                'socialshareUrl': vm.linkurl,
                                'socialshareText': 'Rank-X, '+ vm.ranking + ', '+ $rootScope.cCategory.question,
                                'socialshareMedia': imageurl                                
                            }
                        }); 
                        break;
                    }
                                     
                    case 'tumblr':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'tumblr',
                            'attrs': {
                                'socialshareUrl': vm.linkurl,
                                'socialshareText': 'Rank-X, '+ vm.ranking + ', '+ $rootScope.cCategory.question,
                                'socialshareMedia': imageurl                                
                            }
                        }); 
                        break;
                    }
                    case 'reddit':{
                        if ($rootScope.DEBUG_MODE) console.log(x);
                        Socialshare.share({
                            'provider': 'reddit',
                            'attrs': {
                                'socialshareUrl': vm.linkurl,
                                'socialshareText': 'Rank-X, '+ vm.ranking,
                                'socialshareSubreddit': $rootScope.cCategory.question                                
                            }
                        }); 
                        break;
                    }
                } 
            }
        function changeMode(mode){
            vm.mode = mode;
        }

        function displayVote(x) {

            if ($rootScope.isLoggedIn) {
                if (x.dV == 1) {
                    x.thumbUp = "#0070c0";//"thumbs_up_blue.png";//
                    x.thumbDn = "#bfbfbf";//"thumbs_down_gray.png";
                }

                if (x.dV == 0) {
                    x.thumbUp = "#bfbfbf";//"thumbs_up_gray.png";
                    x.thumbDn = "#bfbfbf";//"thumbs_down_gray.png";
                }
                if (x.dV == -1) {
                    x.thumbUp = "#bfbfbf";//"thumbs_up_gray.png";
                    x.thumbDn = "#0070c0";//"thumbs_down_blue.png";
                }
            }
            else {
                x.thumbUp = "#bfbfbf";//"thumbs_up_gray.png";
                x.thumbDn = "#bfbfbf";//"thumbs_down_gray.png";
            }
        }
        
        function UpVote(x, event) {
            if ($rootScope.isLoggedIn) {

                switch (x.dV) {
                    case -1: { x.dV = 1; x.upV++; x.downV--; break; }
                    case 0: { x.dV = 1; x.upV++; break; }
                    case 1: { x.dV = 0; x.upV--; break; }
                }
                
                if (x.dV == 1) addAnswer4Rank(x);
                if (x.dV == -1 || x.dV == 0 ) removeAnswer4Rank(x);

                displayVote(x);
                if ($rootScope.DEBUG_MODE) console.log("UpVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }
        }

        function addAnswer4Rank(x){
            $rootScope.canswers4rank.push(x);
            updateStatusRankButton();
        }

        function removeAnswer4Rank(x){
            var i = $rootScope.canswers4rank.map(function(x) {return x.id; }).indexOf(x.id);
            if (i > -1) $rootScope.canswers4rank.splice(i,1);
            updateStatusRankButton();
        }
        
        function DownVote(x,event) {
            if ($rootScope.isLoggedIn) {
                switch (x.dV) {
                    case -1: { x.dV = 0; x.downV--; break; }
                    case 0: { x.dV = -1; x.downV++; break; }
                    case 1: { x.dV = -1; x.upV--; x.downV++; break; }
                }

                if (x.dV == -1 || x.dV == 0 ) removeAnswer4Rank(x);

                displayVote(x);
                if ($rootScope.DEBUG_MODE) console.log("DownVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }

        }


        function getAnswerVotes() {
            //look for user vote for this catans
            for (var i = 0; i < vm.answers.length; i++) {
                vm.answers[i].voteRecordExists = false;
                
                for (var j = 0; j < $rootScope.cvotes.length; j++) {
                    if ($rootScope.cvotes[j].catans == vm.answers[i].catans) {
                        vm.answers[i].uservote = $rootScope.cvotes[j];
                        vm.answers[i].uservote.ansvidx = i;
                        //ansvidx = i;
                        vm.answers[i].voteRecordExists = true;
                        break;
                    }

                }
                if (vm.answers[i].voteRecordExists) {
                    vm.answers[i].dV = vm.answers[i].uservote.vote;
                    //catansid = uservote.catans;
                }
                else {
                    vm.answers[i].dV = 0;
                    //catansid = x;
                }
                displayVote(vm.answers[i]);
            }

        }

        //Update Records
        function updateRecords() {
            
            //update vote record if necessary
            if ($rootScope.DEBUG_MODE) console.log("UpdateRecords @answerDetail");
            
            //TODO Need to pass table id
            if (vm.answers && $rootScope.cCategory != undefined) {
                for (var i = 0; i < vm.answers.length; i++) {

                    var voteRecordExists = vm.answers[i].voteRecordExists;
                    var userHasRank = false;
                    var useractivityrec = {};
                    //console.log("$rootScope.thisuseractivity - ", $rootScope.thisuseractivity);
                    try {
                        var idx = $rootScope.thisuseractivity.map(function (x) { return x.category; }).indexOf($rootScope.cCategory.id);
                    }
                    catch (err) {
                        console.log("Error: ", err);
                        console.log("$rootScope.cCategory - ", $rootScope.cCategory);
                        var idx = -1;
                    }
                    if (idx >= 0) {
                        userHasRank = true;
                        useractivityrec = $rootScope.thisuseractivity[idx];
                    }
                    else userHasRank = false;
                    //if vote is changed to non-zero
                    if (voteRecordExists && vm.answers[i].uservote.vote != vm.answers[i].dV && vm.answers[i].dV != 0) {
                        //update vote
                        if ($rootScope.DEBUG_MODE) console.log("UR-1");
                        votes.patchRec(vm.answers[i].uservote.id, vm.answers[i].dV);
                    }
                    //if vote is changed to zero
                    if (voteRecordExists && vm.answers[i].uservote.vote != vm.answers[i].dV && vm.answers[i].dV == 0) {
                        //Delete vote
                        if ($rootScope.DEBUG_MODE) console.log("UR-2");
                        votes.deleteRec(vm.answers[i].uservote.id);
                        //Decrease vote counter from user activity. If counter is 1, also delete user activiy record (since there is no more votes
                        //from this user)
                        if (useractivityrec.votes < 2) {
                            if ($rootScope.DEBUG_MODE) console.log("UR-3");
                            useractivity.deleteRec(useractivityrec.id);
                        }
                        else {
                            if ($rootScope.DEBUG_MODE) console.log("UR-4");
                            useractivity.patchRec(useractivityrec.id, useractivityrec.votes - 1);
                            //$rootScope.userActRec.votes--;
                        }
                    }
                    if (!voteRecordExists && vm.answers[i].dV != 0) {
                        //Post a new vote and create useractivity record
                        if ($rootScope.DEBUG_MODE) console.log("UR-5");
                        votes.postRec(vm.answers[i].catans, vm.answers[i].id, $rootScope.cCategory.id, vm.answers[i].dV);
                        if (userHasRank) {
                            if ($rootScope.DEBUG_MODE) console.log("UR-6");
                            useractivity.patchRec(useractivityrec.id, useractivityrec.votes + 1);
                            //$rootScope.userActRec.votes++;
                        }
                        else {
                            if ($rootScope.DEBUG_MODE) console.log("UR-7");
                            useractivity.postRec($rootScope.cCategory.id);
                            //$rootScope.thisuseractivity.push();
                        }
                    }

                    //update answer record (vote count) if necessary
                    //TODO Need to pass table id
                    if ((vm.answers[i].upV != vm.answers[i].upVi) || (vm.answers[i].downV != vm.answers[i].downVi)) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-8");
                        //console.log("vm.answerRanks[i] - ",vm.answerRanks[i]);
                        //catans.getCatan(vm.answers[i].catans).then(function(catan){
                        //   var updV = vm.answerRanks[i].upV + vm.answerRanks[i].upVi;
                        //   var downdV = vm.answerRanks[i].downV + vm.answerRanks[i].downVi;

                        catans.updateRec(vm.answers[i].catans, ["upV", "downV"], [vm.answers[i].upV, vm.answers[i].downV]);
                        //});
                    }
                }
            }

            if (vm.vrows) {
                for (var i = 0; i < vm.vrows.length; i++) {
                    var voteRecExists = vm.vrows[i].voteExists;
                    if (voteRecExists && vm.vrows[i].dVi != vm.vrows[i].dV) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-9");
                        $rootScope.cvrowvotes[vm.vrows[i].vidx].val = vm.vrows[i].dV;
                        vrowvotes.patchRec(vm.vrows[i].voteid, vm.vrows[i].dV);
                    }
                    if (!voteRecExists && vm.vrows[i].dV != 0) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-10");
                        vrowvotes.postRec(vm.vrows[i].id, vm.vrows[i].dV);
                    }

                    if ((vm.vrows[i].upV != vm.vrows[i].upVi) || (vm.vrows[i].downV != vm.vrows[i].downVi)) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-11");
                        vrows.updateRec(vm.vrows[i].id, ["upV", "downV"], [vm.vrows[i].upV, vm.vrows[i].downV]);
                    }
                }
            }
        }
        function sortbyHelpDialog() {
            dialog.sortbyHelpDialog();
        }

        function backToResults(){
            //updateRecords();
            if ($rootScope.previousState == 'trends') $state.go('trends');
            else $rootScope.$emit('backToResults');
            //$rootScope.$emit('backToResults');
        }

        function seeMore(){
            vm.limit = vm.limit+20;
            loadTrendVotes(vm.limit-20);
            //loadFriendsEndorsements(vm.limit-20);
            if (vm.answers.length > vm.limit) vm.thereIsMore = true;
            else vm.thereIsMore = false;
        }

        function loadTrendVotes(x){
            var answerIDs = vm.answers.map(function (answer) { return answer.id; });
                if (answerIDs.length > 0) {
                    votes.loadLastMonthVoting(answerIDs.slice(x,x+20))
                        .then(function (resp) {
                            resp.forEach(function (vote) {
                                var idx = answerIDs.indexOf(vote.answer);
                                if (vm.answers[idx].trendUpV == undefined) vm.answers[idx].trendUpV = 0; 
                                vm.answers[idx].trendUpV++;
                            });
                            //console.log(vm.answers);
                        });
                }
        }

        function loadFriendsEndorsements(x){
            //console.log("load friends endorsements - ",$rootScope.friends_votes.length,$rootScope.user.friends.data.length);
            //Check friends endorsements for this answers
            //var ansIds = vm.answers.slice(x,x+20);
            var ansIds = vm.answers;
            var idx = -1;
            var cidx = -1;
            var ridx = -1;
            ansIds.forEach(function(answer){
                answer.userObjs = [];
                for (var i=0; i< $rootScope.friends_votes.length; i++){
                    if ($rootScope.friends_votes[i].answer == answer.id) {
                        var friend = getUser($rootScope.friends_votes[i]);
                        //console.log("friend - ", friend);
                        cidx = $rootScope.catansrecs.map(function(x) {return x.id; }).indexOf($rootScope.friends_votes[i].catans);
                        if (cidx > -1 ) ridx = $rootScope.content.map(function(x) {return x.id; }).indexOf($rootScope.catansrecs[cidx].category); 
                        //if (ridx > -1) {
                            idx = answer.userObjs.map(function (x) { return x.id; }).indexOf(friend.id);
                            if (idx < 0) {
                                //console.log("$rootScope.friends_votes[i] ", $rootScope.friends_votes[i]);
                                friend.endorsements = [];
                                if (ridx > -1) friend.endorsements.push($rootScope.content[ridx].title);
                                answer.userObjs.push(friend);
                            }
                            else {
                                //console.log("answer - ", answer);
                                if (ridx > -1) answer.userObjs[idx].endorsements.push($rootScope.content[ridx].title);
                            }
                        //}
                    }
                }

            });
            //console.log("ansIds - ", ansIds);
        }

        function getUser(voterec) {
            for (var i = 0; i < $rootScope.user.friends.data.length; i++) {
                if (voterec.user == $rootScope.user.friends.data[i].id) {
                    return $rootScope.user.friends.data[i];
                }
            }
        }

        function showAllFriendsList(userObjs, answername){
            dialog.showAllFriendsListDlg(userObjs, answername);
        }

        function incViews() {
            $rootScope.cCategory.views++;
            //update number of views (Request to increment to server)
            var url = SERVER_URL + 'databaseOps/incViews/rank/' + $rootScope.cCategory.id;
            var req = {
                method: 'POST',
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            $http(req);
        }

        function getResults() {
            var timeoutPromise;
            $timeout.cancel(timeoutPromise); //do nothing is timeout already done   
            timeoutPromise = $timeout(function () {
                vm.answers = [];
                $rootScope.canswers.forEach(function(cans){
                    if (cans.name.toLowerCase().indexOf(vm.val.toLowerCase()) > -1 || 
                        cans.cityarea.toLowerCase().indexOf(vm.val.toLowerCase()) > -1){
                        vm.answers.push(cans);
                    }
                });                
            }, 300);
        }

        function getFilterOptions(){
            vm.opts = [];
            $rootScope.canswers.forEach(function(cans){
                    if (vm.opts.indexOf(cans.name)<0) vm.opts.push(cans.name);
                    if (vm.opts.indexOf(cans.cityarea)<0) vm.opts.push(cans.cityarea);
            });
        }

        function clearSearch(){
            vm.val = '';
            vm.answers = $rootScope.canswers;
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .factory('promoter', promoter);

    promoter.$inject = ['$http', '$q', '$rootScope'];

    function promoter($http, $q, $rootScope) {

        //Members
        var _promoters = [];
        var _promoter = {};
        var baseURI = '/api/v2/mysql/_table/promoters';

        var service = {
            getall: getall,
            get: get,
            getbyUser: getbyUser,
            getbyCode: getbyCode,
            add: add,
            update: update,
            deletepromoter: deletepromoter,
            getbycode: getbycode,
        };

        return service;

        function getall(forceRefresh) {
            // console.log("getpromotes..._arepromotesLoaded()", _arepromotesLoaded());

            if (_arepromotersLoaded() && !forceRefresh) {

                return $q.when(_promoters);
            }
            
            //Get all promote records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                _promoters = d[0].data.resource;

                if ($rootScope.DEBUG_MODE) console.log("No. promoters: ", _promoters.length);
                return _promoters;            
            }, _queryFailed);  

        }

        function get(id) {

            var url = baseURI + '/' + id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _promoter = result.data.resource;
            }
        }

        function getbyUser(user) {

            var url = baseURI + '/?filter=user=' + user;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _promoter = result.data.resource;
            }
        }

        function getbyCode(code) {

            var url = baseURI + '/?filter=code=' + code;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _promoter = result.data.resource;
            }
        }
        
        function add(promoter) {

            var url = baseURI;
            var resource = [];

            resource.push(promoter);
            
            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var promoterx = promoter;
                promoterx.id = result.data.resource[0].id; 
                _promoters.push(promoterx);
                
                return result.data;
            }

        }
       
        function update(promoter_id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = promoter_id;
            
            for (var i=0; i<field.length; i++){
                switch (field[i]){
                    case "firstname": data.firstname = val[i]; break;
                    case "lastname": data.lastname = val[i]; break;
                    case "email": data.email = val[i]; break;
                    case "address": data.address = val[i]; break;
                    case "phone": data.phone = val[i]; break;
                    case "code": data.code = val[i]; break;
                    case "stripeid": data.stripeid = val[i]; break;
                }
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _promoter.map(function(x) {return x.id; }).indexOf(promoter_id);  
            for (var i=0; i<field.length; i++){
                switch (field[i]){
                    case "firstname": _promoter[idx].firstname = val[i]; break;
                    case "lastname": _promoter[idx].lastname = val[i]; break;
                    case "email": _promoter[idx].email = val[i]; break;
                    case "address": _promoter[idx].address = val[i]; break;
                    case "phone": _promoter[idx].phone = val[i]; break;
                    case "code": _promoter[idx].code = val[i]; break;
                    case "stripeid": _promoter[idx].stripeid = val[i]; break;
                }
            }                        
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                if ($rootScope.DEBUG_MODE) console.log("updating promoter succesful");
                return result.data;
            }
        }
        
        function deletepromoter(promoter_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = promote_id;

            obj.resource.push(data);

            var url = baseURI + '/' + promoter_id;
            
            //update (delete promote) local copy of promotes
            var i = _promoters.map(function(x) {return x.id; }).indexOf(promoter_id);
            if (i > -1) _promoters.splice(i,1);
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting promote was succesful");
                return result.data;
            }
        }

        function getbycode(code){

            var url = baseURI + '/?filter=code='+ code;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _promoter = result.data.resource;
            }

        }

        function _arepromotersLoaded() {

            return _promoters.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('userdata', userdata);

    userdata.$inject = ['$rootScope', 'votes', 'editvote', 'vrowvotes', 
    'useraccnt', 'answer','table2', 'catans','special', 'dataloader',
     'useractivity', '$q', 'promoter','categorycode', 'codeprice','$http', 'SERVER_URL'];

    function userdata($rootScope, votes, editvote, vrowvotes, 
        useraccnt, answer, table2, catans, special, dataloader,
    useractivity, $q, promoter, categorycode, codeprice, $http, SERVER_URL) {

        var service = {

            loadUserData: loadUserData,
            loadUserAccount: loadUserAccount,
            pullFavoriteData: pullFavoriteData,
        };

        return service;

        function loadUserData() {

            if ($rootScope.isLoggedIn) {
                if ($rootScope.DEBUG_MODE) console.log("user is logged in, loading data");
                //Promises
                var p0 = votes.loadVotesByUser();
                var p1 = editvote.loadEditVotesTable();
                var p2 = vrowvotes.loadVrowVotes();
                var p3 = useractivity.getActivitybyUser();
                var p4 = promoter.getbyUser($rootScope.user.id);
                var p5 = categorycode.get();
                var p6 = codeprice.get();
                var p7 = votes.loadVotesByMyFriends();
    
                return $q.all([p0, p1, p2, p3, p4, p5, p6, p7]).then(function (d) {
                    $rootScope.cvotes = d[0];
                    $rootScope.editvotes = d[1];
                    $rootScope.cvrowvotes = d[2];
                    $rootScope.thisuseractivity = d[3];
                    $rootScope.userpromoter = d[4];
                    $rootScope.catcodes = d[5];
                    $rootScope.codeprices = d[6];
                    $rootScope.friends_votes = d[7];

                    dataloader.getDemoData();
                    if ($rootScope.DEBUG_MODE) console.log("user promoter - ",$rootScope.userpromoter);
                    $rootScope.userDataLoaded = true;
                    $rootScope.$emit('userDataLoaded');  
                });
            }
            else {
                if ($rootScope.DEBUG_MODE) console.log("user is not logged in, no need to load data");
                $rootScope.cvotes = [];
                $rootScope.editvotes = [];
                $rootScope.cvrowvotes = [];
                $rootScope.thisuseractivity = [];
                $rootScope.userpromoter = [];
                $rootScope.catcodes = [];
                $rootScope.codeprices = [];

                $rootScope.userDataLoaded = true;
                $rootScope.$emit('userDataLoaded');
            }
        }

        function loadUserAccount() {

            if ($rootScope.isLoggedIn) {
                if ($rootScope.DEBUG_MODE) console.log("user is logged in, loading loading user accounts data");
           
                //Check if user has business account    
                useraccnt.getuseraccnt().then(function (result) {
                    //$rootScope.useraccnts = result;
                    $rootScope.showWarning = false;
                    if ($rootScope.useraccnts.length > 0) {
                        var missingEmail = true;
                        var url = '';
                        for (var i = 0; i < $rootScope.useraccnts.length; i++) {
                            
                            if ($rootScope.useraccnts[i].email != '') missingEmail = false;

                            //If user is customer, asynchronously ask server to get from Stripe latest invoice/subscription info
                            if ($rootScope.useraccnts[i].stripeid != undefined && $rootScope.useraccnts[i].stripeid != '' && 
                                $rootScope.useraccnts[i].stripeid != 0){
                                url = SERVER_URL + 'dreamfactory-stripe-user/'+$rootScope.useraccnts[i].stripeid+'/'+$rootScope.useraccnts[i].id;
                                var useraccnt = $rootScope.useraccnts[i];
                                var req = {
                                    method: 'GET',
                                    url: url,
                                    headers: {
                                        'X-Dreamfactory-API-Key': undefined,
                                        'X-DreamFactory-Session-Token': undefined
                                    }
                                }

                                $http(req).then(succeedFunc,function(error){
                                    console.log("Error updating Stripe Invoices - ", error);
                                });
                                function succeedFunc(result){
                                    // console.log("Success updating Stripe Invoices - ", result);
                                    useraccnt.customer = result.data;
                                    syncDatatoAnswers();
                                }
                                if ($rootScope.DEBUG_MODE) console.log("Retrieving latest invoice info from Stripe");
                            }
                        }
                        $rootScope.$emit('userAccountsLoaded');
                        if (missingEmail) {
                            $rootScope.showWarning = true;
                            $rootScope.$emit('showWarning');
                        }
                        else $rootScope.showWarning = false;
                           
                    }
                });
            }
        }

        function syncDatatoAnswers() {
            if ($rootScope.isLoggedIn && $rootScope.rankSummaryDataLoaded) {
                if ($rootScope.DEBUG_MODE) console.log("Syncing useraccnt data to answers");
                var idx = 0;
                for (var i = 0; i < $rootScope.useraccnts.length; i++) {
                    var fields = [];
                    var vals = [];
                    idx = $rootScope.answers.map(function (x) { return x.id; }).indexOf($rootScope.useraccnts[i].answer);
                    if ($rootScope.answers[idx].ispremium != $rootScope.useraccnts[i].ispremium) {
                        fields.push('ispremium'); vals.push($rootScope.useraccnts[i].ispremium);
                    }
                    if ($rootScope.answers[idx].hasranks != $rootScope.useraccnts[i].hasranks) {
                        fields.push('hasranks'); vals.push($rootScope.useraccnts[i].hasranks);
                    }
                    if ($rootScope.answers[idx].ranksqty != $rootScope.useraccnts[i].ranksqty) {
                        fields.push('ranksqty'); vals.push($rootScope.useraccnts[i].ranksqty);
                    }
                    if (fields.length > 0) answer.updateAnswer($rootScope.answers[idx].id, fields, vals);
                }
            }
        }

        function pullFavoriteData(){
            //Prepare array to pulldata
            var favans = [];
            var obj = {};
            for (var i = 0; i < $rootScope.cvotes.length; i++) {
                obj = {};
                obj.id = $rootScope.cvotes[i].answer;
                obj.answer = $rootScope.cvotes[i].answer;
                favans.push(obj);
            }
            dataloader.pulldata('answers',favans);
            //My friends answers
            $rootScope.friendsVotes = true;
            var friendsans = [];
            for (var i = 0; i < $rootScope.friends_votes.length; i++) {
                obj = {};
                obj.id = $rootScope.friends_votes[i].answer;
                obj.answer = $rootScope.friends_votes[i].answer;
                friendsans.push(obj);
            }
            dataloader.pulldata('answers',friendsans);

        }
    }
})();
(function () {
    'use strict';
    angular
        .module('app')
        .factory('useraccnt', useraccnt);
    useraccnt.$inject = ['$http','$q','$rootScope', 'login', 'SERVER_URL'];
    function useraccnt($http, $q, $rootScope, login, SERVER_URL) {
        var _useraccnts = [];
        $rootScope.useraccnts = _useraccnts;
        var _promoteraccnts = [];
        var baseURI = '/api/v2/mysql/_table/useraccnts';

        var service = {
            getuseraccnt: getuseraccnt,
            getaccntsbycode: getaccntsbycode,
            getuseraccntans : getuseraccntans,
            getallaccnts : getallaccnts,
            adduseraccnt: adduseraccnt,
            updateuseraccnt: updateuseraccnt,
            getuseraccntInvoicesAndCustomer: getuseraccntInvoicesAndCustomer,
            deleteAccount: deleteAccount,
            payPromoter: payPromoter,
            getBizCat: getBizCat,
    };
    return service;

    function payPromoter(promoter, STRIPE_COMMISSION_PERCENTAGE){
        var url = SERVER_URL + 'stripeServer/payPromoter';
        var req = {
            method: 'POST',
            url: url,
            data: {
                stripeId: promoter.stripeid,
                promoterId: promoter.id,
                amount: promoter.balance * STRIPE_COMMISSION_PERCENTAGE
            },
            headers: {
                'X-Dreamfactory-API-Key': undefined,
                'X-DreamFactory-Session-Token': undefined
            }
        }

        return $http(req).then(function(result){
            return result;
        });
    }
    function deleteAccount(stripeid, accountId, answerId){
        //TODO decide whether to delete it.
        // var url = SERVER_URL + 'stripeServer/' + stripeid + '/' + accountId + '/deleteCustomer';
        // var req = {
        //     method: 'GET',
        //     url: url,
        //     headers: {
        //         'X-Dreamfactory-API-Key': undefined,
        //         'X-DreamFactory-Session-Token': undefined
        //     }
        // }

        // return $http(req).then(function(result){
        //     return result;
        // });


        var url = baseURI + '/' + accountId;
        return $http.delete(url).then(querySucceeded, _queryFailed);

        function querySucceeded(result) {
            var ind = _useraccnts.map(function(acc){return acc.id;}).indexOf(result.data.id);
            _useraccnts.splice(ind, 1);
            return result;
        }
    }

    function getuseraccntInvoicesAndCustomer(stripeid){
        var url = SERVER_URL + 'stripeServer/' + stripeid + '/invoices';
        var req = {
            method: 'GET',
            url: url,
            headers: {
                'X-Dreamfactory-API-Key': undefined,
                'X-DreamFactory-Session-Token': undefined
            }
        }

        return $http(req).then(function(result){
            return result.data;
        });
    }


      /*
       *
       * Function to get user detail from user_detail table for logged in user
       *
       */
      function getallaccnts() {

          var url = baseURI;
          return $http.get(url).then(querySucceeded, _queryFailed);

          function querySucceeded(result) {
              return _useraccnts = result.data.resource;
          }

      }

      /*
       *
       * Function to get user detail from user_detail table for logged in user
       *
       */
      function getuseraccnt() {
        // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): START");
          //if (_isuseraccntLoaded() && !forceRefresh) {

           //   return $q.when(_useraccnts);
          //}

          var url = baseURI + '' + '?filter=(user='+$rootScope.user.id+')';
          // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET");
          return $http.get(url).then(querySucceeded, _queryFailed);

          function querySucceeded(result) {

            var data = result.data.resource;
            _load (data);
            // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET: SUCCESS");
            // console.log("result.data.resource: " + JSON.stringify(result.data.resource[0]));

              // return _useraccnts = result.data.resource[0];
              return _useraccnts;
          }

      }

      function getuseraccntans(answer) {
        // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): START");
          //if (_isuseraccntLoaded() && !forceRefresh) {

          //    return $q.when(_useraccnts);
          //}

          var url = baseURI + '' + '?filter=(user='+$rootScope.user.id+') AND (answer='+answer+')';

          // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET");
          return $http.get(url).then(querySucceeded, _queryFailed);

          function querySucceeded(result) {
            // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET: SUCCESS");
            // console.log("result.data.resource: " + JSON.stringify(result.data.resource[0]));

              // return _useraccnts = result.data.resource[0];
              return result.data.resource;
          }

      }

      function getaccntsbycode (code){

          var url = baseURI + '' + '?filter=(promocode='+code+')';
          // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET");
          return $http.get(url).then(querySucceeded, _queryFailed);

          function querySucceeded(result) {
            // console.log("useraccnt.srvc.js:getuseraccnt(forcerefresh): GET: SUCCESS");
            // console.log("result.data.resource: " + JSON.stringify(result.data.resource[0]));

              // return _useraccnts = result.data.resource[0];
              return _promoteraccnts = result.data.resource;              
          }
      }

      /*
       *
       * Function to add user detail in user_detail table
       *
       */
      function adduseraccnt(answer) {
          /*
        console.log("START useraccnt.srvc.js:adduseraccnt:$rootScope.user.id: " + $rootScope.user.id)

        // check if the DF account already exists
        var url = baseURI + '' + '?filter=(user='+$rootScope.user.id+')';
        return $http.get(url).then(userSearchResult, _queryFailed);
        function userSearchResult(result) {
          var data = result.data.resource;
          var count = 0;
          if (data) {
            count = parseInt(JSON.stringify(data.length));
            // console.log("count: " + count);
            if (count > 0) {

              user = JSON.parse(localStorage.getItem("user"));
              user.dfUseraccntId = result.data.resource[0].id;
              user.stripeId = result.data.resource[0].stripeid
              window.localStorage.user = JSON.stringify(user);
              user = JSON.parse(localStorage.getItem("user"));

              console.log("YES found the DF account, user: " + JSON.stringify(user));

              return 0;
            } else {

              console.log("NO, did not find the DF account");

              var user = {};
              user = JSON.parse(localStorage.getItem("user"));

              console.log("app/login/services/useraccnt.srvc.js:userLocalStorage: " + JSON.stringify(user) );
*/
              //form match record
              var data = {};

              data.user = $rootScope.user.id;
              data.answer = answer.id;
              data.bizcat = getBizCat(answer.id);
              data.status = 'Basic';
              data.stripeid = '0';
              data.email = $rootScope.user.email;
              data.username = $rootScope.user.name;

              // MINIMUM NEEDED
              // "user":999,
              // "answer":0,
              // "bizcat":0,
              // "status":0

                var obj = {};
                obj.resource = [];
                obj.resource.push(data);

                //console.log("src/app/login/services/useraccnt.srvc.js:adduseraccnt():obj.resource = " + JSON.stringify(obj.resource) );
                // [{"answer":"","bizcat":"REB","status":"Non-paying","stripeid":"dskjflskdjflskjd","email":"10154674551822270+facebook@facebook.com"}]

                var url = baseURI;

                return $http.post(url, obj, {
                    headers: {
                        "Content-Type": "multipart/form-data"
                    },
                    body: obj
                }).then(querySucceeded, _queryFailed);

                function querySucceeded(result) {
                    /*
                  console.log("useraccnt.srvc.js:querySucceeded:result:" + JSON.stringify(result));
                  console.log("the new useraccnt ID: " + result.data.resource[0].id);

                  user = JSON.parse(localStorage.getItem("user"));
                  user.dfUseraccntId = result.data.resource[0].id;
                  user.stripeId = result.data.resource[0].stripeid
                  window.localStorage.user = JSON.stringify(user);
                  user = JSON.parse(localStorage.getItem("user"));

                  console.log("useraccnt.srvc.js:user:" + JSON.stringify(user));
                  */

                  // window.localstorage.setItem("dfUseraccntId", result.data.resource[0].id);
                  // localStorage.user.dfUseraccntId = result.data.resource[0].id;
 //useraccnt.srvc.js:querySucceeded:result:{"data":{"resource":[{"id":112}]},"status":200,"config":{"method":"POST","transformRequest":[null],"transformResponse":[null],"headers":{"Content-Type":"multipart/form-data","Accept":"application/json, text/plain, */*","X-Dreamfactory-API-Key":"8b8174170d616f3adb571a0b28daf65a0cf07aa149aad9bf6554986856debdf4"},"body":{"resource":[{"user":37,"answer":0,"bizcat":"REB","status":"Non-paying","stripeid":"test","email":"sjurowski+facebook@ucsd.edu"}]},"url":"https://api.rank-x.com/api/v2/mysql/_table/useraccnts","data":{"resource":[{"user":37,"answer":0,"bizcat":"REB","status":"Non-paying","stripeid":"test","email":"sjurowski+facebook@ucsd.edu"}]}},"statusText":"OK"}

                  // console.log("useraccnt.srvc.js:localStorage.user:" + JSON.stringify(localStorage.user));
//useraccnt.srvc.js:localStorage.user:"{\"email\":\"sjurowski+facebook@ucsd.edu\",\"first_name\":\"Sandon\",\"host\":\"bitnami-dreamfactory-df88\",\"id\":37,\"is_sys_admin\":false,\"last_login_date\":\"2016-12-13 21:04:47\",\"last_name\":\"Jurowski\",\"name\":\"Sandon Jurowski\",\"role\":\"rank-user\",\"role_id\":1,\"session_id\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNjYzMDg3LCJleHAiOjE0ODE2NjY2ODcsIm5iZiI6MTQ4MTY2MzA4NywianRpIjoiYWQ2M2Q0OTI1MDRmNTJiYjBkMWZiZjJkNzAxMjQzNDMifQ.T-3B-jnz4d2Q2Q5rfN1ePF7ujin982gzPYbRwhLo9Uc\",\"session_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNjYzMDg3LCJleHAiOjE0ODE2NjY2ODcsIm5iZiI6MTQ4MTY2MzA4NywianRpIjoiYWQ2M2Q0OTI1MDRmNTJiYjBkMWZiZjJkNzAxMjQzNDMifQ.T-3B-jnz4d2Q2Q5rfN1ePF7ujin982gzPYbRwhLo9Uc\"}"

                  //update local copy
                  var datax = data;
                  datax.id = result.data.resource[0].id; 
                  _useraccnts.push(datax);

                  //return the ID of the new account row
                  return datax;
                }
            }
  /*        }
        }
      }
*/

      /*
      *
      * Function to update user detail in user_detail table
      *
      */
      function updateuseraccnt(recid, field, val) {

          //form match record
          var obj = {};
          obj.resource = [];

          var data = {};
          data.id = recid;
          //data.id = user;

          for (var i=0; i<field.length; i++){
              switch (field[i]){
                  case "bizcat": data.bizcat = val[i]; break;
                  case "email": data.email = val[i]; break;
                  case "status": data.status = val[i]; break;
                  case "stripeid": data.stripeid = val[i]; break;
                  case "ispremium": data.ispremium = val[i]; break;
                  case "hasranks": data.hasranks = val[i]; break;
                  case "ranksqty": data.ranksqty = val[i]; break;
                  case "name": data.name = val[i]; break;
              }
          }
          //console.log("data", data);
          obj.resource.push(data);
          //console.log("obj.resource - ", obj);

          var url = baseURI;

          //update local copy
          var idx = _useraccnts.map(function(x) {return x.id; }).indexOf(recid);
          for (var i=0; i<field.length; i++){
              switch (field[i]){
                  case "bizcat": _useraccnts[idx].bizcat = val[i]; break;
                  case "email": _useraccnts[idx].email = val[i]; break;
                  case "status": _useraccnts[idx].status = val[i]; break;
                  case "stripeid": _useraccnts[idx].stripeid = val[i]; break;
                  case "ispremium": _useraccnts[idx].ispremium = val[i]; break;
                  case "hasranks": _useraccnts[idx].hasranks = val[i]; break;
                  case "ranksqty": _useraccnts[idx].ranksqty = val[i]; break;
                  case "name": _useraccnts[idx].name = val[i]; break;
              }
          }

          return $http.patch(url, obj, {
              headers: {
                  "Content-Type": "multipart/form-data"
              },
              body: obj
          }).then(querySucceeded, _queryFailed);
          function querySucceeded(result) {

              // console.log("User account successfully updated.");
              $rootScope.$emit('clear-notification-warning');
              return result.data;
          }
      }

      //Find which business category this answer belongs to
      function getBizCat(answerid) {
          var category = 0;
          var rank = {};
          var bizcat = '';
          var scale_current = 0;
          var scale_this = 0;
          for (var j = 0; j < $rootScope.catansrecs.length; j++) {
              if ($rootScope.catansrecs[j].answer == answerid) {
                  category = $rootScope.catansrecs[j].category;
                  var idx = $rootScope.content.map(function (x) { return x.id; }).indexOf(category);
                  if (idx > -1) {
                      rank = $rootScope.content[idx];
                      if (rank.title != null) {
                          for (var k = 0; k < $rootScope.catcodes.length; k++) {
                              if (rank.title.indexOf($rootScope.catcodes[k].category) > -1) {
                                  if (bizcat == '') {
                                      bizcat = $rootScope.catcodes[k].code;
                                  }
                                  else {
                                      //find current value of answer bizcat
                                      for (var l = 0; l < $rootScope.codeprices.length; l++) {
                                          if ($rootScope.codeprices[l].code == bizcat) {
                                              scale_current = $rootScope.codeprices[l].scale;
                                          }
                                          if ($rootScope.codeprices[l].code == $rootScope.catcodes[k].code) {
                                              scale_this = $rootScope.codeprices[l].scale;
                                          }
                                      }
                                      if (scale_this > scale_current) {
                                          bizcat = $rootScope.catcodes[k].code;
                                      }
                                  }
                              }
                          }
                      }
                  }
                  else if ($rootScope.DEBUG_MODE) console.log('Couldnt find rank: ', category);
              }
          }
          return bizcat;
      }
      
      function _load(data){
            _useraccnts.length = 0;
            data.forEach(function(x){
                _useraccnts.push(x);
            });
        }

      function _isuseraccntLoaded() {

          if (!_useraccnts) {
            return false
          } else {
            return _useraccnts.length > 0;
          }
      }

      function _queryFailed(error) {
        //
        // console.log("app/login/services/useraccnt.srvc.js:_queryFailed(error):result.data: " + JSON.stringify(result.data);

          throw error;
      }
    }
})();

(function() {
    'use strict';

    angular
        .module('app')
        .factory('login', login);

    login.$inject = ['$http', '$q', '$cookies', '$rootScope', 'INSTANCE_URL', '$state', '$location', '$window', '$facebook', 'fbusers'];

    function login($http, $q, $cookies, $rootScope, INSTANCE_URL, $state, $location, $window, $facebook, fbusers) {
        var service = {
            initiate: initiate,
            loginWithFacebook: loginWithFacebook,
            oauthWithFacebook: oauthWithFacebook,
            register: register,
            logout: logout,
            setFakeLocalUser: setFakeLocalUser,
            facebookSDKLogin: facebookSDKLogin
        };
        // getUserObjectFromLocalStorage: getUserObjectFromLocalStorage,

        return service;

        function facebookSDKLogin() {

            return service.loginWithFacebook()
            .then(function(res) {
                return $facebook.login('public_profile,email,user_friends')
                    .then(function(res) {
                        if (res.status === 'connected') {
                            return $facebook.api("/me?fields=id,name,picture,first_name,last_name,gender,age_range,locale,email");
                        }
                    })
                    .then(function(me) {
                        if ($rootScope.DEBUG_MODE) console.log('My info: ', me);

                        $rootScope.user = me;
                        return $facebook.api('me/friends?fields=first_name,gender,locale,last_name,email,picture');
                    })
                    .then(function(friends) {
                        if ($rootScope.DEBUG_MODE) console.log('Got friends: ', friends);

                        $rootScope.user.friends = friends;
                        $rootScope.isLoggedIn = true;

                        fbusers.addFBUser($rootScope.user);
                        try {
                            window.localStorage.user = JSON.stringify($rootScope.user);
                        } catch (e) {}

                        if ($rootScope.DEBUG_MODE) console.log("oauthWithFacebook succesful");
                        //$rootScope.$emit('redirectAfterLogin');
                    })
                    .catch(function(err) {
                        console.log(err);
                    });
            });
        }

        function initiate(options) {
            console.log("login/services/login.svc.js:initiate");

            return $http.post('/api/v2/user/session', options).then(function(result) {
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = result.data.session_token;
                $cookies.session_token = result.data.session_token;

                $rootScope.user = result.data;

                try {
                    window.localStorage.user = JSON.stringify(result.data);
                } catch (e) {}
            });
        }

        function loginWithFacebook() {

            if ($rootScope.DEBUG_MODE) console.log("@loginWithFacebook");

            var statename = '';
            var statenum = 0;
            var ccategory = 0;

            //Store in cookies memory to redirect after login, ignore state:login
            if ($rootScope.stateName == undefined) statename = $state.current.name;
            else statename = $rootScope.stateName;

            if ($rootScope.stateName == undefined) {
                if (statename == 'rankSummary') statenum = $rootScope.cCategory.id;
                if (statename == 'answerDetail') statenum = $rootScope.canswer.id;
            } else statenum = $rootScope.stateNum;

            if ($rootScope.cCategory != undefined) ccategory = $rootScope.cCategory.id;
            else ccategory = undefined;

            $cookies.put('statename', statename);
            $cookies.put('statenum', statenum);
            $cookies.put('ccategory', ccategory);

            var deferred = $q.defer();

            var url = INSTANCE_URL + '/api/v2/user/session?service=facebook';
            deferred.resolve({
                url: url
            });

            return deferred.promise;
        }

        function oauthWithFacebook(queryString) {

            if ($rootScope.DEBUG_MODE) console.log("@oauthWithFacebook - ", queryString);

            return $http.post('/api/v2/user/session?oauth_callback=true&service=facebook&' + queryString).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                console.log("oauth results", result);
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = result.data.session_token;
                $cookies.session_token = result.data.session_token;

                $rootScope.user = result.data;
                $rootScope.isLoggedIn = true;

                try {
                    window.localStorage.user = JSON.stringify(result.data);
                    //$window.location.search = '';
                } catch (e) {}

                if ($rootScope.DEBUG_MODE) console.log("oauthWithFacebook succesful");
                $rootScope.$emit('redirectAfterLogin');
            }
        }

        function logout() {

            return $http.delete('/api/v2/user/session').then(function(result) {

                delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];
                $cookies.remove('session_token');
                delete $rootScope.user;
                $rootScope.isLoggedIn = false;
                $rootScope.isAdmin = false;
                $rootScope.dataAdmin = false;
                $rootScope.$emit('adminCredentials');

                try {
                    window.localStorage.removeItem('user');
                } catch (e) {}

            });
        }

        function _queryFailed(error) {

            console.log("error", error);
            throw error;
        }

        function register(options) {
            console.log("options", options);
            return $http.post('/api/v2/user/register?login=true', options).then(function(result) {
                console.log("register result", result);

            }, function(error) {

                console.log("error", error);
            });
        }

        function setFakeLocalUser() {

            // On the production facebook login, the
            // localstorage data object is like:
            // --------------------------------------
            // key:user
            //value:{"session_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNTgxNDEyLCJleHAiOjE0ODE1ODUwMTIsIm5iZiI6MTQ4MTU4MTQxMiwianRpIjoiYzNlOGI4ZDYxZThmNzEzMTdhNzAyNDM3ODk5OTA3MDEifQ.o4myV3Yb-3l-_xcEHI8fsRO4HCxuR7e4hUW--Jy94Vk","session_id":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNTgxNDEyLCJleHAiOjE0ODE1ODUwMTIsIm5iZiI6MTQ4MTU4MTQxMiwianRpIjoiYzNlOGI4ZDYxZThmNzEzMTdhNzAyNDM3ODk5OTA3MDEifQ.o4myV3Yb-3l-_xcEHI8fsRO4HCxuR7e4hUW--Jy94Vk","id":29,"name":"Sandon Jurowski","first_name":"Sandon","last_name":"Jurowski","email":"sjurowski+facebook@ucsd.edu","is_sys_admin":false,"last_login_date":"2016-12-12 22:23:32","host":"bitnami-dreamfactory-df88","role":"rank-user","role_id":1}

            // OLD value:{"session_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNTgxNDEyLCJleHAiOjE0ODE1ODUwMTIsIm5iZiI6MTQ4MTU4MTQxMiwianRpIjoiYzNlOGI4ZDYxZThmNzEzMTdhNzAyNDM3ODk5OTA3MDEifQ.o4myV3Yb-3l-_xcEHI8fsRO4HCxuR7e4hUW--Jy94Vk","session_id":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNTgxNDEyLCJleHAiOjE0ODE1ODUwMTIsIm5iZiI6MTQ4MTU4MTQxMiwianRpIjoiYzNlOGI4ZDYxZThmNzEzMTdhNzAyNDM3ODk5OTA3MDEifQ.o4myV3Yb-3l-_xcEHI8fsRO4HCxuR7e4hUW--Jy94Vk","id":29,"name":"Sandon Jurowski","first_name":"Sandon","last_name":"Jurowski","email":"10154674551822270+facebook@facebook.com","is_sys_admin":false,"last_login_date":"2016-12-12 22:23:32","host":"bitnami-dreamfactory-df88","role":"rank-user","role_id":1}

            // on logout, the above object is deleted
            // --------------------------------------

            //  from the mysql db on dreamfactory 20161127
            //  "id": 34,
            //  "name": "Sandon Jurowski",
            //  "first_name": "Sandon",
            //  "last_name": "Jurowski",
            //  "last_login_date": null,
            //  "email": "sjurowski@ucsd.edu",

            //  login.initiate();

             $rootScope.isLoggedIn = true;
            //  $rootScope.user = {};
            //  $rootScope.answeridxgps = 1258; //starting indx for gps conversion
            //  $rootScope.user.id = 34;
            //  $rootScope.user.email = "sjurowski@ucsd.edu";
            //  $rootScope.user.name = "Sandon Jurowski";
            //  $rootScope.user.first_name = 'Sandon';
            //  $rootScope.isAdmin = true;
            //  vm.isAdmin = true;
            //
            //  // *** end sgj portal.works ***
            //
            //
            // vm.user = $rootScope.user;
            // vm.goBack = goBack;
            // vm.goPremium = goPremium;
            // --------------------------------------


            // taking the place of result.data below
            var fakeResult = new Object();
            fakeResult.age_range = { min: 21 };
            fakeResult.first_name = 'Test';
            fakeResult.friends = {
                data: [{
                    first_name:"John",
                    gender:"male",
                    id:"362411340826490",
                    last_name:"Carter",
                    locale:"en_US",
                    picture:{
                        data:{
                            is_silhouette:false,
                            url:"https://scontent.xx.fbcdn.net/v/t1.0-1/p50x50/18034179_362408994160058_2814191765613662934_n.jpg?oh=03f00905624bc37bc3f57b76148a44aa&oe=59BC08B8"
                        }
                    }
                },
                {
                    first_name:"John",
                    gender:"male",
                    id:"398314100568945",
                    last_name:"Will",
                    locale:"en_US",
                    picture:{
                        data:{
                            is_silhouette:false,
                            url:"https://scontent.xx.fbcdn.net/v/t1.0-1/p50x50/14915696_288291968237826_1651783963192855784_n.jpg?oh=18bee38eafb63165ac9ecf37d649d8ee&oe=597C137F"
                        }
                    }
                }],
                summary: {}
            };
            fakeResult.gender = 'male';
            fakeResult.id = '187959328383879';   //Roy
            // fakeResult.id = '10104518570729893';  //Andres
            
            fakeResult.email = 'roy.smith0820@gmail.com';
            fakeResult.last_name = 'User';
            fakeResult.locale = "us_EN";
            fakeResult.name = "Test User";
            fakeResult.picture = {
                data: {
                    url: "https://scontent.xx.fbcdn.net/v/t1.0-1/p50x50/18057110_194133167766495_4123816583005617544_n.jpg?oh=7dc367a88a4d28f4f84137f9007f847e&oe=59836C25"
    
                }
            }
            $rootScope.isAdmin = true;
            fakeResult.is_sys_admin = true;
            
            // fakeResult.email = "sjurowski+facebook@ucsd.edu";

            // // fakeResult.email = "10154674551822270+facebook@facebook.com";
            // fakeResult.first_name = "Sandon";
            // fakeResult.host = "bitnami-dreamfactory-df88";
            // fakeResult.id = 187959328383879;
            // // fakeResult.id = 29;
            // fakeResult.is_sys_admin = false;
            // fakeResult.last_login_date = "2016-12-13 21:04:47";
            // fakeResult.last_name = "Jurowski";
            // fakeResult.name = "Sandon Jurowski";
            // fakeResult.role = "rank-user";
            // fakeResult.role_id = 1;
            // fakeResult.session_id = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNjYzMDg3LCJleHAiOjE0ODE2NjY2ODcsIm5iZiI6MTQ4MTY2MzA4NywianRpIjoiYWQ2M2Q0OTI1MDRmNTJiYjBkMWZiZjJkNzAxMjQzNDMifQ.T-3B-jnz4d2Q2Q5rfN1ePF7ujin982gzPYbRwhLo9Uc";
            // fakeResult.session_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjI5LCJ1c2VyX2lkIjoyOSwiZW1haWwiOiIxMDE1NDY3NDU1MTgyMjI3MCtmYWNlYm9va0BmYWNlYm9vay5jb20iLCJmb3JldmVyIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2FwaS5yYW5rLXguY29tXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNDgxNjYzMDg3LCJleHAiOjE0ODE2NjY2ODcsIm5iZiI6MTQ4MTY2MzA4NywianRpIjoiYWQ2M2Q0OTI1MDRmNTJiYjBkMWZiZjJkNzAxMjQzNDMifQ.T-3B-jnz4d2Q2Q5rfN1ePF7ujin982gzPYbRwhLo9Uc";

            // console.log("oauth fake setting", fakeResult);
            // $http.defaults.headers.common['X-DreamFactory-Session-Token'] = fakeResult.session_token;

            $cookies.session_token = fakeResult.session_token;

            $rootScope.user = fakeResult;

            try {
                window.localStorage.user = JSON.stringify(fakeResult);

                // returning just "fakeResult" doesn't preserve the details
                return {
                    email: fakeResult.email,
                    first_name: fakeResult.first_name,
                    host: fakeResult.host,
                    id: fakeResult.id,
                    is_sys_admin: fakeResult.is_sys_admin,
                    last_login_date: fakeResult.last_login_date,
                    last_name: fakeResult.last_name,
                    name: fakeResult.name,
                    role: fakeResult.role,
                    role_id: fakeResult.role_id,
                    session_id: fakeResult.session_id,
                    session_token: fakeResult.session_token
                };
            } catch (e) {}

        }
        // end sgj portal.works




    }
})();
(function () {
    'use strict';

    angular.module('login', [
        // Angular modules 
        //'ngResource',
        'ngCookies',

        // Custom modules 

        // 3rd Party Modules
        'ui.router'
    ])

    .run(['$rootScope', function ($rootScope) {

        try {
            $rootScope.user = JSON.parse(window.localStorage.user);

            if ($rootScope.user) {
                $rootScope.isLoggedIn = true;
            }
            if ($rootScope.user.is_sys_admin){
                $rootScope.isAdmin = true;
            }
        } catch (e) { };
    }])

    .config(function() {

        // Set your appId through the setAppId method or
        // use the shortcut in the initialize method directly
        //FacebookProvider.init('582752768556573');
    })
})();

(function () {
    'use strict';

    angular
        .module('login')
        .factory('httpInterceptor', httpInterceptor);

    httpInterceptor.$inject = ['$location', '$q', '$injector', 'INSTANCE_URL'];

    function httpInterceptor($location, $q, $injector, INSTANCE_URL) {
        var service = {
            request: request,
            responseError: responseError
        };

        return service;

        function request(config) {

            // Append instance url before every api call
            if (config.url.indexOf('/api/v2') > -1) {
                config.url = INSTANCE_URL + config.url;
            };

            // Append instance url before every api call
            if (config.url.indexOf('api.instagram.com') > -1) {
                config.headers.useXDomain = true;
                config.headers.common = 'Content-Type: application/json';
                delete config.headers.common['X-Requested-With'];
                delete config.headers['X-DreamFactory-Session-Token'];
                delete config.headers['X-Dreamfactory-API-Key'];

            };
            // delete x-dreamfactory-session-token header if login
            if (config.method.toLowerCase() === 'post' && config.url.indexOf('/api/v2/user/session') > -1) {
                delete config.headers['X-DreamFactory-Session-Token'];
            }

            return config;
        }

        function responseError(result) {
            
            //console.log("result", result);

            // handle redirections for facebook login
            if (result.status == 302) {

                //console.log("result", result);
                $location.path('/login');
                return $q.reject(result);
            }

            // If status is 401 or 403 with token blacklist error then redirect to login
            if (result.status === 401 || (result.status === 403 && result.data.error.message.indexOf('token') > -1)) {
                $location.path('/login');
            }

            return $q.reject(result);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('login')
        .controller('register', register);

    register.$inject = ['$location', '$rootScope', 'login']; 

    function register($location, $rootScope, login) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'register';

        // Members
        vm.username = '';
        vm.password = '';
        vm.confirm = '';
        vm.firstName = '';
        vm.lastName = '';
        vm.message = '';

        // Methods
        vm.register = register;
        vm.signIn = signIn;

        activate();

        function activate() {

            $rootScope.isLoggedIn = false;
        }

        function register() {

            console.log("register", register);
            login.register({
                email: vm.username,
                password: vm.password,
                first_name: vm.firstName || 'Address',
                last_name: vm.lastName || 'Book'
            }).then(function () {
                $location.path('/bizlogin');
            }, function (error) {

                vm.message = error.Message;
                console.log("Error: ", error);
            });
        }

        function signIn() {

            $location.path('/bizlogin');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('login')
        .controller('login', login);

    login.$inject = ['$location', '$window', '$rootScope', 'login', 'dialog', '$state', '$cookies','$http', '$facebook', 'fbusers', 'InstagramService'];

    function login($location, $window, $rootScope, login, dialog, $state, $cookies, $http, $facebook, fbusers, InstagramService) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'login';

        // Members
        vm.username = '';
        vm.password = '';
        vm.code = '';
        vm.isProgressing = false;
        
        // Methods
        vm.submit = submit;
        vm.register = register;
        vm.redirectForFacebook = redirectForFacebook;
        vm.whyFacebookDialog = whyFacebookDialog;
        vm.facebookLogin = facebookLogin;
        vm.goBack = goBack;

        function facebookLogin(){
            login.facebookSDKLogin();
        }

        $rootScope.$on('redirectAfterLogin', function () {
            redirectToState();
        });

        // Only use on localhost to fake a FB login
        /*
        if (window.location.hostname == "localhost") {
          console.log("server is: " + window.location.hostname)
          console.log("let's fake your user as an FB login")
          login.setFakeLocalUser();
        }*/

        if ($rootScope.isLoggedIn) $state.go('cwrapper');
        // else activate();

        function activate() {

            //vm.response = parseResults();
            var queryString = location.search;


            var idx = queryString.lastIndexOf("?");

            if (idx >= 0) {
                queryString = queryString.substr(idx + 1);
            }

            if (queryString) {
                //vm.code = vm.response.code;
                
                vm.isProgressing = true;
                
                login.oauthWithFacebook(queryString)
                    .then(function (result) {

                        var currentUserLatitude = $cookies.get('currentUserLatitude');
                        var currentUserLongitude = $cookies.get('currentUserLongitude');

                        if (currentUserLatitude && currentUserLongitude) {
                            $rootScope.currentUserLatitude = currentUserLatitude;
                            $rootScope.currentUserLongitude = currentUserLongitude;
                            $rootScope.coordsRdy = true;
                            $rootScope.$emit('coordsRdy');
                        }

                        if ($rootScope.isLoggedIn) redirectToState();
    
                    }, function () {
                        vm.isProgressing = false;
                    });
            }

            console.log("vm.code", vm.code);
            $rootScope.isLoggedIn = false;
            $rootScope.isAdmin = false;
            $rootScope.dataAdmin = false;
            $rootScope.$emit('adminCredentials');

        }

        function submit() {

            console.log("submit");
            login.initiate({
                email: vm.username,
                password: vm.password
            }).then(function () {
                $rootScope.isLoggedIn = true;

                console.log("isLoggedIn", $rootScope.isLoggedIn);
                $location.path('/');
            })
        }

        function redirectToState(){
            
            var statename = $cookies.get('statename');
            var statenum = $cookies.get('statenum');

            if (statename == 'rankSummary' || statename == 'answerDetail') {
                $state.go(statename, { index: statenum });
            }
            else {
                $state.go('cwrapper');
            }
        }

        function redirectForFacebook() {

            login.loginWithFacebook()
                .then(function (result) {
                    console.log("result @loginWithFacebook - ", result);
                    $window.location = result.url;
                });
        }

        function parseResults() {

            var queryString = location.search;

            console.log("queryString", queryString);
            var idx = queryString.lastIndexOf("?");

            if (idx >= 0) {
                queryString = queryString.substr(idx + 1);
            }

            var params = {},
                regex = /([^&=]+)=([^&]*)/g,
                m;

            var counter = 0;

            while (m = regex.exec(queryString)) {
                params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
                if (counter++ > 50) {

                    return {
                        error: "Response exceedded expected number of parameters"
                    }
                }
            }

            for (var proper in params) {
                return params;
            }
        }

        function register() {
            $location.path('/register');
        }

        function goBack() {
            $state.go('cwrapper');
        }

        function whyFacebookDialog() {
            dialog.getDialog('whyFacebook');
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('login')
        .controller('bizlogin', bizlogin);

    bizlogin.$inject = ['$location', '$window', '$rootScope', 'login', 'dialog', 'userDetail','$state'];

    function bizlogin($location, $window, $rootScope, login, dialog, userDetail,$state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'bizlogin';

        // Members
        vm.username = '';
        vm.password = '';
        vm.code = '';
        vm.isProgressing = false;

        // Methods
        vm.submit = submit;

        activate();

        function activate() {

            //vm.response = parseResults();
            var queryString = location.search;


            var idx = queryString.lastIndexOf("?");

            if (idx >= 0) {
                queryString = queryString.substr(idx + 1);
            }

            if (queryString) {
                //vm.code = vm.response.code;

                vm.isProgressing = true;
                login.oauthWithFacebook(queryString)
                    .then(function (result) {

                        $rootScope.isLoggedIn = true;

                        console.log("isLoggedIn", $rootScope.isLoggedIn);

                        //$location.path('/');
                        $state.go('cwrapper', {}, {location: 'replace'});

                    },function () {
                        vm.isProgressing = false;
                    });
            }

            console.log("vm.code bizlogin --", vm.code);
            $rootScope.isLoggedIn = false;

        }

        function submit() {

            console.log("bizlogin - submit");
            login.initiate({
                email: vm.username,
                password: vm.password
            }).then(function () {
                $rootScope.isLoggedIn = true;

                console.log("isLoggedIn", $rootScope.isLoggedIn);
                $state.go('cwrapper', {}, {location: 'replace'});
            })
        }

        function parseResults() {

            var queryString = location.search;

            console.log("queryString", queryString);
            var idx = queryString.lastIndexOf("?");

            if (idx >= 0) {
                queryString = queryString.substr(idx + 1);
            }

            var params = {},
                regex = /([^&=]+)=([^&]*)/g,
                m;

            var counter = 0;

            while (m = regex.exec(queryString)) {
                params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
                if (counter++ > 50) {

                    return {
                        error: "Response exceedded expected number of parameters"
                    }
                }
            }

            for (var proper in params) {
                return params;
            }
        }


   }
})();

angular.module('app').directive("userDetailModal",
    ["$rootScope", "userDetail", "dialog", function ($rootScope, userDetail, dialog) {
        'use strict';
        return {
            restrict: "E",
            templateUrl: "app/login/partials/add-user-detail.html",
            link: function ($scope, element, attrs, ngModel) {

                $scope.maxDate = moment().format('YYYY-MM-DD');

                $rootScope.openUserDetailModal = function () {

                    if ($rootScope.user) {
                        //select default options for gender as male
                        $rootScope.user.gender = "Male";
                        $rootScope.user.birth_date = '';
                    }
                    openModal("#addUserDetailModal");

                };

                /**
                 * Function to call service for adding user detail
                 * on success change local storage object for current user
                 */
                $rootScope.addUserDetail = function () {

                    userDetail.addUserDetail().then(function (result) {

                        userDetail.getUserDetail().then(function (result) {

                            if (Object.keys(result).length == 0) {

                                $rootScope.openUserDetailModal();

                            } else {
                                $rootScope.user.age = calculateAge(new Date(result[0].birth_date));
                                $rootScope.user.gender = result[0].gender;
                                $rootScope.user.birth_date = result[0].birth_date;

                                try {
                                    window.localStorage.user = JSON.stringify($rootScope.user);
                                } catch (e) {
                                }
                            }

                        });
                        closeModal("#addUserDetailModal");
                    });
                };

                // Dialog - Why this information is required
                $rootScope.whyThisInfoDialog = function () {

                    dialog.getDialog('whyUserData');

                };

                if ($rootScope.user) {
                    if (!$rootScope.user.birth_date || !$rootScope.user.gender)
                        $rootScope.openUserDetailModal();
                }
            }
        }
    }]);
(function () {
    'use strict';

    var app = angular.module('login');

    // Configure the states and state resolvers
    app.config(['$stateProvider', '$urlRouterProvider', stateConfigurator]);

    function stateConfigurator($stateProvider, $urlRouterProvider) {

        var states = [
            {
                name: 'login',
                url: '/login',
                templateUrl: 'app/login/partials/login.html',
                controller: 'login as vm'
            },
            {
                name: 'bizlogin',
                url: '/bizlogin',
                templateUrl: 'app/login/partials/bizlogin.html',
                controller: 'bizlogin as vm'
            },
            {
                name: 'register',
                url: '/register',
                templateUrl: 'app/login/partials/register.html',
                controller: 'register as  vm'
            }
        ];

        $(states).each(function () {

            $stateProvider.state(this);
        });
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('color', color);

    color.$inject = ['$http', '$q', '$rootScope'];

    function color($http, $q, $rootScope) {

        var service = {
            shadeColor: shadeColor,
            hsl2rgb: hsl2rgb,
            hue2rgb: hue2rgb,
            defaultRankColor: defaultRankColor
        };

        return service;
        //Color must be on format '#AA00BB'
        function shadeColor(color, percent) {

            if (color.charAt(0) != '#'){
                if (color == 'red') color = '#ff0000';
                else if (color == 'black') color = '#000000';
                else if (color == 'grey' || color == 'gray') color = '#808080';
                else if (color == 'lightgrey' || color == 'lightgray') color = '#d3d3d3';
                else if (color == 'darkgrey' || color == 'darkgray') color = '#a9a9a9';
                else if (color == 'green') color = '#008000';
                else if (color == 'brown') color = '#a52a2a';
                else if (color == 'blue') color = '#0000ff';
                else if (color == 'white') color = '#ffffff';
                else if ($rootScope.DEBUG_MODE) console.log("Dont know what color is ", color);
            }

            var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;
            return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
        }

        function hsl2rgb(hsl) {
            var a, b, g, h, l, p, q, r, ref, s;
            //if (isString(hsl)) {
                //if (!hsl.match(Color.HSL_REGEX)) {
                //    return;
                //}
                ref = hsl.match(/hsla?\((.+?)\)/)[1].split(',').map(function (value) {
                    value.trim();
                    return parseFloat(value);
                }), h = ref[0], s = ref[1], l = ref[2], a = ref[3];
            //} else if ((isObject(hsl)) && (hasKeys(hsl, ['h', 's', 'l']))) {
            //    h = hsl.h, s = hsl.s, l = hsl.l, a = hsl.a;
            //} else {
            //    return;
            //}
            h /= 360;
            s /= 100;
            l /= 100;
            if (s === 0) {
                r = g = b = l;
            } else {
                q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return '#' + Math.round(r * 255).toString(16) + Math.round(g * 255).toString(16) + Math.round(b * 255).toString(16);
        }

        function hue2rgb(p, q, t){
                if(t < 0) t += 1;
                if(t > 1) t -= 1;
                if(t < 1/6) return p + (q - p) * 6 * t;
                if(t < 1/2) return q;
                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                return p;
        }

        function defaultRankColor(x){
             //Determine background color for rank of rankofday
             var bc = '';
             var fc = '';
             if (x.tags == undefined || x.tags == null ) {
                 x.tags = '';
                 //console.log("@color - ", x);
             }

                    if (x.tags.indexOf('food')>-1) {bc = 'brown'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('lifestyle')>-1) {bc = '#008080'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('social')>-1) {bc = '#4682b4'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('city')>-1) {bc = 'gray'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('neighborhood')>-1) {bc = 'gray'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('politics')>-1) {bc = '#595959'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('sports')>-1) {bc = '#4682b4'; fc = '#f8f8ff';} 
                    else if (x.tags.indexOf('beauty')>-1) {bc = '#a3297a'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('health')>-1) {bc = 'green'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('services')>-1) {bc = '#c68c53'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('technology')>-1) {bc = 'gray'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('dating')>-1) {bc = '#b22222'; fc = '#f8f8ff';}
                    else if (x.tags.indexOf('personalities')>-1) {bc = '#c68c53'; fc = '#f8f8ff';}
                    else {bc = 'gray'; fc = '#f8f8ff';}

                    return [bc, fc];
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('city', city);

    city.$inject = ['$http', '$q', '$rootScope'];

    function city($http, $q, $rootScope) {

        // Members
        var _cities = [];
        var baseURI = '/api/v2/mysql/_table/cities';

        var service = {
            getCities: getCities
        };

        return service;

        function getCities(forceRefresh) {

            if (_areCitiesLoaded() && !forceRefresh) {

                return $q.when(_cities);
            }

            var url = baseURI;

            return $http.get(url).then(citySucceeded, _cityFailed);

            function citySucceeded(result) {

                return _cities = result.data.resource;
            }

        }

        function _areCitiesLoaded() {

            return _cities.length > 0;
        }

        function _cityFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('navbar', navbar);

    navbar.$inject = ['$location', '$rootScope', 'login', '$state', '$scope',
        'city', '$cookies', '$http', 'GOOGLE_API_KEY', 'dialog','getgps', 'useraccnt'];

    function navbar($location, $rootScope, login, $state, $scope,
        city, $cookies, $http, GOOGLE_API_KEY, dialog, getgps, useraccnt) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'navbar';

        // Members
        vm.user = $rootScope.user;
        vm.isLoggedIn = $rootScope.isLoggedIn ? $rootScope.isLoggedIn : false;

        // Methods
        vm.logout = logout;
        vm.goToLogin = goToLogin;
        vm.gotoAbout = gotoAbout;
        vm.gotomybusiness = gotomybusiness;
        vm.gotofavs = gotofavs;
        vm.gotoFeedback = gotoFeedback;
        vm.gotoTour = gotoTour;
        vm.gotoHome = gotoHome;
        vm.selCity = selCity;
        vm.gotoAdmin = gotoAdmin;
        vm.goPromoterConsole = goPromoterConsole;
        vm.gotoFileUpload = gotoFileUpload;
        vm.gotoCustomer = gotoCustomer;
        vm.openCitySelection = openCitySelection;
        vm.goWarning = goWarning;
        vm.goCoords = goCoords;
        vm.isAdmin = ($rootScope.isAdmin || $rootScope.dataAdmin || $rootScope.modAdmin);

        if ($rootScope.coordsRdy == undefined) $rootScope.coordsRdy = false;
        $rootScope.loadFbnWhenCoordsRdy = false;

        //Geolocation options
        var geoOptions = {};

        vm.warning = false;

        var geoLocationListener = $rootScope.$on('getLocation', function (e) {
            //console.log("navbar rx emitGetLocation");
            autoDetectCity();
        });
        var coordsRdyListener = $rootScope.$on('coordsRdy', function (e) {
            showCoordsIcon();
        });

        var adminCredentialsListener = $rootScope.$on('adminCredentials', function(e) {
            vm.isAdmin = ($rootScope.isAdmin || $rootScope.dataAdmin || $rootScope.modAdmin );
        });

        var showWarningListener = $rootScope.$on('showWarning', function (e) {
            if ($rootScope.DEBUG_MODE) console.log("rx showWarning");
            showWarningsIcon();
        });

        var hideWarningListener = $rootScope.$on('hideWarning', function (e) {
            if ($rootScope.DEBUG_MODE) console.log("rx clearWarning");
            hideWarningsIcon();
        });

        var useAddressListener = $rootScope.$on('useAddress', function (e, address) {
            //console.log("use address ----aaaaa");
            var obj = {};
            obj.location = address.address;
            obj.lat = 0;
            obj.lng = 0;
            $rootScope.coordForUSer = true;
            getgps.getLocationGPS(obj);
        });

        var userDataLoadedListener = $rootScope.$on('userDataLoaded', function (e) {
            //if ($rootScope.isLoggedIn && $rootScope.userpromoter.length > 0) {
             if ($rootScope.isLoggedIn) {   
                vm.isPromoter = true;
                $rootScope.isPromoter = true;
                if ($rootScope.DEBUG_MODE) console.log("User is promoter");
            }
            else {
                $rootScope.isPromoter = false;
                vm.isPromoter = false;
            }
        });

        var userAccountsLoadedListener = $rootScope.$on('userAccountsLoaded', function (e) {
            if ($rootScope.isLoggedIn && $rootScope.useraccnts.length > 0) {
                vm.hasBusiness = true;
                $rootScope.hasBusiness = true;
                if ($rootScope.DEBUG_MODE) console.log("User has business");
            }
            else {
                $rootScope.hasBusiness = false;
                vm.hasBusiness = false;
            }
        }); 

        $scope.$on('$destroy',geoLocationListener);
        $scope.$on('$destroy',coordsRdyListener);
        $scope.$on('$destroy',adminCredentialsListener);
        $scope.$on('$destroy',showWarningListener);
        $scope.$on('$destroy',hideWarningListener);
        $scope.$on('$destroy',useAddressListener);
        $scope.$on('$destroy',userDataLoadedListener);
        $scope.$on('$destroy',userAccountsLoadedListener);
        
        activate();

        function activate() {

            if ($rootScope.hasBusiness == undefined) vm.hasBusiness = false;
            else vm.hasBusiness = $rootScope.hasBusiness;

            if ($rootScope.isPromoter == undefined) vm.isPromoter = false;
            else vm.isPromoter = $rootScope.isPromoter;

            if ($rootScope.showWarning) showWarningsIcon();
            configGeolocation();

            vm.coordsRdy = $rootScope.coordsRdy;

            //Admin Credentials
            $rootScope.isAdmin = false;
            $rootScope.dataAdmin = false;
            if ($rootScope.isLoggedIn) {
                if ($rootScope.user.id == '1599427743409374') $rootScope.dataAdmin = true;
                if ($rootScope.user.id == '10104518570729893') $rootScope.isAdmin = true;
                if ($rootScope.user.id == '10214255239240099') $rootScope.contentAdmin = true;
                if ($rootScope.user.id == '1638806919478345') $rootScope.modAdmin = true;
                vm.isAdmin = ($rootScope.isAdmin || $rootScope.dataAdmin || $rootScope.modAdmin );
            }

            if ($rootScope.DEBUG_MODE) console.log("Navbar Loaded!");
            //console.log("isLoggedIn", !$rootScope.isLoggedIn)
            //console.log("user", $rootScope.user);
            //getCities();
            //detectLocation2();
        }

        function gotomybusiness() {
            //$stateProvider.state('app');
            // http://localhost:3006/#/mybiz
            // $state.go('mybiz');
/* 
            if (vm.isLoggedIn) {
              //double-check that a user account record exists
              var promise = useraccnt.adduseraccnt();
              promise.then(function(newId) {
                $state.go('mybiz');
              });

            } else {
              gotoHome();
            }
            
*/
            $rootScope.$emit('hideBar');
            $(".navbar-collapse").collapse('hide');
            $state.go('mybusiness');   
            $(".navbar-collapse").collapse('hide');         
        }

        function gotofavs() {
            $rootScope.$emit('hideBar');
            $(".navbar-collapse").collapse('hide');
            //$stateProvider.state('app');
            $state.go('favs');
        }

        function goPromoterConsole(){
            $rootScope.$emit('hideBar');
            $(".navbar-collapse").collapse('hide');
            $state.go('promoterconsole');
            $(".navbar-collapse").collapse('hide');
        }

        function gotoAbout() {
            $rootScope.$emit('hideBar');
            $(".navbar-collapse").collapse('hide');
            //$stateProvider.state('app');
            $state.go('about');
        }

        function gotoFileUpload() {
            //$stateProvider.state('app');
            $state.go('fileuploadtest');
        }

        function gotoAdmin() {
            //$stateProvider.state('app');
            $rootScope.$emit('hideBar');
            $(".navbar-collapse").collapse('hide');
            $state.go('admin');
        }

        function gotoFeedback() {
            $rootScope.fbmode = true;
            $state.go('cwrapper', {}, { reload: true });
        }

        function gotoTour() {
            dialog.tour();
            $(".navbar-collapse").collapse('hide');
        }

        function selCity(){
            dialog.getDialog('onlySanDiego');
        }

        function gotoHome() {
            //$rootScope.fbmode = false;
            //$rootScope.searchActive = false;
            //$rootScope.hidelogo = false;
            //$rootScope.inputVal = '';
            $rootScope.$emit('backToResults');
            //$state.go('cwrapper', {}, { reload: true });
            //if ($state.current.name != 'cwrapper') {
            //    $state.go('cwrapper',{main: true});
            //}
            //else 
        }

        function gotoCustomer() {
            //$stateProvider.state('app');
            $state.go('customer');
        }

        function goToLogin() {

            //Store current state
            $rootScope.stateName = $state.current.name;
            if ($rootScope.stateName == 'rankSummary') $rootScope.stateNum = $rootScope.cCategory.id;
            else if ($rootScope.stateName == 'answerDetail') $rootScope.stateNum = $rootScope.canswer.id;
            else $rootScope.stateNum = undefined;

            dialog.loginFacebook();
            //$state.go('login');
        }

        function logout() {

            login.logout().then(function () {

                vm.user = '';
                vm.isLoggedIn = false;
                vm.hasBusiness = false;
                vm.isPromoter = false;

                localStorage.clear();

                //$location.path('/');
                //$state.go('cwrapper', {}, { location: 'replace' });
                $rootScope.$emit('backToResults');
                $rootScope.$emit('userLoggedOut');
            });
        }

        /**
         * Open model for city selection
         */
        function openCitySelection() {
            openModal("#selectCityModal");
        }


        /**
         * This function get cities from API call only if cities is not already loaded
         */
        function getCities() {

            if (!$rootScope.cities) {
                city.getCities().then(function (response) {
                    $rootScope.cities = response;
                    autoDetectCity();
                });
            }

        }

        /**
         * Function to get current location of User based on navigator
         */
        $rootScope.getCurrentPositionOfUser = function () {


            geolocator.locate(geoOptions, function (err, location) {
                if (err) {
                    if ($rootScope.DEBUG_MODE) console.log('Error getting geolocation - ERROR(' + err.code + '): ' + err.message);
                    dialog.getDialog('errorGettingGeolocation');
                }
                else {
                    if ($rootScope.DEBUG_MODE) console.log(location);
                    setUserLatitudeLongitude(location);
                }
            });

            /*
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position){
                    setUserLatitudeLongitude(position);
                }, function(error){
                }, {maximumAge:60000, timeout:10000, enableHighAccuracy:true});
            }else{
                if ($rootScope.DEBUG_MODE) console.log('Geo location not supported.');
                dialog.getDialog('browserDoesntSupportGeolocation');
            }
            */
        };

        /**
         * Function to set latitude and longitude to $rootScope and Cookie
         * @param position
         */
        function setUserLatitudeLongitude(location) {

            if ($rootScope.DEBUG_MODE) 
                console.log("position.coords.latitude - ", location.coords.latitude);
            if ($rootScope.DEBUG_MODE) 
                console.log("position.coords.longitude - ", location.coords.longitude);
            /**
             * Set Latitude and Longitude from navigator to rootScope
             */
            $rootScope.currentUserLatitude = location.coords.latitude;
            $rootScope.currentUserLongitude = location.coords.longitude;

            /**
             * Set Latitude and Longitude to cookie
             */
            $cookies.put('currentUserLatitude', $rootScope.currentUserLatitude);
            $cookies.put('currentUserLongitude', $rootScope.currentUserLongitude);

            $rootScope.coordsRdy = true;
            showCoordsIcon();
            if ($rootScope.loadFbnWhenCoordsRdy) $state.go('rankSummary', { index: 11942 });

            /**
             * If user is logged in, then set latitude and longitude to user's object
             */
            if ($rootScope.isLoggedIn) {
                $rootScope.user.latitude = $rootScope.currentUserLatitude;
                $rootScope.user.longitude = $rootScope.currentUserLongitude;
                if ($rootScope.DEBUG_MODE) console.log("Geo Location is set for logged in user.");
            }
            if ($rootScope.DEBUG_MODE) 
                console.log("Geo Location is set for user.");
            if ($state.current.name == 'rankSummary') {
                $rootScope.$emit('coordsRdy');
            }
        }

        /**
         * This function detect City using geo location(lat,long)
         * Geo location works only on secure origins in Google Chrome
         */
        function autoDetectCity() {

            if ($rootScope.DEBUG_MODE) console.log("@autoDetectCity");

            geolocator.locate(geoOptions, function (err, location) {
                if (err) {
                    if ($rootScope.DEBUG_MODE) 
                        console.log('Error getting geolocation - ERROR(' + err.code + '): ' + err.message);
                    dialog.getDialog('errorGettingGeolocation');
                    }
                else {
                    if ($rootScope.DEBUG_MODE) 
                        console.log(location);
                    setUserLatitudeLongitude(location);
                }
            });

            /*
            geolocator.locate(options, setUserLatitudeLongitude(location),function (err) {
             console.log('Error getting geolocation - ERROR(' + err.code + '): ' + err.message);
             dialog.getDialog('errorGettingGeolocation');
            });

            /*
            var geocoder;
            geocoder = new google.maps.Geocoder();

            if (navigator.geolocation) {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(showPosition, function(err){
                        console.log('Error getting geolocation - ERROR(' + err.code + '): ' + err.message);
                        dialog.getDialog('errorGettingGeolocation');
                    });
                } else {
                    selectCity();
                }
            } else {
                selectCity();
            }

            function showPosition(position) {

                if ($rootScope.DEBUG_MODE) console.log("@showPosition - position -", position);

                var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

                setUserLatitudeLongitude(position);

                geocoder.geocode(
                    {'latLng': latlng},
                    function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                var add = results[0].formatted_address;
                                var value = add.split(",");

                                var count = value.length;
                                var country = value[count - 1];
                                var state = value[count - 2];
                                city = value[count - 3];
                                selectCity(city);
                            }
                            else {
                                selectCity();
                            }
                        }
                        else {
                            selectCity();
                        }
                    }
                );
            }*/

        }

        /**
         * This function match detected to available cities
         * if match is found then it select city, otherwise give options to select city
         * @param detectedCity
         */
        function selectCity(detectedCity) {

            if ($rootScope.selectedCity) {

            } else {
                var isCityInList = false;
                var cityObject = {};

                angular.forEach($rootScope.cities, function (city) {

                    if (city.name == detectedCity.trim() && city.is_active) {
                        isCityInList = true;
                        cityObject = city;
                    }

                });

                if (isCityInList == false) {
                    openModal("#selectCityModal");
                } else {
                    $rootScope.selectedCity = cityObject;
                    window.localStorage.selectedCity = JSON.stringify($rootScope.selectedCity);
                    $rootScope.$digest();
                }
            }
        }

        function configGeolocation() {

            geolocator.config({
                language: "en",
                google: {
                    version: "3",
                    key: GOOGLE_API_KEY
                }
            });

            geoOptions = {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumWait: 10000,     // max wait time for desired accuracy
                maximumAge: 0,          // disable cache
                desiredAccuracy: 30,    // meters
                fallbackToIP: true,     // fallback to IP if Geolocation fails or rejected
            };
        }

        function detectLocation() {
            var url = 'https://ipinfo.io/json';
            return $http.get(url, {}, {
                headers: {}
            }).then(function (result) {
                if ($rootScope.DEBUG_MODE) console.log("Result from ipinfo - ", result);
                var loc = result.data.loc.split(",");
                if ($rootScope.DEBUG_MODE) console.log("loc - ", loc);
                $rootScope.currentUserLatitude = loc[0];
                $rootScope.currentUserLongitude = loc[1];
            });
        }

        function detectLocation2() {
            var geobody = {};

            geobody.homeMobileCountryCode = 310;
            geobody.homeMobileNetworkCode = 38;
            geobody.considerIp = false;

            var url = 'https://www.googleapis.com/geolocation/v1/geolocate?key=' + 'AIzaSyDtDvBsex9Ytz1aWl5uET8MwjlmvEMTF70';
            return $http.post(url, {}, {
                headers: {},
                body: geobody
            }).then(function (result) {
                if ($rootScope.DEBUG_MODE) 
                    console.log("Result from google geolocate - ", result);

                //var loc = result.data.loc.split(",");
                //console.log("loc - ", loc);
                $rootScope.currentUserLatitude = result.data.location.lat;
                $rootScope.currentUserLongitude = result.data.location.lng;
            });
        }

        function showWarningsIcon(){
            vm.warning = true;
        }
        function hideWarningsIcon(){
            vm.warning = false;
        }
        function showCoordsIcon(){
            vm.coordsRdy = true;
        }

        function goWarning(){
            /*
            var accntname = '';
            var answerid = 0;
            var idx = 0;
            for (var i=0; i < $rootScope.useraccnts.length; i++){
                if ($rootScope.useraccnts[i].email != '') {
                       answerid = $rootScope.useraccnts[i].answer
                       break;
                }
             }
            idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf(answerid);
            console.log("$rootScope.useraccnts - ", $rootScope.useraccnts);
            console.log("idx - answerid - $rootScope.answers[idx].name -",idx,answerid);*/
           var idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf($rootScope.useraccnts[0].answer);
           dialog.askEmail($rootScope.answers[idx].name);
        }

        function goCoords(){
           dialog.askPermissionToLocate();
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .controller('layout', layout);

    layout.$inject = ['$location', '$rootScope', '$window', '$q', '$http', 'pvisits', '$cookies', '$scope','$timeout',
        'DEBUG_MODE', 'EMPTY_IMAGE', 'rankofday', 'answer', 'table', 'special', 'datetime', 'uaf', 'userdata', 'dialog',
        'matchrec', 'edit', 'useractivity', 'vrows', 'headline', 'cblock', 'catans', '$state', 'dataloader', 'setting', 'filter'];

    function layout($location, $rootScope, $window, $q, $http, pvisits, $cookies, $scope, $timeout,
        DEBUG_MODE, EMPTY_IMAGE, rankofday, answer, table, special, datetime, uaf, userdata, dialog,
        matchrec, edit, useractivity, vrows, headline, cblock, catans, $state, dataloader, setting, filter) {
        /* jshint validthis:true */

        //console.log("layout loading---------------------");
        var vm = this;
        vm.title = 'layout';
        vm.header = '';
        //-----SEO tags ----
        $scope.$parent.seo = {
            pageTitle: 'Rank-X',
            metaDescription: 'Rank-X creates collective rankings on everything in your city.'
        };

        //vm.searchRank = searchRank;

        //if ($rootScope.answers) vm.isLoading = false;
        //else
        vm.veilMsg = 'Just a moment, loading the best information about San Diego';
        vm.hidelogo = false;
        vm.getResults = getResults;
        vm.hideSearch = hideSearch;
        vm.gotoHome = gotoHome;
        vm.goAddRank = goAddRank;
        vm.quickFilter = quickFilter;

        vm.foodNearMe = false;
        if ($window.location.href.indexOf('rankSummary/food-near-me-9521') != -1) {
            vm.foodNearMe = true;
            vm.veilMsg = 'Just a moment, finding some delicious food...';
        }
        vm.dataready = false;
        vm.initready = false;
        vm.barIsActive = true;
        vm.childActive = false;
        vm.rodready = false;
        vm.showans = false;

        //Admin Methods
        vm.editRank = editRank;
        vm.viewRank = viewRank;
        vm.applyRule = applyRule;
        vm.selCityActive = false;
        vm.selectNh = selectNh;
        vm.clearNh = clearNh;
        vm.nhctrl = false;
        vm.nh = '';
        //vm.toggleSelCity = toggleSelCity;
        vm.showTrends = showTrends;
        //vm.scopeGeneral = scopeGeneral;
        //vm.scopeCity = scopeCity;
        //vm.childActive = false;

        vm.goPrivacyPolicy = goPrivacyPolicy;
        vm.goRankofDayConsole = goRankofDayConsole;

        jQuery(document).ready(function () {
            var offset = 250;
            var duration = 300;

            jQuery(window).scroll(function () {
                if (jQuery(this).scrollTop() > offset) {
                    jQuery('.back-to-top').fadeIn(duration);
                } else {
                    jQuery('.back-to-top').fadeOut(duration);
                }
            });

            jQuery('.back-to-top').click(function (event) {
                event.preventDefault();
                jQuery('html, body').animate({ scrollTop: 0 }, duration);
                return false;
            })
        });
        /* Start Filtering feature by Roy */

        vm.showFilters = false;
        vm.toggleFilterBox = function () {
            vm.showFilters = !vm.showFilters;
        }

        vm.hideFilterBox = function () {
            vm.showFilters = false;
        }
/*
        vm.selectNh = function (item, data) {
            vm.filterOptions.isCity = false;
            vm.filterOptions.isNh = true;
        }
*/
/*
        vm.selectTopic = function (topic) {
            if (topic == "All") {
                if (vm.filterOptions.isAllTopics == false) {
                    vm.filterOptions.isAllTopics = true;
                    vm.filterOptions.ctopics = angular.copy(vm.allTopics);
                } else {
                    vm.filterOptions.isAllTopics = false;
                    vm.filterOptions.ctopics = [];
                }

            } else {
                if (vm.filterOptions.ctopics.indexOf(topic) !== -1) {
                    vm.filterOptions.isAllTopics = false;
                    vm.filterOptions.ctopics.splice(vm.filterOptions.ctopics.indexOf(topic), 1);
                } else {
                    vm.filterOptions.ctopics.push(topic);
                    var isAll = vm.allTopics.filter(function (topic) { return vm.filterOptions.ctopics.indexOf(topic) == -1 });
                    if (isAll.length == 0) {
                        vm.filterOptions.isAllTopics = true;
                    }
                }
            }
        }
*/
/*
        vm.switchLocationScope = function (loc) {
            if (loc == 'city') {
                vm.filterOptions.isCity = true;
                vm.filterOptions.isNh = false;
            } else {

                vm.filterOptions.isCity = false;
                vm.filterOptions.isNh = true;
            }
        }

        vm.applyFilters = function () {
            if (vm.filterOptions.ctopics.length == 0) {
                alert("Please select at least 1 topic.");
                return;
            }
            filter.saveFilterOptions(vm.filterOptions);
            $rootScope.$emit('filterOptionChanged');
            vm.showFilters = !vm.showFilters;
        }
        /* End Filtering feature by Roy */

        var refreshRanksListener = $rootScope.$on('refreshRanks', function () {
            if ($state.current.name == 'cwrapper') {
                vm.hidelogo = $rootScope.hidelogo;
            }
        });
        var showLogoListener = $rootScope.$on('showLogo', function () {
            if ($state.current.name == 'rankSummary' || $state.current.name == 'answerDetail') {
                //vm.hidelogo = false;
            }
        });
        var userDataLoadedListener = $rootScope.$on('userDataLoaded', function () {
            if ($rootScope.DEBUG_MODE) console.log("RX - userDataLoaded");
            loadingDone();
        });
        var homeDataLoadedListener = $rootScope.$on('homeDataLoaded', function () {
            if ($rootScope.DEBUG_MODE) console.log("RX - homeDataLoaded");
            vm.isLoading = false;
            vm.dataready = true;
            prepareNewCatansOptions();
            if ($rootScope.isLoggedIn) userdata.pullFavoriteData();
        });
        var rankDataLoadedListener = $rootScope.$on('rankDataLoaded', function () {
            if ($rootScope.DEBUG_MODE) console.log("RX - rankDataLoaded");
            if ($rootScope.initalHomeDataLoaded != true) {
                dataloader.getInitialData();
                if ($rootScope.isLoggedIn) userdata.pullFavoriteData();
            }
            loadingDone();
        });
        var answerDataLoadedListener = $rootScope.$on('answerDataLoaded', function () {
            if ($rootScope.DEBUG_MODE) console.log("RX - answerDataLoaded");
            if ($rootScope.initalHomeDataLoaded != true) {
                dataloader.getInitialData();
                if ($rootScope.isLoggedIn) userdata.pullFavoriteData();
            }
            loadingDone();
        });
        var initialHomeDataLoadedListener = $rootScope.$on('initalHomeDataLoaded', function () {
            if ($rootScope.DEBUG_MODE) console.log("RX - initialHomeLoaded");
            $rootScope.initalHomeDataLoaded = true;
            vm.initready = true;
            loadingDone();
        });
        var mainViewListener = $rootScope.$on('mainView', function (event) {
                vm.childActive = false; 
                gotoHome();
        });
        var hideSearchBarListener = $rootScope.$on('hideBar', function (event) {
                vm.childActive = true; 
                vm.barIsActive = false;
        });
        var backtoResultsListener = $rootScope.$on('backToResults', function (event) {
                    vm.childActive = false; 
                    vm.barIsActive = true;
                    $rootScope.cCategory = undefined;
                    backToResults();
                //}      
        });

        var userLoggedOutListener = $rootScope.$on('userLoggedOut', function (event) {
                vm.isAdmin = false;
        });
        
        var rodReadyListener = $rootScope.$on('rodReady', function (event) {
                vm.rodready = true;
                if ($rootScope.rankofday != undefined) {
                    if ($rootScope.DEBUG_MODE) console.log("$rootScope.rankofday - ", $rootScope.rankofday);
                    dataloader.pulldata('ranks', $rootScope.rankofday);
                }
                //console.log("$rootScope.rankofday - ", $rootScope.rankofday);
        });
        /*
        var setScopeListener = $rootScope.$on('setScope', function () {
            if ($rootScope.SCOPE == 1) {vm.scopeIsGeneral = true; vm.scopeIsCity = false; }
            if ($rootScope.SCOPE == 2) {vm.scopeIsGeneral = false; vm.scopeIsCity = true; } 
        });
        */
        var locationChangeListener = $rootScope.$on('$locationChangeSuccess', function() {
            if (window.location.href.indexOf('home') > -1) { vm.childActive = false; vm.barIsActive = true; }
            if (window.location.href.indexOf('rankSummary') > -1) { vm.childActive = true; vm.barIsActive = false; }
            if (window.location.href.indexOf('answerDetail') > -1) { vm.childActive = true; vm.barIsActive = false; }
            if (window.location.href.indexOf('trends') > -1) { vm.childActive = true; vm.barIsActive = false; }
        });   

        //$scope.$on('$destroy',setScopeListener);
        $scope.$on('$destroy',userLoggedOutListener);
        $scope.$on('$destroy',backtoResultsListener);
        $scope.$on('$destroy',hideSearchBarListener);
        $scope.$on('$destroy',mainViewListener);
        $scope.$on('$destroy',initialHomeDataLoadedListener);
        $scope.$on('$destroy',answerDataLoadedListener);
        $scope.$on('$destroy',rankDataLoadedListener);
        $scope.$on('$destroy',homeDataLoadedListener);
        $scope.$on('$destroy',userDataLoadedListener);
        $scope.$on('$destroy',showLogoListener);
        $scope.$on('$destroy',refreshRanksListener);
        $scope.$on('$destroy',rodReadyListener);

        if ($window.innerWidth < 512) {
            vm.logoimage = "/assets/images/rankxlogosd2_sm.png";
            $rootScope.sm = true;
            vm.sm = true;
            $rootScope.DISPLAY_XSMALL = true;
            $rootScope.numInitItems = 12;
        }
        else {
            vm.logoimage = "/assets/images/rankxlogosd2_sm.png";
            $rootScope.sm = false;
            vm.sm = false;
        }

        if (($window.innerWidth >= 512) && ($window.innerWidth < 768)) {
            $rootScope.DISPLAY_SMALL = true;
            $rootScope.numInitItems = 12;
        }

        $rootScope.md = false;
        if (($window.innerWidth >= 768) && ($window.innerWidth < 991)) {
            $rootScope.md = true;
            $rootScope.DISPLAY_MEDIUM = true;
            $rootScope.numInitItems = 16;
        }
        if ($window.innerWidth > 991) {
            $rootScope.DISPLAY_LARGE = true;
            $rootScope.numInitItems = 24;
        }

        //TODO: Would like to add this abstract template, but dont know how
        $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
            vm.hideFilterBox();
            $rootScope.previousState = from.name;

        });

        var nidx = 0;

        var tourviewed = $cookies.get('tourviewed');
        if (tourviewed == undefined) tourviewed = false;

        activate();
        
        function activate() {
            //****TEMP CODE, ENable for Admin Functions*****************
            /*
            $rootScope.isLoggedIn = true;
            $rootScope.user = {};
            $rootScope.user.name = "Andres Moctezuma";
            $rootScope.user.first_name = 'Andres';
            $rootScope.user.last_name = 'Moctezuma';
            $rootScope.user.id = "10104518570729893";
            //---*/

            $rootScope.isAdmin = false;
            $rootScope.dataAdmin = false;
            if ($rootScope.isLoggedIn) {
                // @rootScope.isAdmin = true;
                // @rootScope.dataAdmin = true;
                // @rootScope.contentAdmin = true;
                // @rootScope.modAdmin = true;

                if ($rootScope.user.id == '1599427743409374') $rootScope.dataAdmin = true;
                if ($rootScope.user.id == '10104518570729893') $rootScope.isAdmin = true;
                if ($rootScope.user.id == '10214255239240099') $rootScope.contentAdmin = true;
                if ($rootScope.user.id == '1638806919478345') $rootScope.modAdmin = true;
            }
            vm.isAdmin = $rootScope.isAdmin || $rootScope.contentAdmin;
            $rootScope.$emit('adminCredentials');

            $rootScope.DEBUG_MODE = DEBUG_MODE;
            $rootScope.EMPTY_IMAGE = EMPTY_IMAGE;
            //$rootScope.SCOPE = 2; // This scope number is for city of San Diego.

            $rootScope.facebookAppId = ''; //1102409523140826'';
            $rootScope.facebookUrl = 'https://www.facebook.com/Rank-X-San-Diego-582174448644554';

            //$timeout(loadingDone, 1000);
            if ($rootScope.dataIsLoaded == undefined) {
                vm.isLoading = true;
                //vm.nh = 'hang in there';
                loadJSON();
                //if (!tourviewed && !$rootScope.isLoggedIn) dialog.tour();
            }
            else loadData();

            //Call userdata functions, If user is not logged in, functions do not execute.
            userdata.loadUserData();        //load user data (votes and activities)
            userdata.loadUserAccount();     //load user business account

            //Determine if user is using Facebook browser
            $rootScope.isFacebookApp = isFacebookApp();

            if ($rootScope.DEBUG_MODE) console.log("Layout Loaded!");

        }

        function loadJSON(){
            var p0 = $http.get('../../../assets/fields.json').then(function (response) {
                $rootScope.typeSchema = response.data;
                loadData();
            });

            $http.get('../../../assets/dialogs.json').then(function (response) {
                $rootScope.dialogs = response.data;
            });

            $http.get('../../../assets/foodans.json').then(function (response) {
                $rootScope.foodans = response.data;
            });
        }

        function loadData() {
           
            //vm.allTopics = ['LifeStyle', 'Social', 'Sports', 'Food', 'Beauty & Fashion', 'Family', 'Technology', 'Dating', 'City', 'Services', 'Health', 'Celebrities'];
            //dataloader.getInitialData();    
            getDestination();
            //dataloader.getpagevisitdata();
            setting.getSetting();    

        }

        function loadingDone() {
            if ($rootScope.pageDataLoaded == undefined) $rootScope.pageDataLoaded = false;
            if ($rootScope.userDataLoaded == undefined) $rootScope.userDataLoaded = false;

            if (window.location.href.indexOf('rankSummary') > -1)
                //$rootScope.dataIsLoaded = $rootScope.rankSummaryDataLoaded && $rootScope.userDataLoaded;
                $rootScope.dataIsLoaded = $rootScope.userDataLoaded;

            else if (window.location.href.indexOf('answerDetail') > -1)
                $rootScope.dataIsLoaded = $rootScope.userDataLoaded;
            
            /*
            else if (window.location.href.indexOf('favs') > -1)
                $rootScope.dataIsLoaded = $rootScope.answerDetailLoaded && $rootScope.rankSummaryDataLoaded &&
                    $rootScope.pageDataLoaded && $rootScope.userDataLoaded;
            else if (window.location.href.indexOf('mybusiness') > -1)
                $rootScope.dataIsLoaded = $rootScope.answerDetailLoaded;
            else if (window.location.href.indexOf('promoteconsole') > -1)
                $rootScope.dataIsLoaded = $rootScope.answerDetailLoaded && $rootScope.rankSummaryDataLoaded &&
                    $rootScope.pageDataLoaded && $rootScope.userDataLoaded;
            else if (window.location.href.indexOf('home') > -1)
                $rootScope.dataIsLoaded = $rootScope.initalHomeDataLoaded;
            else $rootScope.dataIsLoaded = $rootScope.pageDataLoaded && $rootScope.userDataLoaded;*/
                else {
                    $rootScope.dataIsLoaded = $rootScope.initalHomeDataLoaded;
                    $state.go('cwrapper');
                }

            vm.isLoading = !$rootScope.dataIsLoaded;
            if ($rootScope.DEBUG_MODE) console.log("@loadingDone - $rootScope.dataIsLoaded -", $rootScope.dataIsLoaded);
            if ($rootScope.DEBUG_MODE) console.log("@loadingDone - $rootScope.pageDataLoaded -", $rootScope.pageDataLoaded);
            if ($rootScope.DEBUG_MODE) console.log("@loadingDone - $rootScope.userDataLoaded -", $rootScope.userDataLoaded);

        }

        function isFacebookApp() {
            var ua = navigator.userAgent || navigator.vendor || window.opera;
            //console.log("@isFacebook - ua - ", ua);
            return (ua.indexOf("FBAN") > -1) || (ua.indexOf("FBAV") > -1);
        }

        function goPrivacyPolicy() {
            vm.childActive = true; 
            vm.barIsActive = false;
            $state.go('privacypolicy');
        }

        function goRankofDayConsole() {
            vm.childActive = true; 
            vm.barIsActive = false;
            $state.go('rodconsole');
        }
        
        function getResults() {

            $rootScope.inputVal = vm.val;
            if (vm.val.length == 1) vm.showans = true;
            $rootScope.searchActive = true;
            vm.searchActive = $rootScope.searchActive;
            vm.childActive = !$rootScope.searchActive;
        }

        function hideSearch() {
            vm.searchActive = false;
            vm.childActive = true; 
            vm.barIsActive = false;
        }

        function gotoHome() {
            //$rootScope.searchActive = true;
            vm.searchActive = true;
            vm.childActive = false; 
            vm.barIsActive = true;
            if ($state.current.name == 'cwrapper') {
             $rootScope.inputVal = '';
             vm.val = '';
            }
        }

        function backToResults() {
            if ($state.current.name == 'cwrapper') {
                $rootScope.inputVal = '';
                vm.val = '';
            }
            $state.go('cwrapper');
            if ($rootScope.inputVal != undefined && $rootScope.inputVal != '') {
                $rootScope.searchActive = true;
                vm.searchActive = true;
                vm.childActive = false;
            }
            //$rootScope.$emit('updateSearch')
            
            $timeout(function(){
                $window.scrollTo(0, $rootScope.pageYOffset);
            })
        }

        function goAddRank() {
            if ($rootScope.isLoggedIn) {
                vm.childActive = true; 
                vm.barIsActive = false;
                $rootScope.cCategory = undefined; //clear current category 
                $state.go('addCustomRank');
            }
            else dialog.loginFacebook();
        }

        //*****************Admin Functions************
        function editRank() {
            $rootScope.editMode = true;
            vm.selEditRank = 'active';
            vm.selViewRank = '';
            if ($rootScope.DEBUG_MODE) console.log("$rootScope.editMode -- ", $rootScope.editMode);

        }
        function viewRank() {
            $rootScope.editMode = false;
            vm.selEditRank = '';
            vm.selViewRank = 'active';
        }
        function applyRule() {
            $rootScope.$emit('applyRule');
        }

        function quickFilter(x){
            vm.showans = false;
            if (x == 'neighborhood') {
                //dialog.selectNeighborhood($rootScope.locations);
                if (vm.nhctrl == false) vm.nhctrl = true;
                else vm.nhctrl = false;

                if (vm.nhctrl == true) vm.nhops = $rootScope.nhs;
            }
            else {
                if (vm.nh == '') vm.val = x;
                else vm.val = vm.nh + ' ' + x;
            }
        }

        function selectNh(){
            if (vm.nhops.indexOf(vm.nhinp)>-1) {
                vm.nh = vm.nhinp;
                vm.nhctrl = false;
                vm.val = vm.nh;
            }
        }

        function clearNh(){
            vm.nhinp = '';
            vm.nh = '';
            vm.nhctrl = false;
            vm.val = '';
        }
        /*
        function scopeGeneral(force) {
                
                vm.scopeIsGeneral = true;
                vm.scopeIsCity = false;
                vm.initready = false;
                vm.dataready = false;
                vm.childActive = false;
                $rootScope.SCOPE = 1; //Scope = 1, is General Scope
                table.getMostPopularDataX(1);
                dataloader.gethomedataX(1);
                $rootScope.inputVal = '';
                vm.val = '';
                $state.go('cwrapper');
                $window.scrollTo(0, 0);
        }
        function scopeCity() {
                
                vm.scopeIsGeneral = false;
                vm.scopeIsCity = true;
                vm.initready = false;
                vm.dataready = false;
                vm.childActive = false; 
                $rootScope.inputVal = '';
                vm.val = '';
                dataloader.gethomedataX($rootScope.SCOPE);
                $state.go('cwrapper');
                $window.scrollTo(0, 0);
        }

        function toggleSelCity() {
            if (vm.selCityActive) {
                vm.selCityActive = false;
                return;
            }
            else {
                vm.selCityActive = true;
                return;
            }
        }*/

        function prepareNewCatansOptions() {

            if ($rootScope.DEBUG_MODE) console.log("@prepareNewCatansOptions - $rootScope.content.length ", $rootScope.content.length);
            $rootScope.ctsOptions = [];
            //var titlex = '';
            for (var i = 0; i < $rootScope.categories.length; i++) {
                $rootScope.ctsOptions.push($rootScope.categories[i].category);
            }
        }
        
         function getDestination(){
            if (window.location.href.indexOf('rankSummary') > -1){
                vm.childActive = true; 
                vm.barIsActive = false;
            }
            else if(window.location.href.indexOf('answerDetail') > -1){
                vm.childActive = true; 
                vm.barIsActive = false;
            }
            else{
                $rootScope.SCOPE = 2; // Scope=2 is for city of San Diego, will change for different cities
                dataloader.getInitialData();
                $rootScope.childActive = false;
            }
        }

        function showTrends(){            
            vm.childActive = true; 
            vm.barIsActive = false;
            $rootScope.cCategory = undefined; //clear current category
            $state.go('trends');
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .controller('cwrapper', cwrapper);

    cwrapper.$inject = ['$rootScope', '$state', '$http', '$stateParams', '$scope',
        'query', 'table', 'dialog', 'uaf','$window','userdata','$location','color', 'fbusers', '$q', '$timeout', 'filter', 'search', 'mailing'];

    function cwrapper($rootScope, $state, $http, $stateParams, $scope,
        query, table, dialog, uaf, $window, userdata, $location, color, fbusers, $q, $timeout, filter, search, mailing) {

        /* jshint validthis:true */
        var vm = this;
        //-----SEO tags ----
        $scope.$parent.$parent.$parent.seo = { 
            pageTitle : '', 
            metaDescription: 'Rank-X creates collective rankings on everything in your city. '+ 
            'Find the best restaurants, services, activities, events, places, events and more.' 
        };
        
        /// ui-scroll
        var datasource = {};
        datasource.get = function (index, count, success) {
            $timeout(function () {
                var result = [];
                for (var i = index; i <= index + count - 1; i++) {
                    result.push("item #" + i);
                }
                success(result);
            }, 100);
        };
        vm.sm = $rootScope.sm;
        vm.md = $rootScope.md;
        vm.datasource = datasource;
        ///Ui-scroll ends

        $timeout(function(){
            
            var height = 70;
            // if (vm.md) {
            //     height = 400;
            // }
            var width = $('#facebook-container').width();
            $('#facebook-display').html('');
            $('#facebook-display').html('<div class="fb-page" \
                ng-if="vm.pageDataLoaded"           \
                data-href="https://www.facebook.com/rankxsandiego/"  \
                data-tabs="timeline"  \
                data-height="' + height + '" \
                data-width="' + width + '" \
                data-small-header="false"  \
                data-adapt-container-width="true"  \
                data-hide-cover="false" \
                data-show-facepile="true"> \
                    <blockquote cite="https://www.facebook.com/rankxsandiego/" class="fb-xfbml-parse-ignore">\
                    <a href="https://www.facebook.com/rankxsandiego/">Rank-X San Diego</a></blockquote>\
            </div>');

            
            FB.XFBML.parse();    
        }, 2000);

        vm.title = 'cwrapper';

        vm.switchScope = switchScope;
        
        if ($rootScope.hidelogo == undefined) vm.hidelogo = false;
        else vm.hidelogo = $rootScope.hidelogo;
        //Quick Links 
        vm.foodNearMe = foodNearMe;
        vm.events = events;
        vm.selfimprove = selfimprove;
        
        //Methods
        vm.selnh = selnh;
        vm.goHome = goHome;
        vm.gotoAnswer = gotoAnswer;
        vm.gotoRank = gotoRank;
        
        //vm.fres = 4;
        //vm.ftext = 'see more';
        
        //vm.isAdmin = true;
        $rootScope.editMode = false;
        //*****************************
        
        vm.content = [];
        vm.emptyspace = '';
        vm.fbm = $rootScope.fbmode ? true:false;
        
        //$rootScope.searchActive = $rootScope.searchActive ? $rootScope.searchActive: false;
        //vm.searchActive = $rootScope.searchActive;
        
        //Receive from navbar, if 'Home' go to Main View
        var mainViewListener = $rootScope.$on('mainView', function (event) {
            if ($state.current.name == 'cwrapper') {
                goHome();
            }
        });


        /* Start Ininite scrolling and new features by Roy */
        vm.loadMore = loadMore;
        vm.showLess = showLess;

/*
        vm.initialDataCount = 12;
        //if ($rootScope.md) {
          //  vm.initialDataCount = 8;
        //}
        vm.pageDataLoaded = $rootScope.pageDataLoaded;
        vm.initalHomeData = $rootScope.initalHomeData;
        
        vm.initalHomeData = vm.initalHomeData.splice(0, vm.initalHomeData.length > vm.initialDataCount ? vm.initialDataCount : vm.initalHomeData.length);

        vm.currentIndex = 0;
            vm.startIndex = 0;
        if($rootScope.sm){
            vm.scrollingItemsOnePage = 6;
            vm.loadingCountOneScroll = 3;
        }
        else{
            vm.loadingCountOneScroll = 6;
            vm.scrollingItemsOnePage = 12;
        }

        vm.scrollingItemsOnePage = 1000;
        //vm.scrollingData = [];
        vm.scrollDataLoading = false;
        vm.content = [];
        vm.endReached = false;
        vm.scrollingData = [];
        vm.uniqueResult = [];
        if($rootScope.pageDataLoaded){
            //vm.content = angular.copy($rootScope.content);
            //loadInifiniteScroll(true);
        }*/

        $rootScope.$on('filterOptionChanged', function () {
            //if(vm.pageDataLoaded)
                //loadInifiniteScroll(true);
        });

        $rootScope.$on('initalHomeDataLoaded', function () {
            //reload();
        });

        $rootScope.$on('homeDataLoaded', function () {
            //vm.pageDataLoaded = true;
            //console.log("length $rootScope.content - ",$rootScope.content.length );
            vm.content = angular.copy($rootScope.content);
            //loadInifiniteScroll(false);

/*
            if(!$rootScope.hasBusiness && !$rootScope.isPromoter) {
                var time = 60000 * 5;
                if ($rootScope.isLoggedIn){
                    time = 60000 * 5;
                }
                $timeout(function(){
                    //dialog.openSubscriptionDlg(execSubscription);
                }, time);;
            }*/
        });

        function reload(){
            vm.initalHomeData = $rootScope.initalHomeData;
        }

        function execSubscription(email){
            mailing.subscribed(email, $rootScope.user ? $rootScope.user.first_name + ' ' + $rootScope.user.last_name : '');
        }
        // angular.element($window).bind("scroll", function() {
        //     var height = Math.max( angular.element('body')[0].scrollHeight, angular.element('body')[0].offsetHeight, 
        //                angular.element('html')[0].clientHeight, angular.element('html')[0].scrollHeight, angular.element('html')[0].offsetHeight );
        //     if (($('#inifinite-container').offset().top + 600 > this.pageYOffset) && (this.pageYOffset > $('#inifinite-container').offset().top)) {
        //         console.log(height, this.pageYOffset);
        //         // vm.showLess();
        //     } 
        //     $scope.$apply();
        // });
        function loadInifiniteScroll(reloading){
            
            vm.currentIndex = 0;
            vm.startIndex = 0;
            vm.loadingCountOneScroll = 6;
            vm.scrollDataLoading = false;
            // vm.content = [];
            vm.endReached = false;
            vm.scrollingData = [];
            
            var searchResult = [];
            var uniqueResult = [];

            var searchLocation = '';
            if($rootScope.filterOptions.isCity)
                searchLocation = " in San Diego";
            else
                searchLocation = ' in ' + $rootScope.filterOptions.cnh;

            if($rootScope.filterOptions.isAllTopics && $rootScope.filterOptions.isCity){
                // uniqueResult = angular.copy($rootScope.content.filter(function(ranking){ return ranking.ismp == 1;}));
                //var res = search.searchRanksMainPage($rootScope.filterOptions.isCity,'san diego');
                res = $rootScope.content;
                searchResult = searchResult.concat(res);
            } else if($rootScope.filterOptions.isAllTopics && !$rootScope.filterOptions.isCity) {
                var res = search.searchRanksMainPage($rootScope.filterOptions.isCity, $rootScope.filterOptions.cnh);
                searchResult = searchResult.concat(res);
            } else {
                for (var i = 0; i < $rootScope.filterOptions.ctopics.length; i++) {
                    var res = search.searchRanksMainPage($rootScope.filterOptions.isCity, $rootScope.filterOptions.ctopics[i].toLowerCase() + searchLocation);
                    searchResult = searchResult.concat(res);               
                }
            }
            //var res = $rootScope.content;
            
            shuffle(searchResult);

            searchResult.forEach(function(ranking){
                if(uniqueResult.indexOf(ranking) == -1 && ranking.ismp){
                    uniqueResult.push(ranking);
                }
            });
            
            // uniqueResult.sort(function(ranking1, ranking2){
            //     var view1 = ranking1.views ? ranking1.views : 0;
            //     var view2 = ranking2.views ? ranking2.views : 0;
            //     if( ranking1.id == ranking2.id )
            //         return 0;

            //     return view1 < view2 ? 1 : -1;
            // })
            if(reloading) {
                if( uniqueResult.length >= vm.initialDataCount ) {
                    vm.initalHomeData = uniqueResult.splice(0, vm.initialDataCount);
                    filter.saveInitalHomeData(vm.initalHomeData);
                } else {
                    vm.initalHomeData = uniqueResult;
                    filter.saveInitalHomeData(vm.initalHomeData);
                    uniqueResult = [];
                }
                vm.uniqueResult = uniqueResult;
            } else {
                
                var initalHomeDataIDs = vm.initalHomeData.map(function(ranking){ return ranking.id; })
                vm.uniqueResult = uniqueResult.filter(function(ranking){
                    return initalHomeDataIDs.indexOf(ranking.id) == -1;
                });

            }
            for(var i = 0; i < vm.uniqueResult.length; i ++){
                //Push Only applying to filters
                vm.scrollingData.push(i);
            }
            
            shuffle(vm.scrollingData);
            //Sort again to lay rankings with images first
        }

        function loadMore(){

            vm.scrollDataLoading = true;
            $timeout(function(){
                if(vm.currentIndex + vm.loadingCountOneScroll > vm.scrollingData.length - 1){
                    vm.current = vm.scrollingData.length;
                    vm.endReached = true;
                }
                vm.currentIndex += vm.loadingCountOneScroll;
                if((vm.currentIndex - vm.startIndex) > vm.scrollingItemsOnePage){
                    vm.startIndex = vm.currentIndex - vm.scrollingItemsOnePage;        
                }

            
                vm.scrollDataLoading = false;
            }, 500);
        }

        function showLess(){
            if(vm.startIndex >= 3){
                vm.startIndex -= 3;
                vm.currentIndex -= 3;
            }
        }
        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }
        /* End Ininite scrolling and new features by Roy */

        $scope.$on('$destroy',mainViewListener);

        //Receive from layout search bar
        /*
        var getResultsListener = $rootScope.$on('getResults', function (event) {
            vm.searchActive = $rootScope.searchActive;
        });*/

        //$scope.$on('$destroy',getResultsListener);

        window.prerenderReady = false;

        //if ($rootScope.cwrapperLoaded) activate();
        //else init();
        function activate() {
            if ($state.params.main == true) goHome();
            
            $rootScope.inFavMode = false;
            
            //getFeed();
            if ($rootScope.DEBUG_MODE) console.log("activate cwrapper!");
            vm.isNh = $rootScope.isNh;
            
            if (vm.isNh) vm.querybc = '#428bca';
            else vm.querybc = 'white'; //#f9f9f9
            
            vm.isNhRdy = $rootScope.isNhRdy;
            vm.cnh = $rootScope.cnh;
            
            if (vm.isNh) vm.searchScope = vm.isNhRdy ? $rootScope.cnh : 'Neighborhood';
            vm.isCity = $rootScope.isCity;
            
            if (vm.isCity) vm.searchScope = 'all San Diego';
            
            vm.nhs = $rootScope.nhs;
            vm.searchActive = $rootScope.searchActive ? $rootScope.searchActive: false;
            
            //$rootScope.includeNearMe = false;
            $rootScope.cCategory = undefined;
            
            vm.val = $rootScope.inputVal; //remember user query
            
            window.prerenderReady = true;   
            
                    
        }
        function init() {

            if ($rootScope.DEBUG_MODE) console.log("init cwrapper!");
                
            //****SUPER TEMP*****************
            vm.isAdmin = $rootScope.isAdmin;
            /*
            $rootScope.isLoggedIn = true;
            $rootScope.user = {};
            $rootScope.user.name = "Andres Moctezuma";
            $rootScope.user.first_name = 'Andres';
            $rootScope.user.last_name = 'Moctezuma';
            $rootScope.user.id = "10104518570729893";
            userdata.loadUserData();        //load user data (votes and activities)
            userdata.loadUserAccount();     //load user business account
            //$rootScope.answeridxgps = 1258; //starting indx for gps conversion
               /*        
            if ($rootScope.isLoggedIn && $rootScope.user.name == "Andres Moctezuma" && $rootScope.user.id == 12) {
                $rootScope.isAdmin = true;
                vm.isAdmin = true;
            }
            viewRank();
                */
            //******************************

            //Load current category
            //$rootScope.content = {};
            //vm.isBasic = $rootScope.isBasic;

            $rootScope.inputVal = '';
            
            switchScope(1); //Default view is basic query view
            vm.cnh = 'Select Neighborhood';
            $rootScope.cnh = vm.cnh;
            vm.isNhRdy = false;
            $rootScope.isNhRdy = false; 

            var bgc = '#595959';
            var bgc2 = color.shadeColor(bgc, 0.5);
            vm.headerStyle = 'color:#f8f8ff;width:50%;border-style:none;'+
                       'background:'+bgc+';'+
  					   'background: -webkit-linear-gradient(left,'+bgc+','+bgc2+');'+
  					   'background: -o-linear-gradient(right,'+bgc+','+bgc2+');'+
  					   'background: -moz-linear-gradient(right,'+bgc+', '+bgc2+');'+
  					   'background: linear-gradient(to right,'+bgc+', '+bgc2+');';
            
            loadcontent();
            //getEstablishmentAnswers();
            //getFeed();

            //});
            $rootScope.cwrapperLoaded = true;
            $rootScope.cCategory = undefined;
            
            vm.searchActive = $rootScope.searchActive ? $rootScope.searchActive: false;
            
            //userdata.loadVotes();
            activate();

        }

        function loadcontent() {
            $rootScope.cityranks = ['city', 'lifestyle', 'food', 'politics', 'services', 'social', 'beauty', 'sports', 'personalities', 'technology', 'dating', 'health'];
            $rootScope.nhranks = ['neighborhood', 'lifestyle', 'food', 'services', 'social', 'beauty', 'health'];

            vm.nhs = $rootScope.nhs;
           
        }

        function switchScope(x) {
            if (x == 1) {
                vm.isNh = false; //Neighborhood Scope
                vm.isCity = true; //City Scope
                $rootScope.isNh = false;
                $rootScope.isCity = true;
                //vm.val = '';
                //$rootScope.inputVal = '';
                //$rootScope.searchActive = false;
                $rootScope.$emit('loadNh');
                vm.searchScope = 'all San Diego';
                vm.ranks = $rootScope.cityranks;
                //vm.querybc = '#f9f9f9';
                vm.querybc = 'white';
            }
            if (x == 2) {
                vm.isNh = true; //Neighborhood View
                vm.isCity = false; //Classified View
                $rootScope.isNh = true;
                $rootScope.isCity = false;
                vm.val = '';
                $rootScope.inputVal = '';
                $rootScope.searchActive = false;
                if ($rootScope.isNhRdy) $rootScope.$emit('loadNh');
                vm.searchScope = 'Neighborhood';
                vm.ranks = $rootScope.nhranks;
                vm.querybc = '#428bca';
            }
            vm.searchActive = $rootScope.searchActive;
        }

        function selnh(x) {
            $rootScope.cnh = x;
            vm.cnh = x;
            vm.isNhRdy = true;
            $rootScope.isNhRdy = vm.isNhRdy;
            vm.inputVal = '';
            vm.searchActive = false;
            $rootScope.$emit('loadNh');
            vm.searchScope = x;
            vm.val = '';
            $rootScope.inputVal = '';
            //force close the dropdown neighborhood menu            
            $("#nhdropdown").dropdown("toggle");
        }
        
        //Quick Links
        function foodNearMe(){
            //console.log("$rootScope.coordsRdy - ", $rootScope.coordsRdy);
            if ($rootScope.coordsRdy) $state.go('rankSummary', { index: 9521 });
            else {
                $rootScope.loadFbnWhenCoordsRdy = true;
                dialog.askPermissionToLocate();
            }            
        }
        
        function selfimprove(){
            var introsRank = 0;
            var rankFound = false;
            var rn = 0; //random number
            var N = $rootScope.content.length-1;
            
            while(!rankFound){
             rn = Math.floor(Math.random() * (N - 0 + 1)) + 0;
                if ($rootScope.content[rn].ismp){
                    rankFound=true;
                }   
            }
            /*
            for (var i=0; i<$rootScope.content.length; i++){
                if ($rootScope.content[i].title.indexOf($rootScope.rankofday[0].intros) > -1){
                    introsRank = $rootScope.content[i].id;
                    break;
                }
            }*/
            $state.go('rankSummary', { index: $rootScope.content[rn].id });
        }
        
        function events(){
             $state.go('rankSummary', { index: 6949 });
        }
           
        function goHome(){
            //$rootScope.$emit('quitFeedbackMode');
            $rootScope.inputVal = '';
            vm.val = '';
            //switchScope(1);
            //$rootScope.fbmode = false;
            //vm.fbm = $rootScope.fbmode;
        }
        function gotoAnswer(x){
            $state.go('answerDetail',{index: x.answer});
        }
        function gotoRank(x){
            $state.go('rankSummary',{index: x.category});
        }
        
        //***********End Admin Functions********************
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('special', special);

    special.$inject = ['$http', '$q', '$rootScope', 'imagelist'];

    function special($http, $q, $rootScope, imagelist) {

        //Members
        var _specials = [];
        var _fetchAnswersMem = [];
        $rootScope.specials = _specials;
        var _selectedspecial;
        var _specialsByAnswer = [];
        var baseURI = '/api/v2/mysql/_table/specials';

        var service = {
            getSpecials: getSpecials,
            getSpecialsX: getSpecialsX,
            //getSpecial: getSpecial,
            addSpecial: addSpecial,
            updateSpecial: updateSpecial,
            deleteSpecial: deleteSpecial,
            getSpecialsbyAnswer: getSpecialsbyAnswer
        };

        return service;

        function getSpecials(forceRefresh) {
            // console.log("getspecials..._arespecialsLoaded()", _arespecialsLoaded());

            if (_arespecialsLoaded() && !forceRefresh) {

                return $q.when(_specials);
            }

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var data = result.data.resource;
                _load (data);

                return _specials; 
            }

        }

        function getSpecialsX(data) {

            var _datax = [];  //this is filtered array (ignore those answers for which specials already fetched)
            data.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.answer)<0) {
                    _datax.push(item);
                    _fetchAnswersMem.push(item.answer);
                }
            });
            if (_datax.length == 0) return $q.when(false);
            // console.log("getspecials..._arespecialsLoaded()", _arespecialsLoaded());
            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'answer=' + _datax[i].answer+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            var url = baseURI + filterstr;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                 if ($rootScope.DEBUG_MODE) console.log("specialsX data loaded")

                var data = result.data.resource;
                var map = _specials.map(function(x) {return x.id; });
                data.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _specials.push(obj);
                });
                return data;
            }

        }
/*
        function getSpecial(id, forceRefresh) {

            if (_isSelectedspecialLoaded(id) && !forceRefresh) {

                return $q.when(_selectedspecial);
            }

            var url = baseURI + '/' + id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _selectedspecial = result.data;
            }
        }
*/
        function getSpecialsbyAnswer(answer_id) {

            var url = baseURI + '/?filter=answer=' + answer_id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var data = result.data.resource;
                var map = _specials.map(function(x) {return x.id; });
                data.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _specials.push(obj);
                });
                
                _specialsByAnswer = data;
                if ($rootScope.DEBUG_MODE) console.log("gotSpecial for answer! ", _specialsByAnswer);
                return data;
            }
        }

        function addSpecial(special) {

            var url = baseURI;
            var resource = [];

            resource.push(special);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var specialx = special;
                specialx.id = result.data.resource[0].id;
                if (_specials.length > 0) _specials.push(specialx);
                if (_specialsByAnswer.length > 0) _specialsByAnswer.push(specialx);                
                
                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }

        }

        function updateSpecial(special_id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = special_id;
            
            for (var i=0; i<field.length; i++){
                data[field[i]] = val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _specials.map(function(x) {return x.id; }).indexOf(special_id);  
            for (var i=0; i<field.length; i++){
                _specials[idx][field[i]] = val[i];
            }

            //update _specialsByAnswer
            var idx2 = _specialsByAnswer.map(function(x) {return x.id; }).indexOf(special_id);  
            for (var i=0; i<field.length; i++){
                _specialsByAnswer[idx2][field[i]] = val[i];
            }                                
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                if ($rootScope.DEBUG_MODE) console.log("updating special succesful");
                return result.data;
            }
        }

        function deleteSpecial(special_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = special_id;

            obj.resource.push(data);

            var url = baseURI + '/' + special_id;
            var blobImage;

            //update (delete special) local copy of specials
            if (_specials.length > 0) {
                var i = _specials.map(function (x) { return x.id; }).indexOf(special_id);
                blobImage = _specials[i].image;
                if (i > -1) _specials.splice(i, 1);
            }
            
            //update (delete special) local copy of specials
            if (_specialsByAnswer.length > 0) {
                var i = _specialsByAnswer.map(function (x) { return x.id; }).indexOf(special_id);
                if (i > -1) _specialsByAnswer.splice(i, 1);
            }

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                if(blobImage.indexOf('https://rankx.blob') != -1){
                    imagelist.deleteBlob(blobImage);
                }
                console.log("Deleting special was succesful");
                return result.data;   
            }
        }

        function _load(data){
            _specials.length = 0;
            data.forEach(function(x){
                _specials.push(x);
            });
        }

        function _arespecialsLoaded() {

            return _specials.length > 0;
        }

        function _areSpecialsByAnswerLoaded() {
            return _specialsByAnswer.length > 0;
        }

        function _isSelectedspecialLoaded(id) {

            return _selectedspecial && _selectedspecial.id == id;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('datetime', datetime);

    datetime.$inject = ['$rootScope'];

    //This function changes the format of the date as it comes from the db in DreamFactory
    //To the date, it adds the 3 character day of the week
    //To the time, it removes secs and makes it into 12h format
    function datetime($rootScope) {


        var service = {

            formatdatetime: formatdatetime,
            formatTime: formatTime,
            date2number: date2number,
            dateIsCurrent: dateIsCurrent,
            eventIsCurrent: eventIsCurrent
        };

        return service;

        function formatdatetime(sp) {

            if (sp.freq == 'onetime') {
                formatTime(sp, 'stime');
                formatTime(sp, 'etime');
            
                //Format dates
                var d = new Date(sp.sdate);
                var s = d.toString();
                sp.sdate = s.substring(0, 15);

                d = new Date(sp.edate);
                s = d.toString();
                sp.edate = s.substring(0, 15);
            }
            if (sp.freq == 'weekly') {
                formatTime(sp, 'stime2');
                formatTime(sp, 'etime2');
            }

        }

        function formatTime(sp, s) {
            var date = '';

            switch (s) {
                case "stime": date = sp.stime; break;
                case "etime": date = sp.etime; break;
                case "stime2": date = sp.stime2; break;
                case "etime2": date = sp.etime2; break;
            }
            
            //Format time, remove seconds
            if (date != null && date != undefined && (date.indexOf('00:00') > -1 || date.indexOf('30:00') > -1)) {
                date = date.replace('00:00', '00');
                date = date.replace('30:00', '30');
                var itsAM = parseInt(date.substring(0, 2)) < 12;
                if (itsAM) date = date + ' AM';
                else date = date + ' PM';
                //if PM put in 12h notation
                if (!itsAM) {
                    var hr = parseInt(date.substring(0, 2)) - 12;
                    var hrstr = '';
                    if (hr < 10) hrstr = '0' + hr.toString();
                    else hrstr = hr.toString();
                    date = date.replace(date.substring(0, 2), hrstr);
                }
            }

            switch (s) {
                case "stime": sp.stime = date; break;
                case "etime": sp.etime = date; break;
                case "stime2": sp.stime2 = date; break;
                case "etime2": sp.etime2 = date; break;
            }

        }
        
        //Get date in number from date in string
        function date2number(datestr){
             var d1 = new Date(datestr);
             var d1s = d1.getFullYear().toString() +
                (d1.getMonth() + 1 < 10 ? ('0' + (d1.getMonth() + 1).toString()) : (d1.getMonth() + 1).toString()) +
                (d1.getDate() < 10 ? ('0' + d1.getDate().toString()) : d1.getDate().toString());
             return Number(d1s);  
        }
        
        //return true if date is today or in the future
        function dateIsCurrent(datestr){
            var date = date2number(datestr);
            return date - $rootScope.dateTodayNum >= 0;
        }
        
        //return true if an event is current or in the future
        function eventIsCurrent(obj, answer){
            var edate = 0;
            var edateValid = false;
            var sdate = 0;
            var eIsCurrent = false;
            if (answer.edate != undefined && answer.edate != ''){
                edate = date2number(answer.edate.slice(4));
                edateValid = true;   
            }
            
            sdate =  date2number(answer.sdate.slice(4));
            
           // ----x------|----------------|------------
            if (edateValid){
                if (edate >= $rootScope.dateTodayNum) {
                    eIsCurrent = true;
                    if (sdate >= $rootScope.dateTodayNum) {
                        obj.date = answer.sdate.slice(4);
                    }
                    else {
                        //Format todays date
                        var d = new Date($rootScope.dateToday);
                        var s = d.toString();
                        obj.date = s.substring(0, 15).slice(4);
                    }
                }
                else {
                    eIsCurrent = false;
                    obj.date = answer.edate.slice(4);
                }
            }
            //-----------------|--------------------
            else {
                if (sdate >= $rootScope.dateTodayNum) {
                    eIsCurrent = true;
                    obj.date = answer.sdate.slice(4);
                }
                else {
                    eIsCurrent = false;
                    obj.date = answer.sdate.slice(4);
                }
            }
            
            return eIsCurrent;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('table2', table2);

    table2.$inject = ['$http', '$q', '$rootScope','answer','$state', 'filter'];

    function table2($http, $q, $rootScope, answer, $state, filter) {

        // Members
        var _tables = [];
        var _fetchAnswersMem = [];
        $rootScope.customranks = _tables;
        var baseURI = '/api/v2/mysql/_table/customranks';

        var service = {
            getTables: getTables,
            getTablesX: getTablesX,   //get tables from answers  
            getTablesD: getTablesD,   //get tables for demo
            getSingleTable: getSingleTable,
            update: update,
            addTable: addTable,
            addTableforAnswer: addTableforAnswer,
            deleteTable: deleteTable,
            getMostPopularData: getMostPopularData
        };

        return service;
        function getMostPopularData(){
            // $rootScope.filterOptions.isCity
            $http.get(baseURI + '?order=views DESC&offset=0&limit=8&filter=ismp=1')
            .then(function(data){
                $rootScope.initalHomeData = data.data.resource;
                filter.saveInitalHomeData($rootScope.initalHomeData);
                $rootScope.$emit('initalHomeDataLoaded');
            });
            return true;
        }

        function getTables(forceRefresh) {

            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            
            var p0 = $http.get(url0);
            

            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("tables length: ", _tables.length);
                return _tables;            
            }, _queryFailed);  
        }

        function getTablesX(data) {

            var _datax = [];  //this is filtered array (ignore those ranks for which data already fetched)
            data.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.answer)<0){
                    _datax.push(item);
                    _fetchAnswersMem.push(item.answer);
                }
            });
            if (_datax.length == 0) return $q.when(false);

            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'owner=' + _datax[i].answer+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);

            var url0 = baseURI + filterstr;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                var _tablesx = d[0].data.resource;
                var map = _tables.map(function(x) {return x.id; });
                _tablesx.forEach(function(table){
                        if(map.indexOf(table.id) < 0)
                        _tables.push(table);
                });
                
                if ($rootScope.DEBUG_MODE) 
                    console.log("getTablesX 'custom ranks' ", _tables.length);
                return _tables;            
            }, _queryFailed);  
        }

        function getTablesD(data) {

            var _datax = [];  //this is filtered array (ignore those ranks for which data already fetched)
            data.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.category)<0){
                    _datax.push(item);
                    _fetchAnswersMem.push(item.category);
                }
            });

            if (_datax.length == 0) return $q.when(false);

            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'id=' + _datax[i].category+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);

            var url0 = baseURI + filterstr;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                
                var _tablesx = d[0].data.resource;
                var map = _tables.map(function(x) {return x.id; });
                _tablesx.forEach(function(table){
                        if(map.indexOf(table.id) < 0)
                        _tables.push(table);
                });
                
                if ($rootScope.DEBUG_MODE) console.log("getTablesD 'custom ranks' ", _tables.length);
                return _tables;            
            }, _queryFailed);  
        }

        function getSingleTable(id) {

            var url0 = baseURI + '/?filter=id=' + id;

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                var data = d[0].data.resource[0];
                
                var idx = _tables.map(function(x) {return x.id; }).indexOf(data.id); 
                if (idx < 0) _tables.push(data);

                if ($rootScope.DEBUG_MODE) console.log("single table loaded: ", data);
                return _tables;            
            }, _queryFailed);  
                      
        }

        function addTable(table) {
            
            table.isatomic = true;

            var url = baseURI;
            var resource = [];

            resource.push(table);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var tablex = table;
                tablex.id = result.data.resource[0].id;
                _tables.push(tablex);

                //push to search String array
                var searchStr = tablex.tags + " " + tablex.title;
                $rootScope.searchStr.push(searchStr);

                //update slug tag and featured image
                var slug = tablex.title.toLowerCase(); 
                slug = slug.replace(/ /g,'-');
                slug = slug.replace('/','at');
                slug = slug.replace('?','');
                slug = slug + '-' + result.data.resource[0].id;
                //var fimage = 'https://rankx.blob.core.windows.net/sandiego/featuredImages/'+slug+'.jpg';
                update(result.data.resource[0].id,['slug'],[slug]);

                //Create user-activity feed record
                //uaf.post('addedRank',['category'],[tablex.id]); //user activity feed

                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }

        }

        function addTableforAnswer(table,colors,answerid){
            table.isatomic = true;

            var url = baseURI;
            var resource = [];

            resource.push(table);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var tablex = table;
                tablex.id = result.data.resource[0].id;
                _tables.push(tablex);

                //push to search String array
                var searchStr = tablex.tags + " " + tablex.title;
                $rootScope.searchStr.push(searchStr);

                //update slug tag and featured image
                var slug = tablex.title.toLowerCase(); 
                slug = slug.replace(/ /g,'-');
                slug = slug.replace('/','at');
                slug = slug + '-' + result.data.resource[0].id;
                //var fimage = 'https://rankx.blob.core.windows.net/sandiego/featuredImages/'+slug+'.jpg';
                update(result.data.resource[0].id,['slug'],[slug]);

                //update answer
                var obj = {};
                obj.id = result.data.resource[0].id;
                obj.bc = colors[0];
                obj.fc = colors[1];
                var rankExists = false;
                var ranksStr = '';
                var ranks = [];
                //if there is already a rank
                if ($rootScope.canswer.ranks != undefined && $rootScope.canswer.ranks != null &&
                    $rootScope.canswer.ranks != '') {
                        //console.log("there is already a rank");
                        ranksStr = $rootScope.canswer.ranks;
                        //console.log("this is the existing string - ", ranksStr);
                        ranks = JSON.parse(ranksStr);
                        //console.log("ranks", ranks);
                        ranks.push(obj);
                        ranksStr = JSON.stringify(ranks);
                        //console.log("this is the new string - ", ranksStr);
                        answer.updateAnswer(answerid, ['ranks'], [ranksStr]);
                }
                //if this is rank #1
                else{
                    ranksStr = '[' + JSON.stringify(obj) +']';
                    //console.log("this is the new string - ", ranksStr);
                    answer.updateAnswer(answerid, ['ranks'], [ranksStr]);
                }

                //Create user-activity feed record
                //uaf.post('addedCustomRank',['answer','category'],[$rootScope.canswer.id, tablex.id]); //user activity feed

                //$state.go('answerDetail',{index: answerid});
                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }
        }

        function deleteTable(table_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = table_id;

            obj.resource.push(data);

            var url = baseURI + '/' + table_id;
            
            //update (delete answer) local copy of answers
            var i = _tables.map(function (x) { return x.id; }).indexOf(table_id);
            if (i > -1) _tables.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting table was succesful");
                return result.data;
            }
        }


        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
               data[field[i]] = val[i];                 
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _tables.map(function(x) {return x.id; }).indexOf(id);
            for (var i = 0; i < field.length; i++) {
                _tables[idx][field[i]] = val[i];              
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating ranking record succesful");
                return result.data;
            }
        }

        function _load(data){
            _tables.length = 0;
            data.forEach(function(x){
                _tables.push(x);
            });
        }

        function _areTablesLoaded() {

            return _tables.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('table', table);

    table.$inject = ['$http', '$q', '$rootScope','answer','$state', 'filter','uaf','$window','catans','staticpages'];

    function table($http, $q, $rootScope, answer, $state, filter, uaf, $window, catans, staticpages) {

        // Members
        var _tables = [];
        $rootScope.content = _tables;

        var baseURI = '/api/v2/mysql/_table/ranking';

        var service = {
            getTables: getTables,
            getSingleTable: getSingleTable,
            update: update,
            addTable: addTable,
            deleteTable: deleteTable,
            getTablesX: getTablesX,
            getTablesL: getTablesL,
            getInitialHomeData: getInitialHomeData,
            ghostTablesWithAnswer: ghostTablesWithAnswer,
            storeInitialHomeData: storeInitialHomeData 
        };

        //for performance request only following fields:
            var fields = '';
            fields += 'id,type,tags,keywords,question,image1url,image2url,image3url,';
            fields += 'catstr,owner,slug,views,answers,numcom,scope,isatomic,ismp,cat,nh,timestmp';

        return service;
        
        function getInitialHomeData(data){
            /*
            var ranksFromStorage = $window.localStorage.getItem("Ranks-HomeData");
            if (ranksFromStorage) {
                 _append(JSON.parse(ranksFromStorage));
                 return $q.when(true);
            }
            */
            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'id=' + data[i]+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);

            var url0 = baseURI + filterstr + '&fields=' + fields;
            var p0 = $http.get(url0);

            return $q.all([p0]).then(function (d){
                var datax = d[0].data.resource;
                
                _append(datax);
                //if (_tables.length == 0) _load(datax); 

                if ($rootScope.DEBUG_MODE) console.log("_tables length after initialhomedata load: ", _tables.length);
                //$window.localStorage.setItem("Ranks-HomeData", JSON.stringify(datax));
                return _tables;            
            }, _queryFailed);  

        }

        function getTablesX(scope) {

            //_tables = [];
            var url0 = baseURI + '?offset=' + 0 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url1 = baseURI + '?offset=' + 1 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url2 = baseURI + '?offset=' + 2 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url3 = baseURI + '?offset=' + 3 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            
            var p0 = $http.get(url0);
            var p1 = $http.get(url1);
            var p2 = $http.get(url2);
            var p3 = $http.get(url3);
            
            return $q.all([p0,p1,p2,p3]).then(function (d){
                var data = d[0].data.resource.concat(d[1].data.resource,d[2].data.resource,d[3].data.resource);
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("tables length: ", _tables.length);
                return _tables;            
            }, _queryFailed);  
        }

        function getTablesL(data) {

            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'id=' + data[i].category+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            var url0 = baseURI + filterstr + '&fields=' + fields;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load(data);
                if ($rootScope.DEBUG_MODE) console.log("tables L length: ", _tables.length);
                return _tables;            
            }, _queryFailed);  
        }

        function getTables(forceRefresh) {

            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            var url1 = baseURI + '?offset=' + 1 * 1000;
            var url2 = baseURI + '?offset=' + 2 * 1000;
            var url3 = baseURI + '?offset=' + 3 * 1000;
            

            var p0 = $http.get(url0);
            var p1 = $http.get(url1);
            var p2 = $http.get(url2);
            var p3 = $http.get(url3);
            
            return $q.all([p0, p1, p2, p3]).then(function (d){
                var data = d[0].data.resource.concat(d[1].data.resource, d[2].data.resource, d[3].data.resource);
                _load(data);
                if ($rootScope.DEBUG_MODE) console.log("tables length: ", _tables.length);
                return _tables;            
            }, _queryFailed);  
             
        }

        function getSingleTable(id) {

            var url0 = baseURI + '/?filter=id=' + id + '&fields=' + fields;

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                var data = d[0].data.resource[0];
                
                _append([data]);

                if ($rootScope.DEBUG_MODE) console.log("single table loaded: ", data);
                return data;            
            }, _queryFailed);  
                      
        }

        function addTable(table) {
            
            table.scope = $rootScope.SCOPE;

            var url = baseURI;
            var resource = [];

            resource.push(table);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var tablex = table;
                tablex.id = result.data.resource[0].id;
                                
                //Unwrap category & neighborhood
                var idx = $rootScope.categories.map(function(x) {return x.id; }).indexOf(tablex.cat);
                var catObj = $rootScope.categories[idx]; 
                var idx2 = $rootScope.locations.map(function(x) {return x.id; }).indexOf(tablex.nh);
                var nhObj = $rootScope.locations[idx2];

                var title = catObj.category.replace('@Nh',nhObj.nh_name);
                tablex.title = title;
                tablex.fimage = catObj.fimage;
                tablex.tags = catObj.tags;
                tablex.keywords = catObj.keywords;
                tablex.fc = catObj.fc;
                tablex.bc = catObj.bc;
                tablex.shade = catObj.shade;
                tablex.type = catObj.type;
                tablex.user = $rootScope.user.id;
                tablex.introtext = catObj.introtext;
                                
                //push to search String array
                var searchStr = tablex.tags + " " + tablex.title;
                $rootScope.searchStr.push(searchStr);

                //update slug tag and featured image
                var slug = tablex.title.toLowerCase(); 
                slug = slug.replace(/ /g,'-');
                slug = slug.replace('/','at');
                slug = slug.replace('?','');
                slug = slug + '-' + result.data.resource[0].id;
                tablex.slug = slug;

                _tables.push(tablex);
                //var fimage = 'https://rankx.blob.core.windows.net/sandiego/featuredImages/' + slug + fext;
                update(result.data.resource[0].id,['slug'],[slug]);

                //create static page for this rank
                //staticpages.createPageRank(tablex);

                //Create user-activity feed record
                uaf.post('addedRank',['category'],[tablex.id]); //user activity feed

                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data.resource[0].id;
            }

        }

        function ghostTablesWithAnswer(ranks,ans) {
           console.log("addGhostTableWithAnswer ", ranks, ans);
           var tids = []; //table ids
           var p = []; //promises array
           var granks = [];
           var granksids = [];
           p.push(answer.addAnswer(ans,[]));
           
           ranks.forEach(function(rank){
               if (rank.isghost) {
                   granks.push(rank);
                   p.push(addTable(rank));
               }
               else tids.push(rank.id); 
           });
           
           return $q.all(p).then(function (d) {
                var ansid = d[0].resource[0].id;
                console.log("answer id - ", ansid);
                for (var i=1; i < d.length; i++) {
                    tids.push(d[i]); //push ids of newly created ranks (from ghosts)
                    granksids.push(d[i]);
                }
                _updateCatstr(granks,granksids);
                console.log('tids - ', tids);                
                tids.forEach(function(t){
                    catans.postRec2(ansid, t);
                });
                return d;
            });
   
        }

        function _updateCatstr(ranks,ids){
            //update catstr from parent table if applicable
            console.log("@ _updateCatstr ", ranks, ids);
                var catvals = [];
                var catstr = '';
                for (var n = 0; n < ranks.length; n++) {
                    catvals = [];
                    catstr = '';
                    _tables.forEach(function (t) {
                        if (t.cat == ranks[n].cat && t.nh == 1) {
                            console.log("Found parent rank");
                            catvals = t.catstr.split(':').map(Number);
                            catvals.push(ids[n]);
                            catstr = '';
                            for (var i = 0; i < catvals.length; i++) {
                                catstr = catstr + ':' + catvals[i];
                            }
                            catstr = catstr.substring(1);
                            console.log("updated catstr for table - ", t.id);
                            update(t.id,['catstr'],[catstr]);
                        }
                    })
                }
        }

        function deleteTable(table_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = table_id;

            obj.resource.push(data);

            var url = baseURI + '/' + table_id;
            
            //update (delete answer) local copy of answers
            var i = _tables.map(function (x) { return x.id; }).indexOf(table_id);
            if (i > -1) _tables.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                //delete static page for this rank
                var filename = 'rank' + table_id + '.html';
                var data = {};
                data.filename = filename;
                staticpages.removeFile(data);

                if ($rootScope.DEBUG_MODE) console.log("Deleting table was succesful");
                return result.data;
            }
        }


        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
                data[field[i]] = val[i];                
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;

            //update local copy
            var idx = _tables.map(function(x) {return x.id; }).indexOf(id);
            for (var i = 0; i < field.length; i++) {
                _tables[idx][field[i]] = val[i];                              
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                $rootScope.updated_rank_id = result.data.resource[0].id
                if ($rootScope.DEBUG_MODE) console.log("updating ranking record succesful");
                return result.data;
            }
        }

        function storeInitialHomeData(rids){
            
            var data = [];
            var idx = 0;
            rids.forEach(function(i){
                 idx = _tables.map(function (x) { return x.id; }).indexOf(i);
                 if (idx > -1) data.push(_tables[idx]);
            });
            $window.localStorage.setItem("Ranks-HomeData", JSON.stringify(data));
        }

        function _load(data){
            _tables.length = 0;
            data.forEach(function(x){
                _tables.push(x);
            });
        }

        function _append(data){
           data.forEach(function(item){
                var idx = _tables.map(function(x) {return x.id; }).indexOf(item.id);
                if (idx < 0) _tables.push(item);
            }); 
        }

        function _areTablesLoaded() {

            return _tables.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('search', search);

    search.$inject = ['$rootScope'];

    function search($rootScope) {

        //Members

        var service = {

            searchRanks: searchRanks,
            searchRanks2: searchRanks2,
            searchAnswers: searchAnswers,
            searchRanksMainPage: searchRanksMainPage,
            sibblingRanks: sibblingRanks,
            searchRelatedRanks: searchRelatedRanks
        };

        return service;

        function searchAnswers(query) {

            //initialize tool variables
            var tagCapitalized = '';
            var tagFirstLowered = '';
            var results_ans = [];
            var input = query;
            var m = false;
            var an = '';   //answer name
            
            if (input) {

                if (input.length >= 3) {

                    var userIsTyping = false;
                    var inputVal = input;
                    var valTags = inputVal.split(" ");

                    for (var j = 0; j < $rootScope.answers.length; j++) {

                        an = $rootScope.answers[j].name; // title
                        m = true;
                        
                        //check that all tags exist
                        for (var k = 0; k < valTags.length; k++) {

                            tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                            tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);

                            //look for input in answer names ||

                            var caseInsensitive = false;
                            var equals = an.toLowerCase().split(' ').filter(function(antag){
                                return antag == valTags[k].toLowerCase();
                            });
                        
                            if (equals.length >= 1) {
                                caseInsensitive = true;
                            } 
                            m = m &&
                               (an.indexOf(valTags[k]) > -1 ||
                                an.indexOf(valTags[k].toUpperCase()) > -1 ||
                                an.indexOf(tagCapitalized) > -1 ||
                                an.indexOf(tagFirstLowered) > -1 ||
                                caseInsensitive);   // If one splited by space and lowercased answer name tags is same as tag then return

                        }

                        if (m) {

                             if ($rootScope.isNh) {
                                 if ($rootScope.answers[j].cityarea == $rootScope.cnh){
                                        results_ans.push($rootScope.answers[j]);
                                 }
                             }
                            else results_ans.push($rootScope.answers[j]);
                        }

                    }
                }
            }

            return results_ans;

        }

        function searchRanksMainPage(isCity, query) {

            //initialize tool variables 
            var rank = {};
            var tagCapitalized = '';
            var tagFirstLowered = '';
            var rankObj = {};
            var results = [];
            var ss = '';

            var input = query;
            if (input) {
                var inputVal = input;

                var results_ss = [];
                var m_ss = true; //match in search string
                
                var valTags = inputVal.split(" ");
                
                    for (var j = 0; j < $rootScope.searchStrContent.length; j++) {
                      //  if ($rootScope.content[j].ismp) {
                            //console.log("ismp is true");
                            ss = $rootScope.searchStrContent[j]; //search String
                            rank = $rootScope.content[j];
                            m_ss = true;

                            //check that all tags exist
                            for (var k = 0; k < valTags.length; k++) {

                                tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                                tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);
                                if(!ss)
                                    console.log(j);
                                //look for input in rank title only        
                                m_ss = m_ss &&
                                    (ss.indexOf(valTags[k]) > -1 ||
                                        ss.indexOf(valTags[k].toUpperCase()) > -1 ||
                                        ss.indexOf(tagCapitalized) > -1 ||
                                        ss.indexOf(tagFirstLowered) > -1);
                            }
                            
                            if (m_ss && isCity) {
                                if ($rootScope.content[j].mp)
                                    results_ss.push($rootScope.content[j]);
                            }
                            else if (m_ss){
                                results_ss.push($rootScope.content[j]);
                            }
                     //   }
                    }
                    results = results_ss;              
            }

            return results;

        }

        function sibblingRanks(catObj,neighborhood) {

            function compare(a, b) {
                return b.ctr - a.ctr;
            }
            //console.log("@sibblingRanks", catObj);
            var sibblingRanksX = [];
            var sibblingRanks = [];
            var catArr = [];
            var sibExists = false;
            var searchtitle = '';
            var ansLim = 50;
            var ansCtr = 0;
            var rankObj = {};
            if (catObj.isatomic) catArr.push(catObj.id)
            else catArr = catObj.catstr.split(':').map(Number);

            var idx = 0;
            //Determine suggestions for answers in this category
            for (var i = 0; i < $rootScope.catansrecs.length; i++) {
                //find answers in this category
                for (var n = 0; n < catArr.length; n++) {
                    if ($rootScope.catansrecs[i].category == catArr[n]) {
                        for (var j = 0; j < $rootScope.catansrecs.length; j++) {
                            //find answers in other categories
                            if ($rootScope.catansrecs[j].answer == $rootScope.catansrecs[i].answer) {
                                idx = $rootScope.content.map(function (x) { return x.id; }).indexOf($rootScope.catansrecs[j].category);
                                if (idx > -1){
                                    sibExists = false;
                                    for (var k = 0; k < sibblingRanksX.length; k++) {
                                        if (sibblingRanksX[k].title.substr(0, 6) == $rootScope.content[idx].title.substr(0, 6)) {
                                            sibblingRanksX[k].ctr++;
                                            sibExists = true;
                                        }
                                    }
                                    if (!sibExists) {
                                        rankObj = $rootScope.content[idx];
                                        rankObj.ctr = 1;
                                        sibblingRanksX.push(rankObj);
                                    }
                                }                                                                    
                            }
                        }
                        ansCtr++;
                        if (ansCtr >= ansLim) break;
                    }
                }
            }
            //Change to appropriate neighborhood
            for (var i=0; i < sibblingRanksX.length; i++){
                //console.log("sibblingRanksX - ", sibblingRanksX[i]);
                if (sibblingRanksX[i].isatomic && sibblingRanksX[i].ismp) sibblingRanks.push(sibblingRanksX[i]);
                
                if (!sibblingRanksX[i].isatomic && catObj.nh != 1) sibblingRanks.push(sibblingRanksX[i]);
                
                else if (sibblingRanksX[i].isatomic && !sibblingRanksX[i].ismp || 
                            !sibblingRanksX[i].isatomic && sibblingRanksX[i].nh != 1){
                    for (var j=0; j < $rootScope.locations.length; j++){
                        if (sibblingRanksX[i].title.indexOf($rootScope.locations[j].nh_name)>-1){
                            searchtitle = sibblingRanksX[i].title.replace($rootScope.locations[j].nh_name,neighborhood);
                            var rFound = false;
                            for (var k=0; k<$rootScope.content.length; k++){
                                if ($rootScope.content[k].title == searchtitle){
                                    //console.log('found and added - ', searchtitle );
                                    rankObj = $rootScope.content[k];
                                    rankObj.ctr = sibblingRanksX[i].ctr;
                                    rankObj.isghost = false;
                                    sibblingRanks.push(rankObj);
                                    rFound = true;
                                    break;
                                }
                            }
                            if (!rFound){
                                if ($rootScope.DEBUG_MODE) console.log('Couldnt find: ', searchtitle, ' made it ghost :)');
                                //Create ghost ranking for suggestion
                                var ghostObj = {};
                                ghostObj.title = searchtitle;
                                ghostObj.cat = sibblingRanksX[i].cat;
                                var nidx = $rootScope.locations.map(function (x) { return x.nh_name; }).indexOf(neighborhood);
                                ghostObj.nh = $rootScope.locations[nidx].id;
                                ghostObj.isghost = true;
                                ghostObj.isatomic = true;
                                if ($rootScope.DEBUG_MODE) console.log('ghost - ', ghostObj);
                                sibblingRanks.push(ghostObj);
                            }
                        }
                    }                    
                }
            }
            /*
            for (var m=0; m<sibblingRanks.length; m++){
                console.log(sibblingRanks[m].title, sibblingRanks[m].ctr);
            }
            */
            sibblingRanks = sibblingRanks.sort(compare);
            if (sibblingRanks.length > 8) return sibblingRanks.slice(0,8);
            else return sibblingRanks;
        }

        
 function searchRanks(query) {
            //initialize tool variables 
            var rt = '';   //rank title 
            var ss = '';   //search string
            var inm = false;
            var rank = {};
            var tagCapitalized = '';
            var tagFirstLowered = '';
            var rankObj = {};
            var short = [];
            var shortnames = ['pb', 'ob', 'dt', 'mb'];
            var corrnh = ['Pacific Beach', 'Ocean Beach', 'Downtown', 'Mission Beach'];
            if(!$rootScope.locations)
                return [];
            var nh_names = $rootScope.locations.map(function(loc){ return loc.nh_name; });
            for (var i = 0; i < corrnh.length; i++) {
                var ind = nh_names.indexOf(corrnh[i]);
                if(ind != -1) {
                    var loc = angular.copy($rootScope.locations[ind]);
                    loc.nh_short_name =  shortnames[i];
                    short.push(loc);
                }
            }

            //if(nh_names.indexOf('Pacific Beach') != -1)

            var nme = false;  //near me
            var rte = false;
            var rt_nme = false;
            var nhe = false;
            var results = [];

            var input = query;
            
            if (input) {
                
                //ignore some keywords
                if (input.indexOf('best') > -1) input = input.replace('best', '');
                if (input.indexOf('Best') > -1) input = input.replace('Best', '');
                if (input.indexOf('top') > -1) input = input.replace('top', '');
                if (input.indexOf('Top') > -1) input = input.replace('Top', '');
                if (input.indexOf('great') > -1) input = input.replace('great', '');
                if (input.indexOf('Great') > -1) input = input.replace('Great', '');
                if (input.indexOf('awesome') > -1) input = input.replace('awesome', '');
                if (input.indexOf('Awesome') > -1) input = input.replace('Awesome', '');
                if (input.indexOf('amazing') > -1) input = input.replace('amazing', '');
                if (input.indexOf('Amazing') > -1) input = input.replace('Amazing', '');
                if (input.indexOf('most') > -1) input = input.replace('most', '');
                if (input.indexOf('Most') > -1) input = input.replace('Most', '');
                if (input.indexOf('the ') > -1) input = input.replace('the ', '');
                if (input.indexOf('The ') > -1) input = input.replace('The ', '');
                if (input.indexOf('shops') > -1) input = input.replace('shops', '');
                if (input.indexOf('Shops') > -1) input = input.replace('Shops', '');
                if (input.indexOf('places') > -1) input = input.replace('places', '');
                if (input.indexOf('Places') > -1) input = input.replace('Places', '');
                if (input.indexOf('delicious') > -1) input = input.replace('delicious', '');
                if (input.indexOf('Delicious') > -1) input = input.replace('Delicious', '');
                if (input.indexOf('what ') > -1) input = input.replace('what ', '');
                if (input.indexOf('What ') > -1) input = input.replace('What ', '');
                if (input.indexOf('are ') > -1) input = input.replace('are ', '');
                if (input.indexOf('where ') > -1) input = input.replace('where ', '');
                if (input.indexOf('Where ') > -1) input = input.replace('Where ', '');

                if (input.length >= 3) {

                var userIsTyping = false;
                var inputVal = input;

                //Check if user typed 'near me' conditions
                if (inputVal.indexOf('near me') > -1 ||
                    inputVal.indexOf('near') > -1 ||
                    inputVal.indexOf('close') > -1 ||
                    inputVal.indexOf('close to') > -1 ||
                    inputVal.indexOf('close to me') > -1) {
                    inm = true; //input has near me context
                    inputVal = inputVal.replace('near me', 'in San Diego');
                    inputVal = inputVal.replace('near', 'in San Diego');
                    inputVal = inputVal.replace('close to me', 'in San Diego');
                    inputVal = inputVal.replace('close to', 'in San Diego');
                    inputVal = inputVal.replace('close', 'in San Diego');
                }
                else {
                    inm = false;
                }

                    if (inputVal == 'Food') inputVal = inputVal.replace('Food', 'Food Near Me');
                    if (inputVal == 'food') inputVal = inputVal.replace('food', 'Food Near Me');
                 
                //Special Cases
                /*
                if (inputVal == 'pho' || inputVal == 'Pho') {
                    inputVal = 'vietnamese';
                }*/

                if ($rootScope.isNh) inputVal = inputVal + ' ' + $rootScope.cnh;

                var results_nm = [];
                var results_ss = [];
                var results_rt = [];
                var results_rt_nm = [];
                var results_nh = [];
                var rObj = {};
                var ignoreTagsIdx = [];

                var m_ss = true; //match in search string
                var m_rt = true; //match in title
                var m_nh = false; //reference to neighborhood
                var nh = []; //neighborhood reference
                var sc = false; //special case
                    
                    var valTags = inputVal.toLowerCase().split(" ");

                    //check for nh tags tag first
                             for (var k = 0; k < valTags.length; k++) {

                                tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                                tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);

                                //look if input makes reference to specific neighborhood
                                if (valTags[k].length >= 3) {

                                    if (valTags[k] != 'car' && 
                                        valTags[k] != 'del' &&
                                        valTags[k] != 'bar'){
                                        for (var q = 0; q < $rootScope.locations.length; q++) {
                                            if ($rootScope.locations[q].nh_name.toLowerCase().indexOf(valTags[k]) > -1 ||
                                                $rootScope.locations[q].nh_name.toLowerCase().indexOf(valTags[k].toUpperCase()) > -1 ||
                                                $rootScope.locations[q].nh_name.indexOf(tagCapitalized) > -1 ||
                                                $rootScope.locations[q].nh_name.indexOf(tagFirstLowered) > -1) {
                                                //console.log("found neighborhood!", $rootScope.locations[q]);
                                                checkNoDupThenPush($rootScope.locations[q], nh);
                                                m_nh = true;
                                                ignoreTagsIdx.push(k);
                                            }
                                        }
                                    }
                                }
                                //Special cases for neighborhoods
                                if (valTags[k].length == 2) {
                                    for (var q = 0; q < short.length; q++) {
                                        if (short[q].nh_short_name.toLowerCase().indexOf(valTags[k]) > -1 ||
                                            short[q].nh_short_name.toLowerCase().indexOf(valTags[k].toUpperCase()) > -1 ||
                                            short[q].nh_short_name.indexOf(tagCapitalized) > -1 ||
                                            short[q].nh_short_name.indexOf(tagFirstLowered) > -1) {
                                            checkNoDupThenPush(short[q],nh);
                                            m_nh = true;
                                            ignoreTagsIdx.push(k);
                                        }
                                    }
                                }
                            }
                            ignoreTagsIdx.push(valTags.indexOf('la'));

                      for (var j = 0; j < $rootScope.categories.length; j++) {  
                        if ($rootScope.categories[j].category.indexOf('@Nh')>-1) {    
                            
                            ss = $rootScope.searchStr[j]; //Search string
                            rt = $rootScope.categories[j].category; // title
                            rank = $rootScope.categories[j];

                            m_ss = true;
                            m_rt = true;                 
                            
                             //check that all tags exist exept those that are for neighborhood
                             for (var k = 0; k < valTags.length; k++) {

                                 if (ignoreTagsIdx.indexOf(k) < 0) {

                                     tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                                     tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);

                                     //look for input in whole search string
                                     if(!ss)
                                        console.log(j);
                                     m_ss = m_ss &&
                                         (ss.indexOf(valTags[k]) > -1 ||
                                             ss.indexOf(valTags[k].toUpperCase()) > -1 ||
                                             ss.indexOf(tagCapitalized) > -1 ||
                                             ss.indexOf(tagFirstLowered) > -1);

                                     //look for input in rank title only        
                                     m_rt = m_rt &&
                                         (rt.indexOf(valTags[k]) > -1 ||
                                             rt.indexOf(valTags[k].toUpperCase()) > -1 ||
                                             rt.indexOf(tagCapitalized) > -1 ||
                                             rt.indexOf(tagFirstLowered) > -1);

                                 }
                             }
                            
                            if (m_rt){
                                rObj = {};
                                rObj = JSON.parse(JSON.stringify($rootScope.categories[j]));
                                if (m_nh) {
                                    for (var n=0; n < nh.length; n++){
                                        rObj = {};
                                        rObj = JSON.parse(JSON.stringify($rootScope.categories[j]));
                                        rObj.title = rObj.category.replace('@Nh', nh[n].nh_name);
                                        rObj.locationId = nh[n].id;
                                        rObj.useTemp = true;
                                        results_rt.push(rObj);
                                    }
                                }
                                else {
                                    rObj.title = rObj.category.replace('@Nh', 'San Diego');
                                    rObj.locationId = 1;
                                    rObj.useTemp = true;
                                    results_rt.push(rObj);
                                }
                                
                                rte = true; 
                            }
                            
                            else if (m_ss){
                                rObj = {};
                                rObj = JSON.parse(JSON.stringify($rootScope.categories[j]));
                                if (m_nh) {
                                    for (var n=0; n < nh.length; n++){
                                        rObj = {};
                                        rObj = JSON.parse(JSON.stringify($rootScope.categories[j]));
                                        rObj.title = rObj.category.replace('@Nh', nh[n].nh_name);
                                        rObj.locationId = nh[n].id;
                                        rObj.useTemp = true;
                                        results_ss.push(rObj);
                                    }
                                }
                                else {
                                    rObj.title = rObj.category.replace('@Nh', 'San Diego');
                                    rObj.locationId = 1;
                                    rObj.useTemp = true;
                                    results_ss.push(rObj);
                                }
                            } 
                        }
                    }

                    if (nhe) results = results.concat(results_nh);
                    //if (rt_nme) results = results.concat(results_rt_nm);
                    if (rte) results = results.concat(results_rt);
                    //if (nme) results = results.concat(results_nm);
                    results = results.concat(results_ss);

                }

                else {
                    results = [];
                }
            }

            return results;

        }

        function searchRanks2(query) {
            //initialize tool variables 
            var rt = '';   //rank title 
            var ss = '';   //search string
            var inm = false;
            var rank = {};
            var tagCapitalized = '';
            var tagFirstLowered = '';
            var rankObj = {};
            var short = [];
            var shortnames = ['pb', 'ob', 'dt', 'mb'];
            var corrnh = ['Pacific Beach', 'Ocean Beach', 'Downtown', 'Mission Beach'];
           
            var nme = false;  //near me
            var rte = false;
            var rt_nme = false;
            var nhe = false;
            var results = [];

            var input = query;
            
            if (input) {
                
                //ignore some keywords
                if (input.indexOf('best') > -1) input = input.replace('best', '');
                if (input.indexOf('Best') > -1) input = input.replace('Best', '');
                if (input.indexOf('top') > -1) input = input.replace('top', '');
                if (input.indexOf('Top') > -1) input = input.replace('Top', '');
                if (input.indexOf('great') > -1) input = input.replace('great', '');
                if (input.indexOf('Great') > -1) input = input.replace('Great', '');
                if (input.indexOf('awesome') > -1) input = input.replace('awesome', '');
                if (input.indexOf('Awesome') > -1) input = input.replace('Awesome', '');
                if (input.indexOf('amazing') > -1) input = input.replace('amazing', '');
                if (input.indexOf('Amazing') > -1) input = input.replace('Amazing', '');
                if (input.indexOf('most') > -1) input = input.replace('most', '');
                if (input.indexOf('Most') > -1) input = input.replace('Most', '');
                if (input.indexOf('the ') > -1) input = input.replace('the ', '');
                if (input.indexOf('The ') > -1) input = input.replace('The ', '');
                if (input.indexOf('shops') > -1) input = input.replace('shops', '');
                if (input.indexOf('Shops') > -1) input = input.replace('Shops', '');
                if (input.indexOf('places') > -1) input = input.replace('places', '');
                if (input.indexOf('Places') > -1) input = input.replace('Places', '');
                if (input.indexOf('delicious') > -1) input = input.replace('delicious', '');
                if (input.indexOf('Delicious') > -1) input = input.replace('Delicious', '');

                if (input.length >= 3) {

                var userIsTyping = false;
                var inputVal = input;

                    //if (inputVal == 'Food') inputVal = inputVal.replace('Food', 'Food Near Me');
                    //if (inputVal == 'food') inputVal = inputVal.replace('food', 'Food Near Me');
                 
                //Special Cases
                if (inputVal == 'pho' || inputVal == 'Pho') {
                    inputVal = 'vietnamese';
                }

                if ($rootScope.isNh) inputVal = inputVal + ' ' + $rootScope.cnh;

                var results_nm = [];
                var results_ss = [];
                var results_rt = [];
                var results_rt_nm = [];
                var results_nh = [];
                var rObj = {};
                var ignoreTagsIdx = [];

                var m_ss = true; //match in search string
                var m_rt = true; //match in title
                var m_nh = false; //reference to neighborhood
                var nh = []; //neighborhood reference
                var sc = false; //special case
                    
                    var valTags = inputVal.toLowerCase().split(" ");

                    //check for nh tags tag first
                    for (var k = 0; k < valTags.length; k++) {

                        tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                        tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);

                        //look if input makes reference to specific neighborhood

                        if (valTags[k].length >= 3) {

                            if (valTags[k] != 'car' &&
                                valTags[k] != 'del' &&
                                valTags[k] != 'bar') {
                                for (var q = 0; q < $rootScope.locations.length; q++) {
                                    if ($rootScope.locations[q].nh_name.toLowerCase().indexOf(valTags[k]) > -1 ||
                                        $rootScope.locations[q].nh_name.toLowerCase().indexOf(valTags[k].toUpperCase()) > -1 ||
                                        $rootScope.locations[q].nh_name.indexOf(tagCapitalized) > -1 ||
                                        $rootScope.locations[q].nh_name.indexOf(tagFirstLowered) > -1) {
                                        //console.log("found neighborhood!", $rootScope.locations[q]);
                                        //checkNoDupThenPush($rootScope.locations[q], nh);
                                        m_nh = true;
                                        //ignoreTagsIdx.push(k);
                                    }
                                }
                            }
                        }
                        //Special cases for neighborhoods
                        if (valTags[k].length == 2) {
                            for (var q = 0; q < shortnames.length; q++) {
                                if (shortnames[q] == valTags[k] ||
                                    shortnames[q] == valTags[k].toUpperCase() ||
                                    shortnames[q] == tagCapitalized ||
                                    shortnames[q] == tagFirstLowered) {
                                    //checkNoDupThenPush(short[q],nh);
                                    m_nh = true;
                                    //ignoreTagsIdx.push(k);
                                    valTags[k] = corrnh[q];
                                    //console.log("valTags - ", valTags);                                            
                                }
                            }
                        }
                    }
                    //ignoreTagsIdx.push(valTags.indexOf('la'));


                      for (var j = 0; j < $rootScope.content.length; j++) {  
                        if (true) {    
                            
                            ss = $rootScope.searchStrContent[j]; //Search string
                            rt = $rootScope.content[j].title; // title
                            rank = $rootScope.content[j];

                            if(!rt || !ss) console.log("this has issues - content.id - ",$rootScope.content[j]);
                            else {
                            m_ss = true;
                            m_rt = true;
                            //check that all tags exist exept those that are for neighborhood
                             for (var k = 0; k < valTags.length; k++) {

                                 //if (ignoreTagsIdx.indexOf(k) < 0) {
                                   if (true){  

                                     tagCapitalized = valTags[k].charAt(0).toUpperCase() + valTags[k].slice(1);
                                     tagFirstLowered = valTags[k].charAt(0).toLowerCase() + valTags[k].slice(1);

                                     //look for input in whole search string
                                     if(!ss)
                                        console.log(j);
                                     m_ss = m_ss &&
                                         (ss.indexOf(valTags[k]) > -1 ||
                                             ss.indexOf(valTags[k].toUpperCase()) > -1 ||
                                             ss.indexOf(tagCapitalized) > -1 ||
                                             ss.indexOf(tagFirstLowered) > -1);

                                     //look for input in rank title only        
                                     m_rt = m_rt &&
                                         (rt.indexOf(valTags[k]) > -1 ||
                                             rt.indexOf(valTags[k].toUpperCase()) > -1 ||
                                             rt.indexOf(tagCapitalized) > -1 ||
                                             rt.indexOf(tagFirstLowered) > -1);

                                 }
                             }
                            
                            if (m_rt){
                                rObj = {};
                                rObj = JSON.parse(JSON.stringify($rootScope.content[j]));
                                rObj.useTemp = false;
                                if (m_nh) results_rt.push(rObj);
                                else if (rObj.ismp) results_rt.push(rObj);
                                rte = true; 
                            }
                            
                            else if (m_ss){
                                rObj = {};
                                rObj = JSON.parse(JSON.stringify($rootScope.content[j]));
                                rObj.useTemp = false;
                                if (m_nh) results_ss.push(rObj);
                                else if (rObj.ismp) results_ss.push(rObj);
                                
                            }
                            }//temp 
                        }
                    }

                    //if (nhe) results = results.concat(results_nh);
                    //if (rt_nme) results = results.concat(results_rt_nm);
                    if (results_rt.length > 2) shuffle(results_rt);
                    if (rte) results = results.concat(results_rt);
                    //if (nme) results = results.concat(results_nm);
                    if (results_ss.length > 2) shuffle(results_ss);
                    results = results.concat(results_ss);
                }

                else {
                    results = [];
                }
            }
            return results;
        }

        function checkNoDupThenPush(x,array){
            var isdup = false;
            for (var i=0; i<array.length; i++){
                if (x.nh_name == array[i].nh_name){
                    isdup = true;
                    break;
                }
            }
            if (!isdup) array.push(x);
        }

        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;
            // While there remain elements to shuffle...
            while (0 !== currentIndex) {
                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;
                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }
            return array;
        }

        function searchRelatedRanks(ranks, query) {
            //console.log("query - ", query);
            var tagsm = [];
            var tagsr = [];
            var tstr = '';
            var idx1 = 0;
            var obj = {};
            for (var i = 0; i < ranks.length; i++) {
                if (ranks[i].isAnswer == true){}
                else{
                    tstr = ranks[i].tags.replace(/,/g, ' ');
                    tagsr = tstr.split(' ');
                    //console.log("tagsr - ", tagsr);
                    for (var j = 0; j < tagsr.length; j++) {
                        if (tagsr[j] != 'isMP' && tagsr[j] != query) {
                            idx1 = tagsm.map(function (x) { return x.tag; }).indexOf(tagsr[j]);
                            //console.log("idx1 - ", idx1);
                            if (idx1 < 0) {
                                obj = {};
                                obj.tag = tagsr[j];
                                obj.ctr = 1;
                                tagsm.push(obj);
                            }
                            else {
                                tagsm[idx1].ctr++;
                            }
                        }
                    }
                }
            }
            tagsm = tagsm.sort(compare);
            return tagsm;
            //console.log("tagsm - ", tagsm);
        }
            function compare(a, b) {
                return b.ctr - a.ctr;         
            }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('rankofday', rankofday);

    rankofday.$inject = ['$http', '$q','$rootScope'];

    function rankofday($http, $q, $rootScope) {

        // Members
        var _rankofday = [];
        $rootScope.rankofday = _rankofday;
        var _allranks = [];
        var baseURI = '/api/v2/mysql/_table/rankofday';

        var service = {
            getrankofday: getrankofday,
            getall: getall,
            update: update
        };

        return service;

        function getrankofday(forceRefresh) {

            //if (_arerankofdayLoaded() && !forceRefresh) {

            //    return $q.when(_rankofday);
            //}
            
             //get todays date
            var datenow = new Date();
            var tz = datenow.getTimezoneOffset();
            datenow.setMinutes( datenow.getMinutes() - tz);
            //var dateStr = datenow.toLocaleDateString();
            //var dateobj = new Date();
            //function pad(n) {return n < 10 ? "0"+n : n;}
            function pad(n) {return n < 10 ? n : n;}
            var dateStr = pad(datenow.getMonth()+1)+"/"+pad(datenow.getDate())+"/"+datenow.getFullYear();
            
            
            var url = baseURI + '/?filter=date='+ dateStr;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                if (result.data.resource.length != 0) {

                    var rodObj = result.data.resource[0];
                    //once we get rankofday record, we find record with that category.
                    /*$rootScope.content.forEach(function(x){
                        if (x.cat == result.data.resource[0].category && x.nh == 1) _rankofday = x;
                    });
                    console.log("-rankofday - ", _rankofday);
                    return _rankofday; */
                    var url1 = '/api/v2/mysql/_table/categories/?filter=id=' + rodObj.category;
                    var url2 = '/api/v2/mysql/_table/ranking/?filter=(cat=' + rodObj.category +') AND (nh=1)'; 

                    var p1 = $http.get(url1);
                    var p2 = $http.get(url2);

                     return $q.all([p1, p2]).then(function (d) {
                     
                        var rankObj = d[1].data.resource[0];
                        var catObj = d[0].data.resource[0];
                        rankObj.title = catObj.category.replace('@Nh','San Diego');
                        rankObj.fimage = catObj.fimage;
                        rankObj.introtext = catObj.introtext;
                        rankObj.tags = catObj.tags;
                        rankObj.question = catObj.question;
                        rankObj.type = catObj.type;
                        rankObj.fc = catObj.fc;
                        rankObj.bc = catObj.bc;
                        rankObj.shade = catObj.shade;
                        _rankofday.push(rankObj);
                        $rootScope.$emit('rodReady');
                        return _rankofday;
                    },function(err){
                        console.log("Error getting rank of day data: ", err);
                    });
/*
                    return $http.get(url).then(function(resp) {
                        if (resp.data.resource.length != 0){ 
                            var obj = {};
                            obj = resp.data.resource[0];
                            var idx = _answers.map(function(x) {return x.id; }).indexOf(answer_id);
                            
                            return _rankofday = resp.data.resource[0];
                        }
                        else
                            return null;

                    }, _queryFailed); */
                }
            }
        }

        function getall(){
            var url = baseURI;
            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _allranks = result.data.resource;
            }
        }

        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;
            
            for (var i=0; i<field.length; i++){
                 data[field[i]] = val[i]; 
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _allranks.map(function(x) {return x.id; }).indexOf(id);  
            for (var i=0; i<field.length; i++){
                _allranks[idx][field[i]] = val[i];
            }                        
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                console.log("updating rank of day succesful");
                return result.data;
            }
        }
        
        function _arerankofdayLoaded() {

            return _rankofday.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('pvisits', pvisits);

    pvisits.$inject = ['$http', '$q','$rootScope'];

    function pvisits($http, $q, $rootScope) {

        // Members
        var _pvisits = [];
        var baseURI = '/api/v2/mysql/_table/pvisits';

        var service = {
            getpvisits: getpvisits,
            postRec: postRec,
            patchRec: patchRec,
            deleteRec: deleteRec,
            
        };

        return service;

        function getpvisits(forceRefresh) {

            if (_arepvisitsLoaded() && !forceRefresh) {

                return $q.when(_pvisits);
            }

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _pvisits = result.data.resource;
            }

        }
        
        function postRec(date) {
           
            //form match record
            var data = {};
            data.date = date;
			data.nvisits = 1;
             
            var obj = {};
            obj.resource = [];

            obj.resource.push(data);
            
            //update local copy
            _pvisits.push(data);
            
            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                 //update local copies
                var id = result.data.resource[0].id; 
                _pvisits[_pvisits.length-1].id = id;

                if ($rootScope.DEBUG_MODE) console.log("creating pvisits record was succesful");
                return result.data;
            }
        }
       
       function patchRec(rec_id, visits) {
            
            //form match record
            var obj = {};
            obj.resource = [];
                      
            var data={};
            data.id = rec_id;
            data.nvisits = visits;
            
            obj.resource.push(data); 
            
            var url = baseURI; 
                        
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Updating pvisits record was succesful");
                return result.data;
            }
        }
        
        function deleteRec(rec_id) {
            
            //delete records from local copy
            for (var i=0; i<_pvisits.length;i++){
                if (_pvisits[i].id == rec_id){
                    _pvisits.splice(i,1);
                } 
            }
            
           var url = baseURI + '/' + rec_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                if ($rootScope.DEBUG_MODE) console.log("Deleting user activity record was succesful");
                return result.data;
            }
        }
     
        function _arepvisitsLoaded() {

            return _pvisits.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('locations', locations);

    locations.$inject = ['$http', '$q', '$rootScope'];

    function locations($http, $q, $rootScope) {

        // Members
        var _locations = [];
        $rootScope.locations = _locations;
        var baseURI = '/api/v2/mysql/_table/locations';

        var service = {
            getAllLocations: getAllLocations,
            getLocationsL: getLocationsL,
            getLocation: getLocation,
            addLocation: addLocation,
            update: update,
            deleteRec: deleteRec
        };

        return service;

        function getAllLocations(forceRefresh) {

            if (_locations.length > 0 && !forceRefresh) {

                return $q.when(_locations);
            }

            //var url = baseURI;
            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
           //var url0 = baseURI + '/?filter=scope=city';

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Categories ", _locations.length);
                return _locations;            
            }, _queryFailed);  

        }

        function getLocationsL(data) {

            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'id=' + data[i].nh+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            var url0 = baseURI + filterstr;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Categories ", _categories.length);
                return _locations;            
            }, _queryFailed);  
        }

        function getLocation(id){
            
            var url0 = baseURI + '/?filter=id=' + id;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                if ($rootScope.DEBUG_MODE) console.log("loaded single location ", data);
                return data;            
            }, _queryFailed);  
        }

        function addLocation(location) {
            
            var url = baseURI;
            var resource = [];

            resource.push(location);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var locationx = location;
                locationx.id = result.data.resource[0].id;
                _locations.push(locationx);

                if ($rootScope.DEBUG_MODE) console.log("adding locationx succesful", result);
                return result.data;
            }

        }

        
        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
            	data[field[i]] =  val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _locations.map(function(x) {return x.id; }).indexOf(id);  
            for (var i = 0; i < field.length; i++) {
            	_locations[idx][field[i]] = val[i];
                
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating locationx succesful");
                return result.data;
            }
        }
        
        function deleteRec(location_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = location_id;

            obj.resource.push(data);

            var url = baseURI + '/' + location_id;
            
            //update (delete answer) local copy of answers
            var i = _locations.map(function (x) { return x.id; }).indexOf(location_id);
            if (i > -1) _locations.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting location was succesful");
                return result.data;
            }
        }

        function _load(data){
            _locations.length = 0;
            data.forEach(function(x){
                _locations.push(x);
            });
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('headline', headline);

    headline.$inject = ['$http', '$q', '$rootScope'];

    function headline($http, $q, $rootScope) {

        // Members
        var _headlines = [];
        $rootScope.headlines = _headlines;
        var baseURI = '/api/v2/mysql/_table/headlines';

        var service = {
            getheadlines: getheadlines,
			addheadline: addheadline,
            update: update,
        };

        return service;

        function getheadlines(forceRefresh) {

            if (_areheadlinesLoaded() && !forceRefresh) {

                return $q.when(_headlines);
            }

            //var url = baseURI;
            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
           
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load(data);
                return _headlines;            
            }, _queryFailed);  

        }

        function addheadline(headline) {
            
            var url = baseURI;
            var resource = [];

            resource.push(headline);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var headlinex = headline;
                headlinex.id = result.data.resource[0].id;
                _headlines.push(headlinex);

                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }

        }

        
        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
                switch (field[i]) {
                    case "city": data.city = val[i]; break;
                    case "nh": data.nh = val[i]; break;
                    case "title": data.title = val[i]; break;
                    case "filter": data.filter = val[i]; break;
                    case "bc": data.bc = val[i]; break;
                    case "fc": data.fc = val[i]; break;                                          
                }
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _headlines.map(function(x) {return x.id; }).indexOf(id);  
            for (var i = 0; i < field.length; i++) {
                switch (field[i]) {
                    case "city": $rootScope.content[idx].city = val[i]; break;
                    case "nh": $rootScope.content[idx].nh = val[i]; break;
                    case "title": $rootScope.content[idx].title = val[i]; break; 
                    case "filter": $rootScope.content[idx].filter = val[i]; break;
                    case "bc": $rootScope.content[idx].bc = val[i]; break;
                    case "fc": $rootScope.content[idx].fc = val[i]; break;                                       
                }
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("updating headlines succesful");
                return result.data;
            }
        }

        function _load(data){
            _headlines.length = 0;
            data.forEach(function(x){
                _headlines.push(x);
            });
        }

        function _areheadlinesLoaded() {

            return _headlines.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('dataloader', dataloader);

    dataloader.$inject = ['$http', '$q','$rootScope','pvisits', 'table2', 'dialog',
        'rankofday', 'answer', 'table', 'special', 'datetime', 'uaf', 'common', '$timeout',
        'matchrec', 'edit', 'useractivity', 'vrows', 'headline', 'cblock', 'catans','categories', 'locations'];

    function dataloader($http, $q, $rootScope, pvisits, table2, dialog,
        rankofday, answer, table, special, datetime, uaf, common, $timeout,
        matchrec, edit, useractivity, vrows, headline, cblock, catans, categories, locations) {

        // Members
        var service = {
            gethomedataX: gethomedataX,
            getRank: getRank,
            getAnswer: getAnswer,
            getInitialData: getInitialData,
            unwrap: unwrap,
            unwrapSingle: unwrapSingle,
            createSearchStrings: createSearchStrings,
            pulldata: pulldata,
            getDemoData: getDemoData,
        };

        var _ranksLoaded = false;

        var demoData1of3 = false;
        var demoData2of3 = false;
        var demoData3of3 = false;
        var demoDataReady = false;

        var answerReady = false;
        var dataReady = false;
        var catansReady = false;

        var landAnswerActive = false;
        var landRankActive = false;

        var rids = [1733, 11619, 11285, 11288, 11673, 9734, 468, 9822, 11271, 11927, 
                11241, 7674, 368, 43, 1728, 7965, 9735, 192, 10339, 9903, 
                11598, 12041, 93, 12020, 3125];
        var cids = [1164, 1130, 1403, 1407, 1313, 1275, 1149, 1276, 1390, 1475, 
                1367, 1241, 1128, 1092, 1161, 1260, 1277, 1112, 1305, 1293, 
                1106, 1542, 1104, 1535, 1200];
        var ridsx = [];
        var cidsx = [];

        return service;

        function getInitialData() {
            if ($rootScope.DEBUG_MODE) console.log("get initial data called");
            //Initial ranks and categories ids
            shuffle();
            var p1 = table.getInitialHomeData(ridsx);
            var p2 = categories.getInitialHomeData(cidsx);
            
            $q.all([p1,p2]).then(function(d){
                unwrap();
                waitforImages(d[1]);
                gethomedataX($rootScope.SCOPE);
            });
        }

        function gethomedataX(scope) {

            if ($rootScope.DEBUG_MODE) console.log("gethomedataX called");

            $rootScope.pageDataLoaded = false;
            var p0 = table.getTablesX(scope);
            var p1 = categories.getAllCategoriesX(scope);
            var p2 = locations.getAllLocations();
            var p3 = answer.getAnswersX(scope).then(function(){
                getEstablishmentAnswers();
                $rootScope.pageDataLoaded = true;
                checkStatus();
            });
            
            //Minimum Data for Cwrapper
            return $q.all([p0, p1, p2]).then(function (d) {
            
                // run whatever needs to be timed in between the statements
                unwrap();
                createSearchStrings();
                if ($rootScope.isLoggedIn) getDemoData();

                //checkStatus();
                getSecondaryData();
                table.storeInitialHomeData(ridsx);
                categories.storeInitialHomeData(cidsx);
                
                //Create array of neighborhood options
                $rootScope.nhs = $rootScope.locations.map(function(x) {return x.nh_name; });
                
                if ($rootScope.DEBUG_MODE) console.log("cwrapper data ready!");
                $rootScope.$emit('homeDataLoaded');

            });
        }

        function getSecondaryData(){
            var p0 = uaf.getactions();
            var p1 = headline.getheadlines();        
        }

        function unwrap(){

            if ($rootScope.DEBUG_MODE) console.log("dataloader.unwrap");

            var nhObj = {};
            var catObj = {};
            var idx = -1;
            var idx2 = -1;
            var idx = 0;
                for (var i=0; i < $rootScope.content.length; i++){
                    idx = $rootScope.locations.map(function (x) { return x.id; }).indexOf($rootScope.content[i].nh);
                    nhObj = $rootScope.locations[idx];
                    idx2 = $rootScope.categories.map(function (x) { return x.id; }).indexOf($rootScope.content[i].cat);
                    catObj = $rootScope.categories[idx2];
                    //console.log("catObj - ", catObj);
                    if(nhObj == undefined) {
                        nhObj = {};
                        nhObj.nh_name = 'San Diego';
                        nhObj.id = 1;
                        nhObj.sub_areas = '';
                    }
                    if (catObj) {
                        $rootScope.content[i].title = catObj.category.replace('@Nh', nhObj.nh_name);
                        $rootScope.content[i].fimage = catObj.fimage;
                        $rootScope.content[i].bc = catObj.bc;
                        $rootScope.content[i].fc = catObj.fc;
                        $rootScope.content[i].tags = catObj.tags;
                        $rootScope.content[i].keywords = catObj.keywords;
                        $rootScope.content[i].type = catObj.type;
                        $rootScope.content[i].question = catObj.question;
                        $rootScope.content[i].shade = catObj.shade;
                        if ($rootScope.content[i].nh == 1) $rootScope.content[i].introtext = catObj.introtext;
                        else $rootScope.content[i].introtext = '';
                        $rootScope.content[i].user = catObj.user;
                        //if (nhObj.sub_areas.split(',').map(Number).length > 1 && catObj.category.indexOf('@Nh')>-1)
                        if (nhObj.sub_areas && catObj.category.indexOf('@Nh') > -1)
                            $rootScope.content[i].isatomic = false;
                        else $rootScope.content[i].isatomic = true;
                        //Determine if set ismp flag.
                        if (catObj.ismp != null && catObj.ismp != undefined) $rootScope.content[i].ismp = catObj.ismp;
                        else if (nhObj.id == 1) $rootScope.content[i].ismp = true;
                        else $rootScope.content[i].ismp = false;
                        //$rootScope.content[i].ismp = true;
                    }
                    else if ($rootScope.DEBUG_MODE) console.log("Couldnt find this category --- ",$rootScope.content[i].cat);
                }
        }

        function unwrapSingle(rankObj, catObj, nhObj) {

            if ($rootScope.DEBUG_MODE) console.log("dataloader.unwrapSingle");

            var idx = $rootScope.content.map(function(x) {return x.id; }).indexOf(rankObj.id); 
            var rank = $rootScope.content[idx];

            rank.title = catObj.category.replace('@Nh', nhObj.nh_name);
            rank.fimage = catObj.fimage;
            rank.bc = catObj.bc;
            rank.fc = catObj.fc;
            rank.tags = catObj.tags;
            rank.keywords = catObj.keywords;
            rank.type = catObj.type;
            rank.question = catObj.question;
            rank.shade = catObj.shade;
            if (rank.nh == 1) rank.introtext = catObj.introtext;
            else rank.introtext = '';
            rank.user = catObj.user;
            //if (nhObj.sub_areas.split(',').map(Number).length > 1 && catObj.category.indexOf('@Nh')>-1)
            if (nhObj.sub_areas && catObj.category.indexOf('@Nh') > -1)
                rank.isatomic = false;
            else rank.isatomic = true;
            //Determine if set ismp flag.
            if (catObj.ismp != null && catObj.ismp != undefined) rank.ismp = catObj.ismp;
            else if (nhObj.id == 1) rank.ismp = true;
            else rank.ismp = false;
        }

        function getDemoData(){
            //Load demo custom ranks for customers to see
            var demoCustomRanks = [
                { category: 11091, id: 11091 },
                { category: 11092, id: 11092 },
                { category: 11093, id: 11093 },
            ];

            table2.getTablesD(demoCustomRanks).then(function(){
                demoData1of3 = true;
                checkDemoDataStatus();
            });
            catans.getAllcatansX(demoCustomRanks).then(function (result2) {
                if (result2 != false) 
                    answer.getAnswersFromCatans(result2).then(function(){
                        demoData2of3 = true;
                        checkDemoDataStatus();
                    });
                else {
                    demoData2of3 = true;
                    checkDemoDataStatus();
                }
            });
            special.getSpecialsbyAnswer(1).then(function(){
                demoData3of3 = true;
                checkDemoDataStatus();
            });       
        }

        function checkDemoDataStatus(){
            demoDataReady = demoData1of3 && demoData2of3 && demoData3of3;
        }

        function createNhOps(){
            $rootScope.nhops = [];
            $rootScope.locations.forEach(function(nh){
                $rootScope.nhops.push(nh.nh_name);
            })
        }

        function getEstablishmentAnswers() {
            $rootScope.estAnswers = [];
            $rootScope.estNames = [];
            $rootScope.pplAnswers = [];
            $rootScope.pplNames = [];
            $rootScope.plaAnswers = [];
            $rootScope.plaNames = [];
            $rootScope.freAnswers = [];
            $rootScope.freNames = [];
            $rootScope.orgNames = [];
            $rootScope.orgAnswers = [];
            $rootScope.orgNames = [];
            for (var i = 0; i < $rootScope.answers.length; i++) {
                if ($rootScope.answers[i].type == 'Establishment') {
                    $rootScope.estNames.push($rootScope.answers[i].name);
                    $rootScope.estAnswers.push($rootScope.answers[i]);
                }
                if ($rootScope.answers[i].type == 'Person') {
                    $rootScope.pplNames.push($rootScope.answers[i].name);
                    $rootScope.pplAnswers.push($rootScope.answers[i]);
                }
                if ($rootScope.answers[i].type == 'Place') {
                    $rootScope.plaNames.push($rootScope.answers[i].name);
                    $rootScope.plaAnswers.push($rootScope.answers[i]);
                }
                if ($rootScope.answers[i].type == 'Organization') {
                    $rootScope.orgNames.push($rootScope.answers[i].name);
                    $rootScope.orgAnswers.push($rootScope.answers[i]);
                }
                if ($rootScope.answers[i].type == 'PersonCust') {
                    $rootScope.freNames.push($rootScope.answers[i].name);
                    $rootScope.freAnswers.push($rootScope.answers[i]);
                }
            }
        }

        function createSearchStrings(){
            $rootScope.searchStr = [];
            //Create seach strings combination of tags, title and answers            
            for (var i = 0; i < $rootScope.categories.length; i++) {                
                //Create single string for search
                $rootScope.searchStr[i] = ($rootScope.categories[i].tags ? $rootScope.categories[i].tags : '') + 
                " " + ($rootScope.categories[i].title ? $rootScope.categories[i].title : '');

            }

            $rootScope.searchStrContent = [];
            //Create seach strings combination of tags, title and answers            
            for (var i = 0; i < $rootScope.content.length; i++) {                
                //Create single string for search
                $rootScope.searchStrContent[i] = ($rootScope.content[i].tags ? $rootScope.content[i].tags : '') + 
                " " + ($rootScope.content[i].title ? $rootScope.content[i].title : '');
            }          
        }

        function pulldata(type, data) {
            if (type == 'ranks') {
                catans.getAllcatansX(data).then(function (result) {
                        if (result){
                        //_ranksLoaded = true;
                        //if ($rootScope.rankSummaryDataLoaded == false ||
                        //$rootScope.rankSummaryDataLoaded == undefined) checkStatus();

                        var si = 0;
                        var ei = result.length > 200 ? 200:result.length;
                            while (si < result.length) {
                                answer.getAnswersFromCatans(result.slice(si,ei));
                                special.getSpecialsX(result.slice(si,ei));
                                vrows.getVrowsX(result.slice(si,ei));
                                matchrec.GetMatchTableX(result.slice(si,ei));
                                //useractivity.getAllUserActivityX(result.slice(si,ei));
                                edit.getEditsX(result.slice(si,ei));
                                table2.getTablesX(result.slice(si,ei));
                                si = ei;
                                ei = ei+200;
                                if (ei > result.length) ei = result.length;
                            }
                        }                     
                });
            }
            if (type == 'answers') {
                answer.getAnswers(data);
                catans.getAllcatansY(data).then(function (result) {
                        if (result){
                        var si = 0;
                        var ei = result.length > 200 ? 200:result.length;
                            while (si < result.length) {
                                special.getSpecialsX(result.slice(si,ei));
                                vrows.getVrowsX(result.slice(si,ei));
                                matchrec.GetMatchTableX(result.slice(si,ei));
                                //useractivity.getAllUserActivityX(result);
                                edit.getEditsX(result.slice(si,ei));
                                table2.getTablesX(result.slice(si,ei)).then(function(result2){
                                    if (result2 != false) pulldata('ranks',result2);
                                });
                                si = ei;
                                ei = ei+200;
                                if (ei > result.length) ei = result.length;
                            }

                            var cranks = [];
                            var cr = {};
                            data.forEach(function (item) {
                                if (item.ranks != null) {
                                    if (item.ranks.length > 2) {
                                        cr = JSON.parse(item.ranks);
                                        for (var i = 0; i < cr.length; i++) {
                                            cranks.push(cr[i]);
                                        }
                                    }
                                }
                            });
                            if (cranks.length > 0) pulldata('ranks', cranks);
                            
                        }   
                });
            }
        }

        //load data for single rank
        function getRank(slug) {
            if ($rootScope.DEBUG_MODE) console.log("getRank exec");
            var rankid = common.getIndexFromSlug(slug);
            var rankObj = {};
            if ($rootScope.isCustomRank) {
                var p0 = table2.getSingleTable(rankid);
                catans.getAllcatansX([{"id":rankid}]).then(function (result) {
                        if (result){
                            var p1 = answer.getAnswersFromCatans(result);
                            var p2 = special.getSpecialsX(result);
                            var p3 = vrows.getVrowsX(result);
                            var p4 = matchrec.GetMatchTableX(result);
                            var p5 = edit.getEditsX(result);
                            var p6 = table2.getTablesX(result);
                            $q.all([p0,p1,p2,p3,p4,p5,p6]).then(function(){
                                $rootScope.$emit('rankDataLoaded');
                            })
                        }                  
                });
            }
            else {
                var p0 = table.getSingleTable(rankid).then(function (res) {
                    var rankObj = res; //its necessary to wait for rank as the field 'catstr' is needed to parse
                    var p1 = categories.getCategory(rankObj.cat);
                    var p2 = locations.getLocation(rankObj.nh);
                    catans.getAllcatansX([rankObj]).then(function (result) {         //all the catans and answers
                        if (result){
                            var p4 = answer.getAnswersFromCatans(result);
                            var p5 = special.getSpecialsX(result);
                            var p6 = vrows.getVrowsX(result);
                            var p7 = matchrec.GetMatchTableX(result);
                            var p8 = edit.getEditsX(result);
                            var p9 = table2.getTablesX(result);
                            $q.all([p1,p2,p4,p5,p6,p7,p8,p9]).then(function(d){
                                var catObj = d[0][0];
                                var nhObj = d[1][0];
                                unwrapSingle(rankObj, catObj, nhObj);
                                $rootScope.$emit('rankDataLoaded');
                            });
                        }                  
                    });
                    if ($rootScope.SCOPE == undefined) $rootScope.SCOPE = rankObj.scope; 
                });
            }
        }
            
        function errorLoading() {
            dialog.notificationWithCallback(
                'Oops', 'Sorry, there was an error loading this ranking.',
                function(){
                    $state.go('cwrapper');
                });
        }

        //load data for just one answer
        function getAnswer(slug){
            var ansid = common.getIndexFromSlug(slug);
            var ansObj = {};
            var data = {};
            data.id = ansid;
            data.answer = ansid;
            var p0 = answer.getAnswer(ansid);
            var p1 = special.getSpecialsX([data]);
            var p2 = matchrec.GetMatchTableX([data]);
            var p3 = edit.getEditsX([data]);
            var p4 = table2.getTablesX([data]);
            var p5 = vrows.getVrowsX([data]);
            catans.getAllcatansY([data]).then(function(result){
                if (result){
                var p6 = table.getTablesL(result).then(function(resultx){
                    
                    if (resultx.constructor === Array) {}
                    else resultx = [resultx];
                    var p7 = categories.getCategoriesL(resultx);
                    var p8 = locations.getLocationsL(resultx);
                    $q.all([p0,p1,p2,p3,p4,p5,p6,p7,p8]).then(function (d){
                        var ans = d[0];
                        unwrap();
                        if ($rootScope.SCOPE == undefined) $rootScope.SCOPE = ans.scope;
                        $rootScope.$emit('answerDataLoaded');
                    });
                });
                }
            else $rootScope.$emit('answerDataLoaded');
                
            });
        }
/*
        function landAnswer(slug){
            landAnswerActive = true;
            var slugA = slug.split('-').map(Number);
            var idx = slugA[slugA.length-1];
            
            answer.getAnswer(idx).then(function(result){
                //$rootScope.answers = result;
                answerReady = true;
                landAnswerCheckStatus();
                if (result.scope == 1){
                    $rootScope.SCOPE = 1;
                    //table.getMostPopularDataX(1);
                    getInitialData();
                    gethomedataX(1);
                }
                else{
                    $rootScope.SCOPE = 2;
                    //table.getMostPopularDataX(2);
                    getInitialData();
                    gethomedataX(2);
                }
                $rootScope.$emit('setScope');
            });
            var data = {};
            data.id = idx;
            catans.getAllcatansY([data]).then(function(result){
                var p0 = table.getTablesL(result);
                //var p1 = useractivity.getAllUserActivityX(result);
                return $q.all([p0]).then(function (d){
                    catansReady = true;
                    landAnswerCheckStatus(); 
                });              
            });
            data.answer = idx;
                var p2 = special.getSpecialsX([data]);
                var p3 = matchrec.GetMatchTableX([data]);
                var p4 = edit.getEditsX([data]);
                var p5 = table2.getTablesX([data]);
                var p6 = vrows.getVrowsX([data]);
                
                return $q.all([p2, p3, p4, p5, p6]).then(function (d){
                    dataReady = true;
                    landAnswerCheckStatus();  
                });
            
        }

        function landAnswerCheckStatus(){
            if (answerReady && catansReady && dataReady){
                    if ($rootScope.isLoggedIn){
                        if (demoDataReady){
                            $rootScope.rankSummaryDataLoaded = true;
                            $rootScope.answerDetailLoaded = true;
                            $rootScope.$emit('answerDataLoaded');
                        }
                    }
                    else{
                        $rootScope.rankSummaryDataLoaded = true;
                        $rootScope.answerDetailLoaded = true;
                        $rootScope.$emit('answerDataLoaded');
                    }
            }
        }
*/
        function checkStatus(){
            if ($rootScope.pageDataLoaded && _ranksLoaded && !landAnswerActive){
                    $rootScope.rankSummaryDataLoaded = true;
                    $rootScope.answerDetailLoaded = true;
                    $rootScope.$emit('rankDataLoaded');
                }
        }

        function waitforImages(cats){
            //get all fimage and wait until they are resolved
            var pArr = [];
            cats.forEach(function(item){
                if (item.fimage != null && item.fimage != undefined && item.fimage.indexOf('rankx')>-1) 
                    pArr.push( $http.get(item.fimage) );
            });
            $q.all(pArr).then(function(){
                $rootScope.$emit('initalHomeDataLoaded');
            });
        }

        function shuffle(){
            //Randomly get 12 ranks from those listed in rids and cids
            var N = rids.length;
            var idxs = [];
            var n = 0;
            while (idxs.length < 12){
                n = Math.floor(Math.random() * N);
                if (idxs.indexOf(n) == -1) idxs.push(n);
            }
            
            idxs.forEach(function(i){
                ridsx.push(rids[i]);
                cidsx.push(cids[i]);
            })

        }
                
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('cblock', cblock);

    cblock.$inject = ['$http', '$q', '$rootScope'];

    function cblock($http, $q, $rootScope) {

        // Members
        var _cblocks = [];
        var baseURI = '/api/v2/mysql/_table/cblocks';

        var service = {
            getcblocks: getcblocks,
            getcblocksmain: getcblocksmain,
			getcblocksall: getcblocksall,
            addcblock: addcblock,
            update: update,
            deleteRec: deleteRec
        };

        return service;

        function getcblocks(forceRefresh) {

            if (_arecblocksLoaded() && !forceRefresh) {

                return $q.when(_cblocks);
            }

            //var url = baseURI;
            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
           //var url0 = baseURI + '/?filter=scope=city';

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                _cblocks = d[0].data.resource;
                if ($rootScope.DEBUG_MODE) console.log("No. C-Blocks: ", _cblocks.length);
                return _cblocks;            
            }, _queryFailed);  

        }

        function getcblocksmain() {

            //Get all match records
            var url0 = baseURI + '/?filter=ismp=true';
           //var url0 = baseURI + '/?filter=scope=city';

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                _cblocks = d[0].data.resource;
                if ($rootScope.DEBUG_MODE) console.log("No. C-Blocks: ", _cblocks.length);
                return _cblocks;            
            }, _queryFailed);  

        }

        function getcblocksall() {

            //Get all match records
            var url0 = baseURI + '/?filter=ismp=false';
           //var url0 = baseURI + '/?filter=scope=city';

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                _cblocks = _cblocks.concat(d[0].data.resource);
                if ($rootScope.DEBUG_MODE) console.log("No. C-Blocks: ", _cblocks.length);
                return _cblocks;            
            }, _queryFailed);  

        }

        function addcblock(cblock) {
            
            var url = baseURI;
            var resource = [];

            resource.push(cblock);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var cblockx = cblock;
                cblockx.id = result.data.resource[0].id;
                _cblocks.push(cblockx);

                console.log("adding cblock succesful", result);
                return result.data;
            }

        }

        
        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
                switch (field[i]) {
                    case "catstr": data.catstr = val[i]; break;
                    case "ismp": data.ismp = val[i]; break;                                          
                }
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _cblocks.map(function(x) {return x.id; }).indexOf(id);  
            for (var i = 0; i < field.length; i++) {
                switch (field[i]) {
                    case "catstr": _cblocks[idx].catstr = val[i]; break;
                    case "ismp": _cblocks[idx].ismp = val[i]; break;                                    
                }
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("updating cblocks succesful");
                return result.data;
            }
        }
        
        function deleteRec(block_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = block_id;

            obj.resource.push(data);

            var url = baseURI + '/' + block_id;
            
            //update (delete answer) local copy of answers
            var i = _cblocks.map(function (x) { return x.id; }).indexOf(block_id);
            if (i > -1) _cblocks.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("Deleting cblock was succesful");
                return result.data;
            }
        }

        function _arecblocksLoaded() {

            return _cblocks.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('categories', categories);

    categories.$inject = ['$http', '$q', '$rootScope','$window'];

    function categories($http, $q, $rootScope, $window) {

        // Members
        var _categories = [];
        $rootScope.categories = _categories;

        var baseURI = '/api/v2/mysql/_table/categories';

        var service = {
            getAllCategories: getAllCategories,
            getAllCategoriesX: getAllCategoriesX,
            getCategoriesL: getCategoriesL,
            getCategory: getCategory,
            addCategory: addCategory,
            update: update,
            deleteRec: deleteRec,
            getInitialHomeData: getInitialHomeData,
            storeInitialHomeData: storeInitialHomeData
        };

        return service;

        function getInitialHomeData(data){
            /*
            var catsFromStorage = $window.localStorage.getItem("Categories-HomeData");
            if (catsFromStorage) {
                 _load(JSON.parse(catsFromStorage));
                 return $q.when(true);
            }*/

            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'id=' + data[i]+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);

            var url0 = baseURI + filterstr;
            var p0 = $http.get(url0);

            return $q.all([p0]).then(function (d){
                var datax = d[0].data.resource;
                
                //if (_categories.length == 0) _load(datax);
                 _append(datax);

                if ($rootScope.DEBUG_MODE) console.log("categories length: ", _categories.length);
                //$window.localStorage.setItem("Categories-HomeData", JSON.stringify(datax));
                return _categories;            
            }, _queryFailed);  

        }

        function getAllCategories(forceRefresh) {

            //Get all match records
            var url0 = baseURI + '?offset=' + 0 * 1000;
           
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Categories ", _categories.length);
                return _categories;            
            }, _queryFailed);  

        }

        function getAllCategoriesX(scope) {

            var url0 = baseURI + '?offset=' + 0 * 1000+'&filter=scope='+scope;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Categories ", _categories.length);
                return _categories;            
            }, _queryFailed);  
        }

        function getCategoriesL(data) {

            var filterstr = '?filter=(';
            for (var i=0; i< data.length; i++){
                filterstr = filterstr + 'id=' + data[i].cat+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            var url0 = baseURI + filterstr;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _append (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Categories ", _categories.length);
                return _categories;            
            }, _queryFailed);  
        }

        function getCategory(id){
            
            var url0 = baseURI + '/?filter=id=' + id;
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                if ($rootScope.DEBUG_MODE) console.log("loaded single category ", data);
                return data;            
            }, _queryFailed);  
        }

        function addCategory(category) {

            category.scope = $rootScope.SCOPE;
            
            var url = baseURI;
            var resource = [];

            resource.push(category);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var categoryx = category;
                categoryx.id = result.data.resource[0].id;
                _categories.push(categoryx);

                console.log("adding categoryx succesful", result);
                return result.data;
            }

        }

        
        function update(id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            for (var i = 0; i < field.length; i++) {
            	data[field[i]] =  val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                //update local copy
                var idx = _categories.map(function (x) { return x.id; }).indexOf(id);
                for (var i = 0; i < field.length; i++) {
                    _categories[idx][field[i]] = val[i];
                }

                //unwrap to local copy of $rootScope.content
                for (var i = 0; i < $rootScope.content.length; i++) {
                    if ($rootScope.content[i].cat == _categories[idx].id) {
                        for (var j = 0; j < field.length; j++) {
                            $rootScope.content[i][field[j]] = val[j];
                        }
                        //update searchStr
                        $rootScope.searchStrContent[i] = $rootScope.content[i].tags + $rootScope.content[i].title; 
                    }
                }

                if ($rootScope.DEBUG_MODE) console.log("updating categoryx succesful");
                return result.data;
            }
        }
        
        function deleteRec(category_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = category_id;

            obj.resource.push(data);

            var url = baseURI + '/' + category_id;
            
            //update (delete answer) local copy of answers
            var i = _categories.map(function (x) { return x.id; }).indexOf(category_id);
            if (i > -1) _categories.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting category was succesful");
                return result.data;
            }
        }

        function storeInitialHomeData(cids){
            var data = [];
            var idx = 0;
            cids.forEach(function(i){
                 idx = _categories.map(function (x) { return x.id; }).indexOf(i);
                 if (idx > -1) data.push(_categories[idx]);
            });
            $window.localStorage.setItem("Categories-HomeData", JSON.stringify(data));
        }

        function _load(data){
            _categories.length = 0;
            data.forEach(function(x){
                _categories.push(x);
            });
        }

        function _append(data){
           data.forEach(function(item){
                var idx = _categories.map(function(x) {return x.id; }).indexOf(item.id);
                if (idx < 0) _categories.push(item);
            }); 
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
angular.module('app').directive('userfeedBlock', 
    ['$rootScope', '$state',  'fbusers', '$q','uaf','color','dataloader',
    function ($rootScope, $state, fbusers, $q, uaf, color, dataloader) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/userfeed-block.html',
        transclude: true,
        scope: {
            showAll: '@',
            showQty: '@'
        },
        controller: ['$scope','$window', 'uaf',
            
            function contentCtrl($scope, $window, uaf) {
                var vm = $scope;
                vm.title = 'mycontent';

                vm.sm = $rootScope.sm;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';
 
            }], //end controller
        link: function (scope) {

            var si = 0;
            pullData($rootScope.uafs.slice(si,scope.showQty));

            if (scope.isDestroyed == undefined){
                   getFeed();
            }   

            var bgc = '#595959';
            var bgc2 = color.shadeColor(bgc, 0.5);
            scope.headerStyle = 'color:#f8f8ff;width:100%;border-style:none;'+
                       'background:'+bgc+';'+
  					   'background: -webkit-linear-gradient(left,'+bgc+','+bgc2+');'+
  					   'background: -o-linear-gradient(right,'+bgc+','+bgc2+');'+
  					   'background: -moz-linear-gradient(right,'+bgc+', '+bgc2+');'+
  					   'background: linear-gradient(to right,'+bgc+', '+bgc2+');';  

        function getFeed(){
            // vm.feeds = angular.copy($rootScope.uafs);
            //console.log("$rootScope.uafs.length - ",$rootScope.uafs.length);
            load();
            //load uafs directly (without facebook) on init
            if (scope.feeds.length == 0) scope.feeds = $rootScope.uafs;

            /*if(scope.showAll == 'true')
                scope.fres = 30;
            else
                scope.fres = 6;
            scope.ftext = 'see more';*/

            scope.fres = scope.showQty;
        }
        
        function load() {

            scope.feeds = [];
            $q.all($rootScope.uafs.map(function (feed) {
                return fbusers.getFBUserById(feed.userid);
            }))
                .then(function (fbUsers) {
                    scope.feeds = [];
                    for (var i = 0; i < $rootScope.uafs.length; i++) {
                        var userWithPic = angular.copy($rootScope.uafs[i]);
                        userWithPic.picture = fbUsers[i] ? fbUsers[i].picture.data.url : null;
                        
                        scope.feeds[i] = userWithPic;
                    }
                });
            
        }
		
        function pullData(uafs){
            var ranks = [];
            var ans = [];
            var item = {};
            for (var i=0; i<uafs.length; i++){
                item = {};
                if (uafs[i].action == 'addedCustomRank') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'addedRank') {item.id = uafs[i].category; ranks.push(item);}
                if (uafs[i].action == 'binded') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'downVotedVrow') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'upVotedVrow') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'editA') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'commentA') {item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'commentR') {item.id = uafs[i].category; ranks.push(item);}
                if (uafs[i].action == 'downVoted') {item.id = uafs[i].category; ranks.push(item);
                    item = {}, item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'upVoted') {item.id = uafs[i].category; ranks.push(item);
                    item = {}, item.id = uafs[i].answer; ans.push(item);}
                if (uafs[i].action == 'addedAnswer') {item.id = uafs[i].category; ranks.push(item);
                    item = {}, item.id = uafs[i].answer; ans.push(item);}
            }
            
            if (ans.length > 0) dataloader.pulldata('answers',ans);
            if (ranks.length > 0) dataloader.pulldata('ranks',ranks);
        }
        /*
        scope.seeMoreFeed = function(isShowAll){
            if(scope.showAll == 'true'){
                uaf.getnext10actions().then(function(){
                    scope.fres += 20;
                    getFeed();
                })
                
            }         
            else{
                $state.go('feeds');
            }
        }*/
        scope.$watch('showQty', function() {
                si = scope.fres;
                scope.fres = scope.showQty;
                pullData($rootScope.uafs.slice(si,scope.showQty));
                //scope.disableScrolling = !scope.scrollactive;                                   
        });

        
        scope.refreshFeed = function(){
            if ($rootScope.DEBUG_MODE) console.log("refreshFeed");
            uaf.getactions().then(function(response){
                $rootScope.uafs = response;
                getFeed();
            });
        }

        scope.gotoAnswer = function(x){
            $state.go('answerDetail',{index: x.answer});
        }
        scope.gotoRank = function(x){
            $state.go('rankSummary',{index: x.category});
        }             

            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
             
        },
    }
}

]);
angular.module('app').directive('trendBlock', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 
    'vrows','$window','cblock','color','search','dataloader',
    function ($rootScope, $state, answer, table, catans, $timeout, 
        vrows, $window, cblock, color, search, dataloader) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/trend-block.html',
        transclude: true,
        scope: {
            showAll: '@'
        },
        controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
            
            function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
                var vm = $scope;
                vm.title = 'mycontent';

                vm.sm = $rootScope.sm;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';
 
            }], //end controller
        link: function (scope) {

            if (scope.isDestroyed == undefined){
                //   loadContent();
            }   
                scope.popularLimit = 10;
                var sip = 0; //start  index for pulling data - popular
                scope.newestLimit = 10;
                var sin = 0; //start  index for pulling data - newest
                scope.userfeedLimit = 10;    
                
                scope.seeTab = function(x){
                    if (x == 1){
                        scope.popular = true;
                        scope.newest = false;
                    }
                    if (x == 2){
                        scope.newest = true;
                        scope.popular = false;
                    }
                };

                scope.seeTab(1); 
                loadContent()
                //load content based on mode
                function loadContent() {
                    var res = angular.copy($rootScope.content.filter(function(ranking){ return ranking.ismp == 1;}));
                    res.sort(function(ranking1, ranking2){
                        var view1 = ranking1.views ? ranking1.views : 0;
                        var view2 = ranking2.views ? ranking2.views : 0;
                        if( ranking1.id == ranking2.id )
                            return 0;

                        return view1 < view2 ? 1 : -1;
                    })

                    res.forEach(function(ranking){
                        if(ranking.fimage && ranking.fimage != '') {
                            ranking.realimage = ranking.fimage;
                        } else if (ranking.image1url  && ranking.image1url != '') {
                            ranking.realimage = ranking.image1url;
                        } else {
                            ranking.realimage = $rootScope.EMPTY_IMAGE;
                        }
                        ranking.humanized = moment(ranking.timestmp).fromNow();
                    })
                    scope.popularOrder = res;
                    dataloader.pulldata('ranks',scope.popularOrder.slice(sip,scope.popularLimit));

                    res = angular.copy($rootScope.content.filter(function(ranking){ return ranking.ismp == 1;}));

                    res.sort(function(ranking1, ranking2){
                        var view1 = ranking1.timestmp ? ranking1.timestmp : 0;
                        var view2 = ranking2.timestmp ? ranking2.timestmp : 0;
                        if( ranking1.id == ranking2.id )
                            return 0;

                        return view1 < view2 ? 1 : -1;
                    });
                    res.forEach(function(ranking){
                        if(ranking.fimage  && ranking.fimage != '') {
                            ranking.realimage = ranking.fimage;
                        } else if (ranking.image1url  && ranking.image1url != '') {
                            ranking.realimage = ranking.image1url;
                        } else {
                            ranking.realimage = $rootScope.EMPTY_IMAGE;
                        }
                        ranking.humanized = moment(ranking.timestmp).fromNow();
                    })
                    scope.newestOrder = res;
                    dataloader.pulldata('ranks',scope.newestOrder.slice(sin,scope.newestLimit));
                }
            scope.seeMore = function(status){
                if(status == 'newest') {
                    sin = scope.newestLimit; 
                    scope.newestLimit += 8;
                    dataloader.pulldata('ranks',scope.newestOrder.slice(sin,scope.newestLimit));
                }
                if (status == 'popular') {
                    sip = scope.popularLimit; 
                    scope.popularLimit += 8;
                    dataloader.pulldata('ranks',scope.popularOrder.slice(sip,scope.popularLimit));
                }
                if (status == 'userfeed') scope.userfeedLimit += 8;            
            }

            scope.goBack = function(){
                $rootScope.$emit('backToResults');            
            }

            scope.rankSel = function (x,nm) {
                if (nm) $rootScope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else {
                    $state.go('rankSummary', { index: x.slug });
                }
            };
           
            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });

            scope.getHumanized = function(timstamp) {
                return moment(timstamp).fromNow();
            }
             
        },
    }
}

]);
angular.module('app').directive('searchBlock', ['$rootScope', '$state', 'search', 
'$timeout', '$window','dataloader','$http','$q',
function ($rootScope, $state, search, 
    $timeout, $window, dataloader, $http, $q) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/search-block.html',
        transclude: true,
        scope: {
            query: '@',
            ans: '=',
            ranks: '=',
            length: '=',
            init: '=',
            data: '=',
            rod: '=',
            scrollactive: '=',
        },
        controller: ['$scope',
            
            function contentCtrl($scope) {

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) { $scope.itemWidth = ($window.innerWidth - 8)/2; }
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) { $scope.itemWidth = ($window.innerWidth - 8)/3; }
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) { $scope.itemWidth = ($window.innerWidth - 8)/4; }
                if ($window.innerWidth > 1200) { $scope.itemWidth = ($window.innerWidth - 8)/6; }
            }], //end controller
        link: function (scope) {

            var pullDataArray = [];
            var homeRanks = [];
            var ranksLoaded = false;

            var _currentOffset = -1;
            var _lastOffset = -1;
            var _loadMoreThreshold = 0;
            var _renderTime = 0;

            scope.contentLoaded = false;
            
            if ($rootScope.DISPLAY_XSMALL == true) _loadMoreThreshold = 400;
            if ($rootScope.DISPLAY_SMALL == true) _loadMoreThreshold = 400;
            if ($rootScope.DISPLAY_MEDIUM == true) _loadMoreThreshold = 400;
            if ($rootScope.DISPLAY_LARGE == true) _loadMoreThreshold = 300;

            if ($rootScope.DISPLAY_XSMALL == true || $rootScope.DISPLAY_SMALL == true) _renderTime = 1000;
            if ($rootScope.DISPLAY_MEDIUM == true || $rootScope.DISPLAY_LARGE == true) _renderTime = 1000;
            
            scope.rankSel = function (x,nm) {
                
                if (x.useTemp){
                if (nm) $rootScope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                var selectedRank = {};
                for (var i=0; i<$rootScope.content.length; i++){
                    if (x.id == $rootScope.content[i].cat){
                        if (x.locationId == $rootScope.content[i].nh) selectedRank = $rootScope.content[i];
                    }
                }
                
                if(selectedRank.id == undefined){
                    if ($rootScope.DEBUG_MODE) console.log("Rank is Ghost");

                   var maxId = 0;
                    $rootScope.content.forEach(function(ranking){
                        if(ranking.id > maxId)
                            maxId = ranking.id;
                    });
                    maxId ++;
                    var slug = x.title.toLowerCase();; 
                    slug = slug.replace(/ /g,'-');
                    slug = slug.replace('/','at');
                    slug = slug + '-' + maxId;

                    var ghostRank = {
                        id: maxId,  //TODO when add to db, should delete id and update slug.
                        catstr: '' + maxId,
                        slug: slug,
                        isGhost: true,
                        title: x.title,
                        type: x.type,
                        tags: x.tags,
                        keywords: x.keywords,
                        question: x.question,
                        fimage: x.fimage,
                        bc: x.bc,
                        fc: x.fc,
                        shade: x.shade,
                        introtext: x.introtext,
                        user: x.user ,
                        views: 0,
                        answers: 0,
                        image1url: $rootScope.EMPTY_IMAGE,
                        image2url: $rootScope.EMPTY_IMAGE,
                        image3url: $rootScope.EMPTY_IMAGE,
                        answertags: '',
                        isatomic: 1, //TODO decide isatomic, numcom, ismp, owner, 
                        timestmp: new Date(),
                        cat: x.id,
                        nh: x.locationId,
                    }
                    if ($rootScope.DEBUG_MODE) console.log("ghostRank - ", ghostRank);
                    $rootScope.content.push(ghostRank);
                    //update searchString to keep array lengths in sync
                    $rootScope.searchStrContent.push(ghostRank.tags ? ghostRank.tags : '') + " " + (ghostRank.title ? ghostRank.title : '');
                    $state.go('rankSummary', { index: slug });
                } else {
                    if ($rootScope.DEBUG_MODE) console.log("rank is normal ", selectedRank);
                    if ($rootScope.editMode) $state.go('editRanking', { index: selectedRank.slug });
                    else {
                        $state.go('rankSummary', { index: selectedRank.slug });
                    }
                }
            }
            else {
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else {
                    $state.go('rankSummary', { index: x.slug });
                }                  
            }
            };
            scope.ansSel = function (x) {
                $rootScope.PAGEYOFFSET =  window.pageYOffset;
                $rootScope.cCategory = undefined; //clear current category
                //scope.disableScrolling = true;
                $state.go('answerDetail', { index: x.slug });                
            };

            scope.resRanks = [];
            scope.resAnswers = [];
            scope.searchResults = [];
            scope.displayResults = [];
            scope.maxRes = 4000;
            
            var timeoutPromise;
            scope.$watch('query', function() {
                if (ranksLoaded) queryPreamble();
                else scope.contentLoaded = false;
            });

            $rootScope.$on('updateSearch', function(){
                queryPreamble()
            })

            function queryPreamble(){
                 $timeout.cancel(timeoutPromise); //do nothing is timeout already done   
                    timeoutPromise = $timeout(function () {
                        if (scope.query.length >= 2) {
                            scope.disableScrolling = false;
                            scope.endReached = false;
                            scope.getResults(scope.query);
                            
                        }
                        if (scope.query.length == 0) {
                            var temp = homeRanks.map(function(rank){
                                if (rank.id == $rootScope.updated_rank_id) {
                                    $rootScope.content.map(function(x){
                                        if (x.id == $rootScope.updated_rank_id) {
                                            return rank = angular.copy(x)
                                        }
                                    })
                                }
                                return rank;
                            });
                            homeRanks = temp;
                            scope.searchResults = homeRanks;
                            scope.endReached = false;
                            scope.displayResults = scope.searchResults.slice(0, scope.scrollingItemsOnePage);
                        }
                    }, 300);
            }

            //Filter content based on user input
            scope.getResults = function() {
                scope.useTemp = false;
                scope.resRanks = [];
                var catRanks = [];
                //if( scope.resRanks.length > 0) {
                //    catRanks = [];
                    scope.resRanks = search.searchRanks2(scope.query);
                    catRanks = search.searchRanks(scope.query);
                    var catmap = scope.resRanks.map(function(x) {return x.cat; });
                    
                    for (var i = 0; i < catRanks.length; i++){
                        if (catmap.indexOf(catRanks[i].id) < 0) {
                            scope.resRanks.push(catRanks[i]);
                        }
                    }
                    
                    if (scope.resRanks.length > 0){
                        scope.disableScrolling = false;
                        scope.currentIndex = scope.intialDataCount;
                        scope.startIndex = 0;
                        scope.endReached = false;
                        //scope.loadMore();
                    }
                //}
                scope.resAnswers = [];
                if(scope.ans) scope.resAnswers = search.searchAnswers(scope.query);
                for (var i=0; i<scope.resAnswers.length; i++){
                    scope.resAnswers[i].isAnswer = true;
                    if (scope.resAnswers[i].type == 'Establishment') {
                        scope.resAnswers[i].itext = 'Establishment';
                        scope.resAnswers[i].icon = 'fa fa-building-o';

                    }
                    if (scope.resAnswers[i].type == 'Person'){
                        scope.resAnswers[i].itext = 'Public Figure'; 
                        scope.resAnswers[i].icon = 'fa fa-male';
                    }
                    if (scope.resAnswers[i].type == 'PersonCust'){
                        scope.resAnswers[i].itext = 'Contractor'; 
                        scope.resAnswers[i].icon = 'fa fa-male';
                    }
                    if (scope.resAnswers[i].type == 'Short-Phrase') {
                        scope.resAnswers[i].itext = 'Opinion';
                        scope.resAnswers[i].icon = 'fa fa-comment-o';
                    }
                    if (scope.resAnswers[i].type == 'Event') {
                        scope.resAnswers[i].itext = 'Event';
                        scope.resAnswers[i].icon = 'fa fa-calendar-o';
                    }
                    if (scope.resAnswers[i].type == 'Organization') {
                        scope.resAnswers[i].itext = 'Brand';
                        scope.resAnswers[i].icon = 'fa fa-trademark';
                    }
                    if (scope.resAnswers[i].type == 'Place') {
                        scope.resAnswers[i].itext = 'Place';
                        scope.resAnswers[i].icon = 'fa fa-map-marker';
                    } 
                }

                scope.length = scope.resRanks.length + scope.resAnswers.length;
                scope.searchResults = scope.resRanks.concat(scope.resAnswers);
                //resolve images for the ranks about to be displayed
                resolveImages(scope.searchResults.slice(0,scope.scrollingItemsOnePage)).then(function(){
                    scope.contentLoaded = true;
                    scope.displayResults = scope.searchResults.slice(0,scope.scrollingItemsOnePage);
                    scope.loadMore(true);
                    $timeout(function(){
                        $rootScope.$broadcast('masonry.reload');
                    },500);
                });
                
                pullDataArray = scope.searchResults.slice(0,scope.scrollingItemsOnePage);
                var ranksRes = [];
                var answerRes = []; 
                for (var i=0; i<pullDataArray.length; i++){
                    if (pullDataArray[i].isAnswer) answerRes.push(pullDataArray[i]);
                    else ranksRes.push(pullDataArray[i]);
                }
                if (ranksRes.length > 0) pullData('ranks', ranksRes);
                if (answerRes.length > 0) pullData('answers', answerRes);
                
                scope.relTags = search.searchRelatedRanks(ranksRes, scope.query);
                scope.relTagsIdx = 0;
                
                if (scope.searchResults.length < 3) {
                    //console.log("scrolling disabled");
                    scope.disableScrolling = true;
                }
                else scope.disableScrolling = false;
                                
            }

            var timeoutPromise2;
            scope.$watch('init', function() {
                $timeout.cancel(timeoutPromise2); //do nothing is timeout already done   
                timeoutPromise2 = $timeout(function(){
                    if (scope.init) scope.getContent();
                },50);                                   
            });

            //Get content on loading
            scope.getContent = function () {
                homeRanks = [];

                if ($rootScope.content.length < 50)
                    homeRanks = JSON.parse(JSON.stringify($rootScope.content));
                else {
                    $rootScope.content.forEach(function (item) {
                        if (item.ismp) homeRanks.push(item);
                    });
                }

                if (homeRanks.length > 0) {
                    shuffle(homeRanks);
                    scope.disableScrolling = false;
                    scope.currentIndex = scope.intialDataCount;
                    scope.startIndex = 0;
                    scope.endReached = false;
                }
                ranksLoaded = false;
                scope.searchResults = homeRanks;
                scope.displayResults = scope.searchResults.slice(0, scope.scrollingItemsOnePage);
                pullDataArray = scope.searchResults.slice(0, scope.scrollingItemsOnePage);
                pullData('ranks', pullDataArray);
                scope.contentLoaded = true;
                $timeout(function(){
                    $rootScope.$broadcast('masonry.reload');
                },1500);          
            }

            var timeoutPromise3;
            scope.$watch('data', function() {
                $timeout.cancel(timeoutPromise3); //do nothing is timeout already done   
                timeoutPromise3 = $timeout(function(){
                    if (scope.data) scope.addContent();
                },50);                                   
            });

            scope.addContent = function(){
                
                var map = homeRanks.map(function(x) {return x.id; });
                
                $rootScope.content.forEach(function(ranking){
                    if (map.indexOf(ranking.id) < 0 && ranking.ismp) homeRanks.push(ranking);                    
                });
                
                scope.searchResults = JSON.parse(JSON.stringify(homeRanks));
                ranksLoaded = true;
                scope.contentLoaded = true;
                queryPreamble();  
            }

            var timeoutPromise4;
            scope.$watch('rod', function () {
                $timeout.cancel(timeoutPromise4); //do nothing is timeout already done   
                timeoutPromise4 = $timeout(function () {
                    if (scope.rod == true) {
                        if ($rootScope.rankofday) {
                            var obj = $rootScope.rankofday;
                            obj[0].isrod = true;
                            homeRanks[0] = obj[0];
                            scope.displayResults[0] = obj[0];
                        }
                    }
                }, 50);
            });

            scope.$watch('scrollactive', function() {
                scope.disableScrolling = !scope.scrollactive;
                if (!scope.disableScrolling && scope.displayResults.length < 20) $rootScope.$broadcast('masonry.reload');                                   
            });

            if($rootScope.sm){
                scope.scrollingItemsOnePage = 6;
                scope.loadingCountOneScroll = 3;
            }
            else{
                scope.loadingCountOneScroll = 6;
                scope.scrollingItemsOnePage = 12;
            }
            scope.scrollingItemsOnePage = 12;
            scope.scrollingData = [];
            scope.scrollDataLoading = false;
            scope.content = [];
            scope.intialDataCount = $rootScope.numInitItems;
            scope.endReached = false;
            scope.disableScrolling = true;
            scope.scrollingData = [];
            scope.uniqueResult = [];
            loadInifiniteScroll(true);

            scope.loadMore = function (forceLoad) {
                //console.log("loadMore - ");
                _currentOffset = $window.pageYOffset;
                if (Math.abs(_currentOffset-_lastOffset)<_loadMoreThreshold && !forceLoad) {
                    //console.log("loadMore - doNothing");
                }
                else {
                    //console.log("loadMore - exec ", _currentOffset, forceLoad);
                    _lastOffset = _currentOffset;
                    if (scope.scrollactive) {
                        scope.scrollDataLoading = true;

                        //$timeout(function () {
                            //load next items onto displayResults array
                            var b = scope.displayResults.length;
                            pullDataArray = [];
                            for (var i = b; i < b + scope.scrollingItemsOnePage; i++) {
                                if (scope.searchResults[i]) {
                                    //if not already in display array, add it to display 
                                    var idx = scope.displayResults.map(function(x) {return x.id; }).indexOf(scope.searchResults[i].id);
                                    if (idx < 0) {
                                        scope.displayResults.push(scope.searchResults[i]);
                                        pullDataArray.push(scope.searchResults[i]);
                                    }
                                }
                            }

                            if (pullDataArray.length > 0) pullData('ranks', pullDataArray);
                            scope.scrollDataLoading = false;

                            //load more content
                            if ((scope.searchResults.length - scope.displayResults.length) < 12 && scope.relTags != undefined) {
                                if (scope.relTags[scope.relTagsIdx] != undefined) {
                                    var moreRanks = search.searchRanks2(scope.relTags[scope.relTagsIdx].tag);
                                    scope.relTagsIdx++;
                                    //If new ranks do not exist already in results, add it
                                    moreRanks.forEach(function (nrank) {
                                        if (scope.searchResults.map(function (x) { return x.id; }).indexOf(nrank.id) < 0 &&
                                            nrank.ismp == true) {
                                            scope.searchResults.push(nrank);
                                        }
                                    });
                                    //scope.loadMore(true);
                                }
                            }

                            //add more related tags    
                            if (scope.relTags != undefined) {
                                if (scope.relTagsIdx == scope.relTags.length - 1) {
                                    //console.log("added more tags");
                                    scope.relTags = search.searchRelatedRanks(scope.searchResults, scope.query);
                                    scope.relTagsIdx = 0;
                                    //console.log("scope.relTags - ", scope.relTags);
                                }
                            }

                            if ((scope.displayResults.length == scope.searchResults.length) && ranksLoaded) {
                                if (scope.relTags != undefined) {
                                    if (scope.relTagsIdx == scope.relTags.length - 1) {
                                        scope.endReached = true;
                                    }
                                }
                                else scope.endReached = true;
                            }
                        //}, 0);
                        $timeout(function(){
                            $rootScope.$broadcast('masonry.reload');
                        },_renderTime);
                    }
                }
            }

            function pullData(type,data){
                    dataloader.pulldata(type, data);
            }

            function loadInifiniteScroll(reloading) {
                scope.currentIndex = 12;
                scope.startIndex = 0;
                scope.loadingCountOneScroll = 6;
                scope.scrollingData = [];
                scope.scrollDataLoading = false;
                scope.content = [];
                scope.endReached = false;
                scope.scrollingData = [];
            }

            function resolveImages(results){
                var pArr = [];
                scope.contentLoaded = false;
                results.forEach(function(item){
                    if (item.isAnswer) {}//pArr.push($http.get(item.imageurl));
                    else {
                        if (item.fimage != null && item.fimage != undefined && item.fimage.indexOf('rankx')>-1)
                        pArr.push($http.get(item.fimage));
                    }
                });
                return $q.all(pArr);
            }

            function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }


            
        },
    }
    /*angular.module('app').directive('contentBlock', function() {
        */
}
]);
angular.module('app').directive('resultItem',
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows', '$window', 'cblock', 'color', 'search',
        function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
            'use strict';

            return {
                templateUrl: 'app/content/partials/result-block.html',
                transclude: true,
                scope: {
                    resultObject: '='
                },
                controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows', '$window', 'cblock', 'color', 'search',

                    function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
                        var vm = $scope;
                        vm.title = 'mycontent';

                        vm.sm = $rootScope.sm;

                        //Adjust picture size for very small displays
                        if ($window.innerWidth < 768) vm.thumbheight = '80px';
                        if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                        if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                        if ($window.innerWidth > 1200) vm.thumbheight = '100px';

                    }], //end controller
                link: function (scope, elem, attr) {

                    if (scope.isDestroyed == undefined) {
                        loadContent();
                    }

                    //load content based on mode
                    function loadContent() {

                        var w = $window.innerWidth - 20;
                        scope.w2 = Math.round(w / 2);
                        scope.w4 = Math.round(w / 4) - 5;
                        scope.w8 = Math.round(w / 8);

                        var resObj = {};

                        resObj = {};
                        resObj = scope.resultObject; //JSON.parse(JSON.stringify(scope.resultObject));
                        scope.result = resObj;


                        if (resObj.isAnswer == true) scope.title = resObj.name;
                        else scope.title = resObj.title;
                        
                        if (resObj.isAnswer == true) scope.imageurl = resObj.imageurl;
                        else scope.imageurl = resObj.fimage;

                        scope.isAnswer = resObj.isAnswer == undefined ? false:resObj.isAnswer;
                        /*
                        if (resObj.isAnswer == true) scope.introtext = resObj.addinfo.slice(0,150);
                        else {
                            var introtext = '';
                            //If introtext exist load it, if not, create custom intro text
                            if (resObj.introtext) {
                                var start = resObj.introtext.indexOf('++');
                                var end = resObj.introtext.indexOf('--');
                                if (start > -1 && end > -1) introtext = resObj.introtext.substring(start + 2, end);
                                else introtext = resObj.introtext;
                            }
                            else introtext = 'Endorse your favorite ' + resObj.title + '. ';
                            scope.introtext = introtext.slice(0, 150);
                        }*/

                        //scope.type = resObj.type;
                        if (resObj.isAnswer){
                            if (resObj.type == 'Establishment') scope.type = 'Establishment';
                            if (resObj.type == 'Event') scope.type = 'Event';
                            if (resObj.type == 'Organization') scope.type = 'Organization';
                            if (resObj.type == 'Person') scope.type = 'Public Figure';
                            if (resObj.type == 'PersonCust') scope.type = 'Professional';
                            if (resObj.type == 'Place') scope.type = 'Place';
                            if (resObj.type == 'Short-Phrase') scope.type = 'Opinion';
                        }
                        else scope.type = 'Ranking';
                        

                        //Get rank stats
                        scope.stats = {};
                        scope.stats.views = resObj.views;
                        scope.stats.answers = resObj.answers;
                        scope.stats.numcom = resObj.numcom;

                        if (scope.stats.numcom == undefined || scope.stats.numcom == null)
                            scope.stats.numcom = 0;
                        
                        //Set Feautured Image && box color
                        if (!resObj.isAnswer) { 
                            //if fimage is undefined
                            if (scope.imageurl == undefined || scope.imageurl == '' || scope.imageurl == null) {
                                scope.imageurl = resObj.image1url;
                            }
                            
                            //if bc and fc are undefined
                            /*
                            if (resObj.bc != undefined && resObj.bc != '') {
                                    scope.bc = resObj.bc;
                                    scope.fc = resObj.fc;
                                    scope.shade = resObj.shade;
                            }
                            else {
                                    var colors = color.defaultRankColor(resObj);
                                    scope.bc = colors[0];
                                    scope.fc = colors[1];
                                    scope.shade = -4;
                            }*/
                            
                            scope.bc = 'gray';
                            scope.fc = '#f8f8ff';
                            scope.shade = 4;
                        }
                        else {
                            //Choose color randomly
                            
                            //var x = Math.floor(Math.random() * 5) + 1;
                            if (resObj.type == 'Organization') { scope.bc = 'brown'; scope.fc = '#f8f8ff'; }
                            if (resObj.type == 'Establishment') { scope.bc = '#4682b4'; scope.fc = '#f8f8ff'; }
                            if (resObj.type == 'Place') { scope.bc = '#008080'; scope.fc = '#f8f8ff'; }
                            if (resObj.type == 'Short-Phrase') { scope.bc = '#2d5a6a'; scope.fc = '#f8f8ff'; }
                            if (resObj.type == 'Event') { scope.bc = '#176ced'; scope.fc = '#f8f8ff'; }
                            if (resObj.type == 'Person' || resObj.type == 'PersonCust') { scope.bc = '#c68c53'; scope.fc = '#f8f8ff'; }
                            
                            scope.shade = -4;
                        }
                        if (resObj.type == 'Short-Phrase') scope.image1 = $rootScope.EMPTY_IMAGE;
                    }

                    function editTitle(x) {
                        x.titlex = x.title.replace(' in San Diego', '');
                        if (x.answers == 0 && x.type != 'Short-Phrase') x.image1url = $rootScope.EMPTY_IMAGE;
                    }

                    function parseShortAnswer(x) {
                        //Check if results is Short-Phrase
                        if (x.type == 'Short-Phrase') {

                            x.isShortPhrase = true;
                            if (x.image1url != undefined) {
                                var sPVals1 = x.image1url.split("##");
                                x.title1 = sPVals1[0];
                                x.addinfo1 = sPVals1[1];
                            }
                            if (x.image2url != undefined) {
                                var sPVals2 = x.image2url.split("##");
                                x.title2 = sPVals2[0];
                                x.addinfo2 = sPVals2[1];
                            }
                            if (x.image3url != undefined) {
                                var sPVals3 = x.image3url.split("##");
                                x.title3 = sPVals3[0];
                                x.addinfo3 = sPVals3[1];
                            }
                        }
                    }

                    scope.resSel = function (x) {
                        $rootScope.pageYOffset = $window.pageYOffset;
                        scope.stats.views++;
                        if (x.isAnswer) {
                            $rootScope.cCategory = undefined;
                            $state.go('answerDetail', { index: x.id });
                        }
                        else {
                            if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                            else {
                                $state.go('rankSummary', { index: x.slug });
                            }
                        }
                    };

                    scope.$on('$destroy', function () {
                        scope.isDestroyed = true;
                    });

                },
            }
        }

    ]);
angular.module('app').directive('rankOfDay', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
    function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/rank-of-day.html',
        transclude: true,
        scope: {
            part: '='
        },
        controller: ['$scope', '$rootScope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search', 'rankofday',
            
            function contentCtrl($scope, $rootScope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search, rankofday) {
                var vm = $scope;
                vm.title = 'mycontent';

                if (!$rootScope.rankofday) {
                    rankofday.getrankofday().then(function(rankofday){
                        $scope.rankObject = $rootScope.rankofday = rankofday;
                        loadContent();
                    });
                } else {
                    $scope.rankObject = $rootScope.rankofday;
                    loadContent();
                }
                vm.sm = $rootScope.DISPLAY_XSMALL;
                
                vm.maxRes = 2;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';


                //load content based on mode
                function loadContent() {
                    //var catstr = '';
                    //var idxs = [];
                    //var nidx = 0;
                    //var rankid = 0;
                    //$scope.results = [];
                    //var bFound = false;

                    var w = $window.innerWidth-20;
                    $scope.w2 = Math.round(w/2);
                    $scope.w4 = Math.round(w/4)-5;
                    $scope.w8 = Math.round(w/8); 

                    //
                    //$scope.resultsTop = [];
                    var resObj = {};

                    resObj = {};
                    resObj = JSON.parse(JSON.stringify($scope.rankObject));

                    // if ($scope.rankObject.image1url != $root$scope.EMPTY_IMAGE && 
                    //     $scope.rankObject.image1url != undefined &&
                    //     $scope.rankObject.image1url != ''){
                        editTitle(resObj);
                        parseShortAnswer(resObj);
                        // if (resObj.type != 'Short-Phrase' || resObj.fimage != undefined){
                            //$scope.resultsTop.push(resObj);
                        // }
                    // }
                    $scope.rank = resObj;
                    
                    //var tr = $scope.resultsTop[0]; //top result
                    $scope.title = resObj.title;
                    
                    //Get rank stats
                    $scope.stats = {};
                    $scope.stats.views = resObj.views;
                    $scope.stats.answers = resObj.answers;
                    $scope.stats.numcom = resObj.numcom;

                    if ($scope.stats.numcom == undefined || $scope.stats.numcom == null )
                    $scope.stats.numcom = 0;

                    $scope.isBasic = true;
                    
                        //Set Feautured Image && box color
                    if (resObj.fimage != undefined && resObj.fimage != ''){
                        $scope.image4 = resObj.image3url;
                        $scope.image3 = resObj.image2url;
                        $scope.image2 = resObj.image1url;
                        $scope.image1 = resObj.fimage;
                        $scope.bc = resObj.bc;
                        $scope.fc = resObj.fc;
                        $scope.shade = resObj.shade;              
                    }
                    else{
                        //Set colors for title hideInfoBox
                        var colors = color.defaultRankColor(resObj);
                        $scope.bc = colors[0];
                        $scope.fc = colors[1];
                        /*var x = Math.floor(Math.random() * 6) + 1;
                        if (x == 1) {$scope.bc = 'brown'; $scope.fc = '#f8f8ff'; }
                        if (x == 2) {$scope.bc = '#4682b4'; $scope.fc = '#f8f8ff'; }
                        if (x == 3) {$scope.bc = '#008080'; $scope.fc = '#f8f8ff'; }
                        if (x == 4) {$scope.bc = 'gray'; $scope.fc = '#f8f8ff'; }
                        if (x == 5) {$scope.bc = '#a3297a'; $scope.fc = '#f8f8ff'; }
                        if (x == 6) {$scope.bc = '#c68c53'; $scope.fc = '#f8f8ff'; }
        */
                        $scope.shade = -4;
                        $scope.image3 = resObj.image3url;
                        $scope.image2 = resObj.image2url;
                        $scope.image1 = resObj.image1url;
                    } 
                                            
                }

                function editTitle(x){
                    x.titlex = x.title.replace(' in San Diego','');
                    if (x.answers == 0 && x.type != 'Short-Phrase') x.image1url = $rootScope.EMPTY_IMAGE;
                }

                function parseShortAnswer(x) {
                    //Check if results is Short-Phrase
                    if (x.type == 'Short-Phrase') {

                        x.isShortPhrase = true;
                        if (x.image1url != undefined) {
                            var sPVals1 = x.image1url.split("##");
                            $scope.title1 = sPVals1[0];
                            $scope.addinfo1 = sPVals1[1];
                        }
                        if (x.image2url != undefined) {
                            var sPVals2 = x.image2url.split("##");
                            $scope.title2 = sPVals2[0];
                            $scope.addinfo2 = sPVals2[1];
                        }
                        if (x.image3url != undefined) {
                            var sPVals3 = x.image3url.split("##");
                            $scope.title3 = sPVals3[0];
                            $scope.addinfo3 = sPVals3[1];
                        }
                        $scope.isShortPhrase = true;
                        $scope.bcp = '#2952a3';
                        $scope.bc2p = '#5c85d6';
                        $scope.fcp = '#e6e6e6';
                        
                    }
                }          
 
            }], //end controller
        link: function (scope) {
               

            scope.rankSel = function (x,nm) {
                if (nm) $rootscope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else {
                    $state.go('rankSummary', { index: x.slug });
                }
            };
           
            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
             
        },
    }
}

]);
angular.module('app').directive('rankItem', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
    function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/rank-block.html',
        transclude: true,
        scope: {
            rankObject: '='
        },
        controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
            
            function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
                var vm = $scope;
                vm.title = 'mycontent';

                vm.sm = $rootScope.sm;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';
 
            }], //end controller
        link: function (scope) {

            //console.log("--------------------rank item-------------------");
            if (scope.isDestroyed == undefined){
                   loadContent();
            }
                        
                //load content based on mode
                function loadContent() {

                    var w = $window.innerWidth-20;
                    scope.w2 = Math.round(w/2);
                    scope.w4 = Math.round(w/4)-5;
                    scope.w8 = Math.round(w/8); 
              
                    var resObj = {};

                    resObj = {};
                    //resObj = JSON.parse(JSON.stringify(scope.rankObject));
                    resObj = scope.rankObject;
                    scope.rank = resObj;
                    
                    editTitle(scope.rankObject);
                    
                    scope.title = resObj.title;
                    scope.rod = resObj.isrod;
                    
                    //Get rank stats
                    scope.stats = {};
                    scope.stats.views = resObj.views;
                    scope.stats.answers = resObj.answers;
                    scope.stats.numcom = resObj.numcom;
                    
                    if (scope.stats.numcom == undefined || scope.stats.numcom == null )
                    scope.stats.numcom = 0;

                    //Set Feautured Image && box color
                if (resObj.fimage != undefined && resObj.fimage != ''){
                    scope.image4 = resObj.image3url;
                    scope.image3 = resObj.image2url;
                    scope.image2 = resObj.image1url;
                    scope.image1 = resObj.fimage;
                    if (resObj.bc != undefined && resObj.bc != ''){
                        scope.bc = resObj.bc;
                        scope.fc = resObj.fc;
                        scope.shade = resObj.shade;
                    }
                    else{
                        var colors = color.defaultRankColor(resObj);
                        scope.bc = colors[0];
                        scope.fc = colors[1];
                        scope.shade = -4;                        
                    }              
                }
                else{
                    //Set colors for title hideInfoBox
                    var colors = color.defaultRankColor(resObj);
                    scope.bc = colors[0];
                    scope.fc = colors[1];
                    /*var x = Math.floor(Math.random() * 6) + 1;
                    if (x == 1) {scope.bc = 'brown'; scope.fc = '#f8f8ff'; }
                    if (x == 2) {scope.bc = '#4682b4'; scope.fc = '#f8f8ff'; }
                    if (x == 3) {scope.bc = '#008080'; scope.fc = '#f8f8ff'; }
                    if (x == 4) {scope.bc = 'gray'; scope.fc = '#f8f8ff'; }
                    if (x == 5) {scope.bc = '#a3297a'; scope.fc = '#f8f8ff'; }
                    if (x == 6) {scope.bc = '#c68c53'; scope.fc = '#f8f8ff'; }
    */
                    scope.shade = -4;
                    scope.image3 = resObj.image3url;
                    scope.image2 = resObj.image2url;
                    scope.image1 = resObj.image1url;
                }
                //if (resObj.type == 'Short-Phrase') scope.image1 = $rootScope.EMPTY_IMAGE; 
                                        
            }

            function editTitle(x){
                //x.titlex = x.title.replace(' in San Diego','');
                if (x.answers == 0 && x.type != 'Short-Phrase') x.image1url = $rootScope.EMPTY_IMAGE;
            }

            function parseShortAnswer(x) {
                //Check if results is Short-Phrase
                if (x.type == 'Short-Phrase') {

                    x.isShortPhrase = true;
                    if (x.image1url != undefined) {
                        var sPVals1 = x.image1url.split("##");
                        x.title1 = sPVals1[0];
                        x.addinfo1 = sPVals1[1];
                    }
                    if (x.image2url != undefined) {
                        var sPVals2 = x.image2url.split("##");
                        x.title2 = sPVals2[0];
                        x.addinfo2 = sPVals2[1];
                    }
                    if (x.image3url != undefined) {
                        var sPVals3 = x.image3url.split("##");
                        x.title3 = sPVals3[0];
                        x.addinfo3 = sPVals3[1];
                    }
                }
            }             

            scope.rankSel = function (x,nm) {
                if (nm) $rootScope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else {
                    $state.go('rankSummary', { index: x.slug });
                }
            };
           
            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
             
        },
    }
}

]);
angular.module('app').directive('rankBlock', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
    function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/rank-block.html',
        transclude: true,
        scope: {
            theme: '@',
            type: '@',
        },
        controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
            
            function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
                var vm = $scope;
                vm.title = 'mycontent';

                vm.sm = $rootScope.sm;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';
 
            }], //end controller
        link: function (scope) {

            if (scope.isDestroyed == undefined){
                   loadContent();
            }
                        
                //load content based on mode
                function loadContent() {
                    console.log("-------------------load content------------------");
                    var catstr = '';
                    var idxs = [];
                    var nidx = 0;
                    var rankid = 0;
                    scope.results = [];
                    var bFound = false;

                    var w = $window.innerWidth-20;
                    scope.w2 = Math.round(w/2);
                    scope.w4 = Math.round(w/4)-5;
                    scope.w8 = Math.round(w/8); 

                    //load content 
                    for (var i = 0; i < $rootScope.cblocks.length; i++) {
                        if (($rootScope.cblocks[i].scope == 'city' && $rootScope.isCity) &&
                            ($rootScope.cblocks[i].type == scope.theme)) {
                            catstr = $rootScope.cblocks[i].catstr;
                            idxs = catstr.split(':');
                            shuffle(idxs);
                            for (var j = 0; j < idxs.length; j++) {
                                nidx = $rootScope.content.map(function(x) {return x.id; }).indexOf(Number(idxs[j]));
                                scope.results.push($rootScope.content[nidx]);
                            }
                            bFound = true;
                            break;
                        }
                    }
                    
                    //
                    scope.resultsTop = [];
                    var resObj = {};
                    //var M = scope.results.length > 2 ? 3:scope.results.length;
                    var M = scope.results.length;
                    if (M > 0) {
                        for (var n = 0; n < M; n++) {
                            resObj = {};
                            resObj = JSON.parse(JSON.stringify(scope.results[n]));
    /*
                            //Set only ranks with good images on front-page
                            if (scope.results[n].fimage != $rootScope.EMPTY_IMAGE && 
                                scope.results[n].fimage != undefined &&
                                scope.results[n].fimage != ''){
                                editTitle(resObj);
                                parseShortAnswer(resObj);
                                scope.resultsTop.push(resObj);
                            }
    */
                            //Set only ranks with good images on front-page
                            if (scope.results[n].image1url != $rootScope.EMPTY_IMAGE && 
                                scope.results[n].image1url != undefined &&
                                scope.results[n].image1url != ''){
                                editTitle(resObj);
                                parseShortAnswer(resObj);
                                if (resObj.type != 'Short-Phrase' || resObj.fimage != undefined){
                                    scope.resultsTop.push(resObj);
                                }
                            }


                            /*
                            else {
                                //shift up results, move rank with bad images to end of array
                                for (var m = n; m < M-1; m++){
                                    scope.results[m] = scope.results[m+1]; 
                                }
                                scope.results[M-1] = resObj;
                            }
                            if (scope.resultsTop.length > 2 || scope.resultsTop.length == M ) {
                                scope.results = scope.results.slice(scope.resultsTop.length+1);
                                break;
                            }*/
                        }
                        
                    }
                    var tr = scope.resultsTop[0]; //top result
                    scope.title = tr.title;
                    
                    //Get rank stats
                    scope.stats = {};
                    scope.stats.views = tr.views;
                    scope.stats.answers = tr.answers;
                    scope.stats.numcom = tr.numcom;

                    if (scope.stats.numcom == undefined || scope.stats.numcom == null )
                    scope.stats.numcom = 0;

                    if (scope.type == 'basic') scope.isBasic = true;
                    if (scope.type == 'grid4') scope.isGrid4 = true;
                    

                    //Set Feautured Image && box color
                if (tr.fimage != undefined && tr.fimage != ''){
                    scope.image4 = tr.image3url;
                    scope.image3 = tr.image2url;
                    scope.image2 = tr.image1url;
                    scope.image1 = tr.fimage;
                    scope.bc = tr.bc;
                    scope.fc = tr.fc;
                    scope.shade = tr.shade;              
                }
                else{
                    //Set colors for title hideInfoBox
                    var colors = color.defaultRankColor(tr);
                    scope.bc = colors[0];
                    scope.fc = colors[1];
                    /*var x = Math.floor(Math.random() * 6) + 1;
                    if (x == 1) {scope.bc = 'brown'; scope.fc = '#f8f8ff'; }
                    if (x == 2) {scope.bc = '#4682b4'; scope.fc = '#f8f8ff'; }
                    if (x == 3) {scope.bc = '#008080'; scope.fc = '#f8f8ff'; }
                    if (x == 4) {scope.bc = 'gray'; scope.fc = '#f8f8ff'; }
                    if (x == 5) {scope.bc = '#a3297a'; scope.fc = '#f8f8ff'; }
                    if (x == 6) {scope.bc = '#c68c53'; scope.fc = '#f8f8ff'; }
    */
                    scope.shade = -4;
                    scope.image3 = tr.image3url;
                    scope.image2 = tr.image2url;
                    scope.image1 = tr.image1url;
                } 
                                        
            }

            function shuffle(array) {
                var currentIndex = array.length, temporaryValue, randomIndex;

                // While there remain elements to shuffle...
                while (0 !== currentIndex) {

                    // Pick a remaining element...
                    randomIndex = Math.floor(Math.random() * currentIndex);
                    currentIndex -= 1;

                    // And swap it with the current element.
                    temporaryValue = array[currentIndex];
                    array[currentIndex] = array[randomIndex];
                    array[randomIndex] = temporaryValue;
                }

                return array;
            }

            function editTitle(x){
                x.titlex = x.title.replace(' in San Diego','');
                if (x.answers == 0 && x.type != 'Short-Phrase') x.image1url = $rootScope.EMPTY_IMAGE;
            }

            function parseShortAnswer(x) {
                //Check if results is Short-Phrase
                if (x.type == 'Short-Phrase') {

                    x.isShortPhrase = true;
                    if (x.image1url != undefined) {
                        var sPVals1 = x.image1url.split("##");
                        x.title1 = sPVals1[0];
                        x.addinfo1 = sPVals1[1];
                    }
                    if (x.image2url != undefined) {
                        var sPVals2 = x.image2url.split("##");
                        x.title2 = sPVals2[0];
                        x.addinfo2 = sPVals2[1];
                    }
                    if (x.image3url != undefined) {
                        var sPVals3 = x.image3url.split("##");
                        x.title3 = sPVals3[0];
                        x.addinfo3 = sPVals3[1];
                    }
                }
            }             

            scope.rankSel = function (x,nm) {
                if (nm) $rootScope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else {
                    $state.go('rankSummary', { index: x.slug });
                }
            };
           
            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
             
        },
    }
}

]);
angular.module('app').directive('facebookFollow', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
    function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/facebook-follow.html',
        transclude: true,
        scope: {
            theme: '@',
            type: '@',
        },
        controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
            
            function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
            }], //end controller
        link: function (scope) {

        },
    }
}

]);
angular.module('app').directive('contentBlock', ['$rootScope', '$state', 'search', '$timeout', '$window',
function ($rootScope, $state, search, $timeout, $window) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/content-block.html',
        transclude: true,
        scope: {
            query: '@',
            ans: '=',
            ranks: '=',
            length: '=',
        },
        controller: ['$scope',
            
            function contentCtrl($scope) {

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) { $scope.itemWidth = ($window.innerWidth - 8)/2; }
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) { $scope.itemWidth = ($window.innerWidth - 8)/3; }
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) { $scope.itemWidth = ($window.innerWidth - 8)/4; }
                if ($window.innerWidth > 1200) { $scope.itemWidth = ($window.innerWidth - 8)/6; }
            }], //end controller
        link: function (scope) {

            scope.rankSel = function (x,nm) {
                scope.disableScrolling = true;
                //console.log("scope.disableScrolling = ", scope.disableScrolling);
                if (x.useTemp){
                if (nm) $rootScope.rankIsNearMe = true;
                else $rootScope.rankIsNearMe = false;
                var selectedRank = {};
                for (var i=0; i<$rootScope.content.length; i++){
                    if (x.id == $rootScope.content[i].cat){
                        if (x.locationId == $rootScope.content[i].nh) selectedRank = $rootScope.content[i];
                    }
                }
                
                if(selectedRank.id == undefined){
                   var maxId = 0;
                    $rootScope.content.forEach(function(ranking){
                        if(ranking.id > maxId)
                            maxId = ranking.id;
                    });
                    maxId ++;
                    var slug = x.title.toLowerCase();; 
                    slug = slug.replace(/ /g,'-');
                    slug = slug.replace('/','at');
                    slug = slug + '-' + maxId;

                    var ghostRank = {
                        id: maxId,  //TODO when add to db, should delete id and update slug.
                        catstr: '' + maxId,
                        slug: slug,
                        isGhost: true,
                        title: x.title,
                        type: x.type,
                        tags: x.tags,
                        keywords: x.keywords,
                        question: x.question,
                        fimage: x.fimage,
                        bc: x.bc,
                        fc: x.fc,
                        shade: x.shade,
                        introtext: x.introtext,
                        user: x.user ,
                        views: 0,
                        answers: 0,
                        image1url: $rootScope.EMPTY_IMAGE,
                        image2url: $rootScope.EMPTY_IMAGE,
                        image3url: $rootScope.EMPTY_IMAGE,
                        answertags: '',
                        isatomic: 1, //TODO decide isatomic, numcom, ismp, owner, 
                        timestmp: new Date(),
                        cat: x.id,
                        nh: x.locationId,
                    }
                    
                    $rootScope.content.push(ghostRank);
                    //update searchString to keep array lengths in sync
                    $rootScope.searchStrContent.push(ghostRank.tags ? ghostRank.tags : '') + " " + (ghostRank.title ? ghostRank.title : '');

                    $state.go('rankSummary', { index: slug });
                } else {
                    if ($rootScope.editMode) $state.go('editRanking', { index: selectedRank.slug });
                    else {
                        $state.go('rankSummary', { index: selectedRank.slug });
                    }
                }
            }
            else {
                if ($rootScope.editMode) $state.go('editRanking', { index: x.slug });
                else $state.go('rankSummary', { index: x.slug });                  
            }
            };
            scope.ansSel = function (x) {
                $rootScope.cCategory = undefined;
                scope.disableScrolling = true;
                //console.log("scope.disableScrolling = ", scope.disableScrolling);
                $state.go('answerDetail', { index: x.slug });                
            };

            scope.resRanks = [];
            scope.resAnswers = [];
            scope.searchResults = [];
            scope.maxRes = 4000;
            
            var timeoutPromise;
            scope.$watch('query', function() {
                $timeout.cancel(timeoutPromise); //do nothing is timeout already done   
                timeoutPromise = $timeout(function(){
                //console.time('stime - ', scope.query);
                scope.getResults();
                //console.timeEnd('etime - ', scope.query);
                    
                },300);                                   
            });

            //Filter content based on user input
            scope.getResults = function() {
                scope.useTemp = false;
                scope.resRanks = [];
                var catRanks = [];
                if( scope.ranks) {
                    catRanks = [];
                    scope.resRanks = search.searchRanks2(scope.query);
                    catRanks = search.searchRanks(scope.query);
                    var catmap = scope.resRanks.map(function(x) {return x.cat; });
                    
                    for (var i = 0; i < catRanks.length; i++){
                        if (catmap.indexOf(catRanks[i].id) < 0) {
                            scope.resRanks.push(catRanks[i]);
                        }
                    }
                    
                    if (scope.resRanks.length > 0){
                        scope.disableScrolling = false;
                        scope.currentIndex = scope.intialDataCount;
                        scope.startIndex = 0;
                        scope.endReached = false;
                        //scope.loadMore();
                    }
                }

                scope.length = scope.resRanks.length + scope.resAnswers.length;
                scope.searchResults = scope.resRanks;
            }

            scope.currentIndex = 0;
            scope.startIndex = 0;
            if($rootScope.sm){
                scope.scrollingItemsOnePage = 6;
                scope.loadingCountOneScroll = 3;
            }
            else{
                scope.loadingCountOneScroll = 6;
                scope.scrollingItemsOnePage = 6;
            }
            scope.scrollingItemsOnePage = 1000;
            scope.scrollingData = [];
            scope.scrollDataLoading = false;
            scope.content = [];
            scope.intialDataCount = 12;
            scope.endReached = false;
            scope.disableScrolling = true;
            //console.log("scope.disableScrolling = ", scope.disableScrolling);
            scope.scrollingData = [];
            scope.uniqueResult = [];
            loadInifiniteScroll(true);

            scope.loadMore = function () {
                //console.log("loadMore --",scope.startIndex, scope.currentIndex, scope.searchResults.length );

                scope.scrollDataLoading = true;
                
                $timeout(function () {
                
                scope.currentIndex = scope.currentIndex + 12;
                if (scope.currentIndex >= scope.searchResults.length) {
                    
                    //console.log("end reached - ");
                    scope.endReached = true;
                }
                if((scope.currentIndex - scope.startIndex) > scope.scrollingItemsOnePage){
                    scope.startIndex = scope.currentIndex - scope.scrollingItemsOnePage;        
                } 
                    scope.scrollDataLoading = false;
                }, 500);
            }

            function loadInifiniteScroll(reloading) {
                //console.log("loadingInfiniteScroll --");

                scope.currentIndex = 12;
                scope.startIndex = 0;
                scope.loadingCountOneScroll = 6;
                scope.scrollingData = [];
                scope.scrollDataLoading = false;
                scope.content = [];
                scope.endReached = false;
                scope.scrollingData = [];

            }
            
        },
    }
    /*angular.module('app').directive('contentBlock', function() {
        */
}
]);
angular.module('app').directive('answerItem', 
    ['$rootScope', '$state', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
    function ($rootScope, $state, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
    'use strict';

    return {
        templateUrl: 'app/content/partials/answer-block.html',
        transclude: true,
        scope: {
            answerObject: '='
        },
        controller: ['$scope', 'query', '$http', 'answer', 'table', 'catans', '$timeout', 'vrows','$window','cblock','color','search',
            
            function contentCtrl($scope, query, $http, answer, table, catans, $timeout, vrows, $window, cblock, color, search) {
                var vm = $scope;
                vm.title = 'mycontent';

                vm.sm = $rootScope.sm;

                //Adjust picture size for very small displays
                if ($window.innerWidth < 768) vm.thumbheight = '80px';
                if ($window.innerWidth >= 768 && $window.innerWidth < 992) vm.thumbheight = '100px';
                if ($window.innerWidth >= 992 && $window.innerWidth < 1200) vm.thumbheight = '80px';
                if ($window.innerWidth > 1200) vm.thumbheight = '100px';
 
            }], //end controller
        link: function (scope) {

            if (scope.isDestroyed == undefined){
                   loadContent();
            }
                        
                //load content based on mode
                function loadContent() {

                    var w = $window.innerWidth-20;
                    scope.w2 = Math.round(w/2);
                    scope.w4 = Math.round(w/4)-5;
                    scope.w8 = Math.round(w/8); 

                    var resObj = {};

                    resObj = {};
                    resObj = JSON.parse(JSON.stringify(scope.answerObject));
                    scope.answer = resObj;
                    
                    if (resObj.type == 'Short-Phrase') parseShortAnswer(resObj);
                    
                    //Get rank stats
                    scope.stats = {};
                    scope.stats.views = resObj.views;
                    scope.stats.answers = resObj.answers;
                    scope.stats.numcom = resObj.numcom;

                    if (scope.stats.numcom == undefined || scope.stats.numcom == null )
                    scope.stats.numcom = 0;

                    //Choose color randomly
                    var x = Math.floor(Math.random() * 5) + 1;
                    if (x == 1) {scope.bc = 'brown'; scope.fc = '#f8f8ff'; }
                    if (x == 2) {scope.bc = '#4682b4'; scope.fc = '#f8f8ff'; }
                    if (x == 3) {scope.bc = '#008080'; scope.fc = '#f8f8ff'; }
                    if (x == 4) {scope.bc = 'gray'; scope.fc = '#f8f8ff'; }
                    //if (x == 5) {scope.bc = '#a3297a'; scope.fc = '#f8f8ff'; }
                    if (x == 5) {scope.bc = '#c68c53'; scope.fc = '#f8f8ff'; }
    
                    scope.shade = -4;
                    if (resObj.imageurl != undefined && resObj.imageurl != '' && resObj.imageurl != null)
                    scope.image1 = resObj.imageurl;
                    else
                    scope.image1 = $rootScope.EMPTY_IMAGE;

                    if (resObj.type == 'Short-Phrase') scope.image1 = $rootScope.EMPTY_IMAGE;
                    
                } 
                                        

            function parseShortAnswer(x) {
                //Check if results is Short-Phrase
                if (x.type == 'Short-Phrase') {

                    x.isShortPhrase = true;
                    if (x.image1url != undefined) {
                        var sPVals1 = x.image1url.split("##");
                        x.title1 = sPVals1[0];
                        x.addinfo1 = sPVals1[1];
                    }
                    if (x.image2url != undefined) {
                        var sPVals2 = x.image2url.split("##");
                        x.title2 = sPVals2[0];
                        x.addinfo2 = sPVals2[1];
                    }
                    if (x.image3url != undefined) {
                        var sPVals3 = x.image3url.split("##");
                        x.title3 = sPVals3[0];
                        x.addinfo3 = sPVals3[1];
                    }
                }
            }             

            scope.ansSel = function (x) {
                $state.go('answerDetail', { index: x.slug });                
            };
           
            scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
             
        },
    }
}

]);

angular.module('app') .directive('fileModel', ['$parse', function ($parse) { 
    'use strict';
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);
angular.module('app').directive('bgBox3', ['color','$timeout','$rootScope',function (color, $timeout, $rootScope) {
    'use strict';

    return {
        templateUrl: 'app/common/partials/bgbox3.html',
        transclude: true,
        scope: {
            bc: '@',
            bc2: '@',
            fc: '@',
            shade: '@',
            text: '@',
            dir: '@',
            stats: '@',
            w: '@',
            h: '@',
            introtext: '@',
            type: '@',
            imageurl: '@',
            isAnswer: '@'
        },
        link: function (scope) {

            
        $timeout(function(){
            scope.showStats = scope.type == 'Ranking';

            var S = JSON.parse(scope.stats);
            scope.views = S.views;
            scope.answers = S.answers;
            scope.comments = S.numcom;

            if ($rootScope.DISPLAY_XSMALL == true) scope.sm = true;
            else scope.sm = false;

           if (scope.dir == "horizontal"){
               scope.dirHor = true;
               scope.dirVer = false;
           }
           if (scope.dir == "vertical"){
               scope.dirHor = false;
               scope.dirVer = true;
           }
           if (scope.bc2 == undefined) scope.bc2 = color.shadeColor(scope.bc,scope.shade/10);
            
        });   
           scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
        
        scope.addView = function(){
            scope.views++;
        }
        
        },
    }
}
]);
angular.module('app').directive('bgBox2', ['color','$timeout',function (color,$timeout) {
    'use strict';

    return {
        templateUrl: 'app/common/partials/bgbox2.html',
        transclude: true,
        scope: {
            bc: '@',
            bc2: '@',
            fc: '@',
            shade: '@',
            text: '@',
            dir: '@',
            stats: '@',
            w: '@',
            h: '@',
            question: '@',
            isRankOfDay: '@',
        },
        link: function (scope, elem, attrs) {

        $timeout(function(){
            //console.log("@bgbox2 - scope.rank - ", scope.rank);
            var S = JSON.parse(scope.stats);
            scope.views = S.views;
            scope.answers = S.answers;
            scope.comments = S.numcom;
            
           if (scope.dir == "horizontal"){
               scope.dirHor = true;
               scope.dirVer = false;
           }
           if (scope.dir == "vertical"){
               scope.dirHor = false;
               scope.dirVer = true;
           }
           if (scope.bc2 == undefined) scope.bc2 = color.shadeColor(scope.bc,scope.shade/10);
            
        });

           scope.$on('$destroy',function(){
                scope.isDestroyed = true;
            });
        },
    }
}
]);
angular.module('app').directive('bgBox', ['color',function (color) {
    'use strict';

    return {
        templateUrl: 'app/common/partials/bgbox.html',
        transclude: true,
        scope: {
            bc: '@',
            bc2: '@',
            fc: '@',
            shade: '@',
            text: '@',
            dir: '@',
            w: '@',
            h: '@',
        },
        link: function (scope) {

           if (scope.dir == "horizontal"){
               scope.dirHor = true;
               scope.dirVer = false;
           }
           if (scope.dir == "vertical"){
               scope.dirHor = false;
               scope.dirVer = true;
           }
           if (scope.bc2 == undefined) scope.bc2 = color.shadeColor(scope.bc,scope.shade/10); 
        },
    }
}
]);
(function () {
    'use strict';

    angular
        .module('app')
        .factory('vrowvotes', vrowvotes);

    vrowvotes.$inject = ['$http', '$q', '$rootScope','uaf'];

    function vrowvotes($http, $q, $rootScope, uaf) {

        // Members
        var _vrowvotes = [];
        var baseURI = '/api/v2/mysql/_table/vrowvotes';

        var service = {
            loadVrowVotes: loadVrowVotes,
            patchRec: patchRec,
			postRec: postRec,
            deleteVrowVotesbyVrow: deleteVrowVotesbyVrow			
        };

        return service;

        function loadVrowVotes(forceRefresh) {
      
             if (_areVrowVotesLoaded() && !forceRefresh) {

                return $q.when(_vrowvotes);
            }
            
           //Get all vote records for current user
            var url = baseURI + '?filter=user='+ $rootScope.user.id;
             
            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return _vrowvotes = result.data.resource;
            }
                 
        }
		
        function postRec(vrow_id, vote) {
            
            //form match record
            var obj = {};
            obj.resource = [];
                     
            var data={};
            data.user = $rootScope.user.id;
            data.answer = $rootScope.canswer.id;
            data.vrow = vrow_id;
            data.val = vote;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI; 
            
            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copies
                var datax = data;
                datax.id = result.data.resource[0].id; 
                _vrowvotes.push(datax);
                
                $rootScope.cvrowvotes.push(datax);
               
               //user activity feed 
               if (data.val == 1) uaf.post('upVotedVrow',['answer','vrow'],[data.answer, datax.vrow]); 
               if (data.val == -1) uaf.post('downVotedVrow',['answer','vrow'],[data.answer, datax.vrow]);  
                
                if ($rootScope.DEBUG_MODE) console.log("Creating new vrowvoting record was succesful");
                return result.data;
            }
        }
        
        function patchRec(rec_id,vote) {
            
            //form match record
            var obj = {};
            obj.resource = [];
            
           
            var data={};
            data.id = rec_id;
            data.val = vote;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI; 
            
             //update local record of vrowvotes
            var i = _vrowvotes.map(function(x) {return x.id; }).indexOf(rec_id);
            _vrowvotes[i].vote = vote;
            _vrowvotes[i].timestmp = data.timestmp;
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Updating vrow vote record was succesful");
                return result.data;
            }
        }
        function deleteVrowVotesbyVrow(vrow_id) {
            
            //delete records from local copy
            for (var i=0; i<_vrowvotes.length;i++){
                if (_vrowvotes[i].vrow == vrow_id){
                    _vrowvotes.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=vrow=' + vrow_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting vrow votes records was succesful");
                return result.data;
            }
        }
        
        function _areVrowVotesLoaded(id) {

            return _vrowvotes.length > 0;
        }
        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('vrows', vrows);

    vrows.$inject = ['$http', '$q', '$rootScope', 'vrowvotes'];

    function vrows($http, $q, $rootScope, vrowvotes) {

        // Members
        var _allvrows = [];
        var _fetchAnswersMem = [];
        $rootScope.cvrows = _allvrows;
        var baseURI = '/api/v2/mysql/_table/vrows';

        var service = {
            getAllvrows: getAllvrows,
            getVrowsX: getVrowsX,
            postRec: postRec,
            postRec2: postRec2,
            deleteVrowByAnswer: deleteVrowByAnswer,
            deleteVrow: deleteVrow,
            updateRec: updateRec,
            deleteVrowByGroup: deleteVrowByGroup,
            //postVrows4Answer: postVrows4Answer
        };

        return service;

        function getAllvrows(forceRefresh) {

            //Get all vrows records
            var url0 = baseURI + '?offset=' + 0 * 1000;

            var p0 = $http.get(url0);

            return $q.all([p0]).then(function (d) {
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Vrows: ", _allvrows.length);
                return _allvrows;
            }, _queryFailed); 

            //return _allvrows;
        }

        function getVrowsX(data) {

            var _datax = [];  //this is filtered array (ignore those answers for which vrows already fetched)
            data.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.answer)<0){
                     _datax.push(item);
                     _fetchAnswersMem.push(item.answer);
                }
            });

            if (_datax.length == 0) return $q.when(false);

            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'answer=' + _datax[i].answer+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            //Get all vrows records
            var url0 = baseURI + filterstr;
            
            var p0 = $http.get(url0);
          
            return $q.all([p0]).then(function (d) {
                
                var _allvrowsx = d[0].data.resource;
                var map = _allvrows.map(function(x) {return x.id; });
                
                _allvrowsx.forEach(function(vrowobj){
                        if(map.indexOf(vrowobj.id) < 0)
                        _allvrows.push(vrowobj);
                });

                if ($rootScope.DEBUG_MODE) console.log("No. Vrows: ", _allvrows.length);
                return _allvrowsx;
            }, _queryFailed); 

            //return _allvrows;
        }
/*
        function postVrows4Answer(answer) {
            var titles = [];
            var obj = {};
            var vrowsobjs = [];
            if ($rootScope.cCategory.tags.indexOf('food') > -1 || $rootScope.cCategory.tags.indexOf('services') > -1 ||
                $rootScope.cCategory.tags.indexOf('health') > -1 || $rootScope.cCategory.tags.indexOf('beauty') > -1 ||
                $rootScope.cCategory.tags.indexOf('food') > -1 || $rootScope.cCategory.title.indexOf('food') > -1 ||
                $rootScope.cCategory.title.indexOf('restaurants') > -1 ||
                $rootScope.cCategory.title.indexOf('Bars') > -1 || $rootScope.cCategory.title.indexOf('bars') > -1 ||
                $rootScope.cCategory.title.indexOf('pubs') > -1 ||
                $rootScope.cCategory.title.indexOf('Yoga') > -1 || $rootScope.cCategory.title.indexOf('Pilates') > -1 ||
                $rootScope.cCategory.title.indexOf('yoga') > -1 || $rootScope.cCategory.title.indexOf('pilates') > -1||
                $rootScope.cCategory.title.indexOf('schools') > -1 ||
                $rootScope.cCategory.title.indexOf('Gyms') > -1 || $rootScope.cCategory.title.indexOf('gyms') > -1 ||
                $rootScope.cCategory.title.indexOf('Nightclubs') > -1 || answer.type == 'PersonCust' ||
                answer.type == 'Establishment') {

                titles = ['Quality of Service', 'Friendliness of Staff', 'Promptness of Service', 'Value for the Money'];

                if ($rootScope.cCategory.tags.indexOf('food') > -1 || $rootScope.cCategory.title.indexOf('food') > -1 ||
                    $rootScope.cCategory.title.indexOf('restaurants') > -1 || $rootScope.cCategory.title.indexOf('offee') > -1) {
                    titles = ['Quality of Food and Drinks', 'Friendliness of Staff', 'Promptness of Service', 'Value for the Money'];
                }
                if ($rootScope.cCategory.title.indexOf('Bars') > -1 || $rootScope.cCategory.title.indexOf('bars') > -1 ||
                    $rootScope.cCategory.title.indexOf('pubs') > -1) {
                    titles = ['Quality of Drinks', 'Friendliness of Staff', 'Promptness of Service', 'Value for the Money'];
                }

                if ($rootScope.cCategory.title.indexOf('Gyms') > -1 || $rootScope.cCategory.title.indexOf('gyms') > -1) {
                    titles = ['Equipment & Facilities', 'Friendliness of Staff', 'Environment', 'Value for the Money'];
                }
                
                if ($rootScope.cCategory.title.indexOf('Yoga') > -1 || $rootScope.cCategory.title.indexOf('Pilates') > -1 ||
                    $rootScope.cCategory.title.indexOf('yoga') > -1 || $rootScope.cCategory.title.indexOf('pilates') > -1 ||
                    $rootScope.cCategory.title.indexOf('schools') > -1 || $rootScope.cCategory.title.indexOf('MMA') > -1) {
                    titles = ['Quality of Instructors', 'Friendliness of Staff', 'Class Environment', 'Value for the Money'];
                }
                
                if ($rootScope.cCategory.title.indexOf('Apartments') > -1 || $rootScope.cCategory.title.indexOf('apartments') > -1) {
                    titles = ['Location', 'Floor Layout', 'Facilities', 'Value for the Money'];
                }
                //ranks of categories that include 'shops' or 'stores' but not 'barbershops' or 'coffee shops or repair shops'
                if (($rootScope.cCategory.title.indexOf('shop') > -1 || $rootScope.cCategory.title.indexOf('store') > -1) 
                    && ($rootScope.cCategory.title.indexOf('arber') < 0 && $rootScope.cCategory.title.indexOf('offee') < 0 &&
                    $rootScope.cCategory.title.indexOf('repair') < 0)) {
                    titles = ['Assortment of Products', 'Friendliness of Staff','Value for the Money'];
                }
                if ($rootScope.cCategory.title.indexOf('Tattoo') > -1 || $rootScope.cCategory.title.indexOf('tattoo') > -1) {
                    titles = ['Quality of Service', 'Friendliness of Staff', 'Promptness of Service', 'Value for the Money'];
                }
                
                if ($rootScope.cCategory.title.indexOf('Nightclubs') > -1 || $rootScope.cCategory.title.indexOf('music') > -1 || 
                    $rootScope.cCategory.title.indexOf('dancing') > -1) {
                    titles = [' Quality of Music', 'Environment', 'Friendliness of Staff', 'Value for the Money'];
                }
                if (answer.type == 'PersonCust') {
                    titles = [' Quality of Service', 'Friendliness', 'Value for the Money'];
                }
                //else if ($rootScope.cCategory.tags.includes('services')){
                            
                //}
                for (var n = 0; n < titles.length; n++) {
                    obj = {};
                    obj.gnum = 1;
                    obj.gtitle = 'General';
                    obj.title = titles[n];
                    obj.upV = 0;
                    obj.downV = 0;
                    //obj.timestmp = Date.now();
                    obj.answer = answer.id;
                    vrowsobjs.push(obj);
                    //vrows.postRec(obj);                           
                }
                postRec2(vrowsobjs);
            }

    }
*/
        function postRec(x) {
           
            //form match record
            var data = {};
            data.title = x;
            data.answer = $rootScope.canswer.id;
            data.gtitle = '';
            data.user = $rootScope.user.id;
            data.gnum = 0;
            data.upV = 0;
            data.downV = 0;
            data.timestmp = Date.now();

            var obj = {};
            obj.resource = [];

            obj.resource.push(data);

            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copy
                var newVRow = data;
                newVRow.id = result.data.resource[0].id;
                _allvrows.push(newVRow);
                //$rootScope.cvrows.push(newVRow);

                return result.data;

            }
        }

        function postRec2(x) {

            var obj = {};
            obj.resource = [];

            obj.resource.push(x);
            
            //update local copy
            _allvrows.push.apply(_allvrows, x);

            var url = baseURI;

            return $http.post(url, x, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copy
                var eidx = _allvrows.length - 1;
                for (var n = result.data.resource.length - 1; n >= 0; n--) {
                    _allvrows[eidx].id = result.data.resource[n].id;
                    eidx--;
                }

                return result.data;

            }
        }
        function deleteVrowByAnswer(answer_id) {
            
            //delete records from local copy
            for (var i = 0; i < _allvrows.length; i++) {
                if (_allvrows[i].answer == answer_id) {
                    _allvrows.splice(i, 1);
                }
            }

            var url = baseURI + '?filter=answer=' + answer_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                
                //Everytime a Vrow record is deleted, delete associated user votes with it
                for (var i = 0; i < result.data.resource.length; i++) {
                    vrowvotes.deleteVrowVotesbyVrow(result.data.resource[i].id);
                }

                if ($rootScope.DEBUG_MODE) console.log("Deleting vrows records for answer was succesful");
                return result.data;
            }
        }

        function deleteVrowByGroup(gnum,answer) {
            
            //delete records from local copy
            for (var i = _allvrows.length - 1; i >= 0; i--) {
                if (_allvrows[i].gnum == gnum) {
                    _allvrows.splice(i, 1);
                }
            }
            var url = baseURI + '?filter=(gnum=' + gnum+') AND (answer='+ answer+')';

            return $http.delete(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                
                //Everytime a Vrow record is deleted, delete associated user votes with it
                for (var i = 0; i < result.data.resource.length; i++) {
                    vrowvotes.deleteVrowVotesbyVrow(result.data.resource[i].id);
                }

                if ($rootScope.DEBUG_MODE) console.log("Deleting vrows records for group was succesful");
                return result.data;
            }
        }

        function deleteVrow(vrow_id) {
            
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = vrow_id;

            obj.resource.push(data);

            var url = baseURI + '/' + vrow_id;
            
            //update (delete answer) local copy of answers
            var i = _allvrows.map(function (x) { return x.id; }).indexOf(vrow_id);
            if (i > -1) _allvrows.splice(i, 1);

            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //Everytime a Vrow record is deleted, delete associated user votes with it
                for (var i = 0; i < result.data.resource.length; i++) {
                    vrowvotes.deleteVrowVotesbyVrow(result.data.resource[i].id);
                }

                if ($rootScope.DEBUG_MODE) console.log("Deleting vrow was succesful");
                return result.data;
            }
        }

        function updateRec(rec_id, field, val) {
             
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = rec_id;

            for (var i = 0; i < field.length; i++) {
               data[field[i]] = val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _allvrows.map(function (x) { return x.id; }).indexOf(rec_id);
            for (var i = 0; i < field.length; i++) {
                _allvrows[idx][field[i]] = val[i];
            }

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating vrows record succesful");
                return result.data;
            }
        }

        function _load(data){
            _allvrows.length = 0;
            data.forEach(function(x){
                _allvrows.push(x);
            });
        }

        function _areAllvrowsLoaded() {

            return _allvrows.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('votes', votes);

    votes.$inject = ['$http', '$q', '$rootScope','uaf'];

    function votes($http, $q, $rootScope, uaf) {

        // Members
        var _votes = [];
        var baseURI = '/api/v2/mysql/_table/votetable';

        var service = {
            loadVotesByUser: loadVotesByUser,
            loadAllVotes: loadAllVotes,
            patchRec: patchRec,
			postRec: postRec,
            deleteVotesbyCatans: deleteVotesbyCatans,
            deleteRec: deleteRec,
			loadVotesByMyFriends: loadVotesByMyFriends,
            loadLastMonthVoting: loadLastMonthVoting
            //    addTable: addTable
        };

        return service;


        function loadVotesByUser(forceRefresh) {
      
             if (_isVotesLoaded() && !forceRefresh) {

                return $q.when(_votes);
            }
            
           //Get all vote records for current user
            var url = baseURI + '/?filter=user='+ $rootScope.user.id;
             
            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return _votes = result.data.resource;
            }
                 
        }
        
        function loadVotesByMyFriends(forceRefresh) {
            var filterQuery = "";
            
            for (var i = 0; i < $rootScope.user.friends.data.length; i++) {
                filterQuery += '(user=';
                filterQuery += $rootScope.user.friends.data[i].id;
                filterQuery += ')';
                if( i != $rootScope.user.friends.data.length - 1 )
                    filterQuery += ' or ';
            }

            //Get all vote records for current user
            var url = baseURI + '/?filter=' + filterQuery;
             
            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return result.data.resource;
            }
                 
        }

        function loadAllVotes(forceRefresh) {
      
           //Get all vote records for current user
            var url = baseURI;
             
            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return _votes = result.data.resource;
            }
                 
        }
		
        function postRec(catans_id, answer_id, category_id, vote) {
            
            //form match record
            var obj = {};
            obj.resource = [];
                     
            var data={};
            data.user = $rootScope.user.id;
            data.catans = catans_id;
            data.answer = answer_id;
            data.vote = vote;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI; 
            
            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copies
                var datax = data;
                datax.id = result.data.resource[0].id; 
                _votes.push(datax);
                
               if (data.vote == 1) uaf.post('upVoted',['answer','category'],[answer_id, category_id]); //user activity feed
               if (data.vote == -1) uaf.post('downVoted',['answer','category'],[answer_id, category_id]); //user activity feed 
                //$rootScope.cvotes.push(datax);
                $rootScope.$emit('updateVoteTable');
                
                console.log("Creating new voting record was succesful");
                return result.data;
            }
        }
        
        function patchRec(rec_id,vote) {
            
            //form match record
            var obj = {};
            obj.resource = [];
            
           
            var data={};
            data.id = rec_id;
            data.vote = vote;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI; 
            
            //update local record of votes
            var i = _votes.map(function(x) {return x.id; }).indexOf(rec_id);
            _votes[i].vote = vote;
            _votes[i].timestmp = data.timestmp;
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Updating vote record was succesful");
                return result.data;
            }
        }
        function deleteVotesbyCatans(catans_id) {
            
            //delete records from local copy
            for (var i=0; i<_votes.length;i++){
                if (_votes[i].catans == catans_id){
                    _votes.splice(i,1);
                } 
            }
            
           var url = baseURI + '/?filter=catans=' + catans_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                
                if ($rootScope.DEBUG_MODE) console.log("Deleting vote records by Catans was succesful");
                return result.data;
            }
        }
        
        function deleteRec(rec_id) {
            
            //delete records from local copy
            for (var i=0; i<_votes.length;i++){
                if (_votes[i].id == rec_id){
                    _votes.splice(i,1);
                } 
            }
            
           var url = baseURI + '/' + rec_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                if ($rootScope.DEBUG_MODE) console.log("Deleting vote record was succesful");
                return result.data;
            }
        }
        
        function _isVotesLoaded(id) {

            return _votes.length > 0;
        }
        function _queryFailed(error) {

            throw error;
        }

        function loadLastMonthVoting(answerIDs) {
            var filterQuery = "(";
            
            for (var i = 0; i < answerIDs.length; i++) {
                filterQuery += '(answer=';
                filterQuery += answerIDs[i];
                filterQuery += ')';
                if( i != answerIDs.length - 1 )
                    filterQuery += ' or ';
            }
            filterQuery += ' and (timestmp > ' + moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') + ')';
            filterQuery += ' and (vote = 1))';
            
            //Get all vote records for current user
            var url = baseURI + '/?filter=' + filterQuery;
             
            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return result.data.resource;
            }
                 
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('useractivity', useractivity);

    useractivity.$inject = ['$http', '$q','$rootScope'];

    function useractivity($http, $q, $rootScope) {

        // Members
        var _alluseractivity = [];
        var _fetchRanksMem = [];
        $rootScope.alluseractivity = _alluseractivity;

        var _useractivity = [];
        var baseURI = '/api/v2/mysql/_table/useractivity';

        var service = {
            getAllUserActivity: getAllUserActivity,
            getAllUserActivityX: getAllUserActivityX,
            getActivitybyUser: getActivitybyUser,
            postRec: postRec,
            patchRec: patchRec,
            deleteRec: deleteRec,
            //deletebyVote: deletebyVote
            
        };

        return service;

        function getAllUserActivity(forceRefresh) {

            /*if (_areAllUserActivityLoaded() && !forceRefresh) {

                return $q.when(_alluseractivity);
            }*/

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var data = result.data.resource;
                _load (data);

                return _alluseractivity;
            }

        }

        function getAllUserActivityX(data) {

            var _datax = [];  //this is filtered array (ignore those ranks for which useractivity already fetched)
            if (data != false) {
                data.forEach(function (item) {
                    if (_fetchRanksMem.indexOf(item.category) < 0) {
                        _datax.push(item);
                        _fetchRanksMem.push(item.category);
                    }
                });
            }

            if (_datax.length == 0) return $q.when(false);

            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'category=' + _datax[i].category+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);

            var url = baseURI + filterstr;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var _alluseractivityx = result.data.resource;
                var map = _alluseractivity.map(function(x) {return x.id; });
                _alluseractivityx.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _alluseractivity.push(obj);
                });

                if ($rootScope.DEBUG_MODE) console.log("useractivityX loaded");
                return _alluseractivity;
                
                }
        }
        
        function getActivitybyUser() {

            /*if (_userActivityLoaded() && !forceRefresh) {

                return $q.when(_userActivityLoaded);
            }*/

            var url = baseURI + '/?filter=user='+ $rootScope.user.id;;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _useractivity = result.data.resource;
            }

        }
        
        function postRec(category) {
           
            //form match record
            var data = {};
            data.user = $rootScope.user.id;
            data.category = category;
            data.votes = 1;
            data.timestmp = Date.now();
             
            var obj = {};
            obj.resource = [];

            obj.resource.push(data);
            
            //update local copy
            //_alluseractivity.push(data);
            
            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copy
                var datax = data;
                datax.id = result.data.resource[0].id; 
                _alluseractivity.push(datax);
                
                //update current user activity array
                $rootScope.thisuseractivity.push(datax);                

                if ($rootScope.DEBUG_MODE) console.log("creating useractivity record was succesful");
                return result.data;
            }
        }
       
       function patchRec(rec_id, votes) {
            
            //form match record
            var obj = {};
            obj.resource = [];
                      
            var data={};
            data.id = rec_id;
            data.user = $rootScope.user.id;
            data.votes = votes;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI;
            
            var idx = _alluseractivity.map(function(x) {return x.id; }).indexOf(rec_id);   
            _alluseractivity[idx].votes = votes;            
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Updating useractivity record was succesful");
                return result.data;
            }
        }
        
        function deleteRec(rec_id) {
            
            //update (delete answer) local copy of alluseractivity
            var i = _alluseractivity.map(function(x) {return x.id; }).indexOf(rec_id);
            if (i > -1) _alluseractivity.splice(i,1);
            
           var url = baseURI + '/' + rec_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                if ($rootScope.DEBUG_MODE) console.log("Deleting user activity record was succesful");
                return result.data;
            }
        }
        
        /*
        function deletebyVote(vote_id) {
            
            //delete records from local copy
            for (var i=0; i<_alluseractivity.length;i++){
                if (_alluseractivity[i].voterec == vote_id){
                    _alluseractivity.splice(i,1);
                } 
            }
            
           var url = baseURI + '/?filter=voterec=' + vote_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                console.log("Deleting useractivity records by vote was succesful");
                return result.data;
            }
        }*/

        function _load(data){
            _alluseractivity.length = 0;
            data.forEach(function(x){
                _alluseractivity.push(x);
            });
        }
     
        function _areAllUserActivityLoaded() {

            return _alluseractivity.length > 0;
        }
        
        function _userActivityLoaded() {

            return _useractivity.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('uaf', uaf);

    uaf.$inject = ['$http', '$q', '$rootScope'];

    function uaf($http, $q, $rootScope) {

        //Members
        var _actions = [];
        $rootScope.uafs = _actions;
        var baseURI = '/api/v2/mysql/_table/useractivityfeed';

        var service = {
            getactions: getactions,
            post: post,
			deletebyId: deletebyId,
			getnext10actions: getnext10actions
        };

        return service;
        
        function getactions(forceRefresh) {
            // console.log("getuaf s..._areuaf sLoaded()", _areuaf sLoaded());
            /*
            if (_actionsLoaded() && !forceRefresh) {

                return $q.when(_actions);
            }
            */
            //Get all uaf  records
            var url0 = baseURI + '?limit=100&order=id%20DESC';
            //var url1 = baseURI + '?offset=' + 1 * 1000;

            var p0 = $http.get(url0);
            //var p1 = $http.get(url1);

            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. user actions: ", _actions.length);
                return _actions;            
            }, _queryFailed);  

        }


        function getnext10actions(forceRefresh) {
            //Get all uaf  records
            var url0 = baseURI + '?limit=20&order=id%20DESC&offset=' + $rootScope.uafs.length ;
            //var url1 = baseURI + '?offset=' + 1 * 1000;

            var p0 = $http.get(url0);
            //var p1 = $http.get(url1);

            return $q.all([p0]).then(function (d){
                //_actions = _actions.concat(d[0].data.resource);
                var data = d[0].data.resource;
                var map = _actions.map(function(x) {return x.id; });
                data.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _actions.push(obj);
                });
                
                if ($rootScope.DEBUG_MODE) console.log("No. user actions: ", _actions.length);
                return _actions;
            }, _queryFailed);  

        }

        function post(action,field,val) {

            var url = baseURI;
			var _colors = {};
            _colors.bc = '';
            _colors.fc = '';
			var data = {};
            var n = 0;
			data.userid = $rootScope.user.id;
			data.action = action;
            data.initials = $rootScope.user.name.replace(/[^A-Z]/g, '');
            getIconColors($rootScope.user.id, _colors);
            data.fc = _colors.fc;
            data.bc = _colors.bc;
            data.date = moment().format('YYYY-MM-DD');
            //data.actorusername = $rootScope.user.first_name + ' ' + $rootScope.user.last_name;
            data.actorusername = $rootScope.user.first_name;
			for (var i=0; i<field.length; i++){
                switch (field[i]){
                    case "answer": {
                        data.answer = val[i]; 
                        n = $rootScope.answers.map(function(x) {return x.id; }).indexOf(data.answer);
                        data.text1 = $rootScope.answers[n].name;  
                        break;
                    }
                    case "category": {
                        data.category = val[i]; 
                        n = $rootScope.content.map(function(x) {return x.id; }).indexOf(data.category);
                        data.text2 = $rootScope.content[n].title;  
                        break;
                    }
                    case "comment": data.comment = val[i]; break;
                    case "edit": {
                        data.edit = val[i];
                        n = $rootScope.edits.map(function(x) {return x.id; }).indexOf(data.edit);
                        data.text2 = $rootScope.edits[n].field;  
                        break;
                    }
                    case "vrow": {
                        data.vrow = val[i]; 
                        n = $rootScope.cvrows.map(function(x) {return x.id; }).indexOf(data.vrow);
                        data.text2 = $rootScope.cvrows[n].title;  
                        break;
                    }
                    case "text1": data.text1 = val[i]; break;
                    case "text2": data.text2 = val[i]; break;
                 }
            }
            //obj.resource.push(data);
			
            var resource = [];
			resource.push(data);
            
            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                
                //update local copy
                var uafx = data;
                uafx.id = result.data.resource[0].id; 
                _actions.push(uafx);

                if ($rootScope.DEBUG_MODE) console.log("Posted user activity feed");
                return result.data;
            }

        }
 
        function deletebyId(id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            obj.resource.push(data);

            var url = baseURI + '/' + id;
            
            //update (delete uaf ) local copy of uaf s
            var i = _actions.map(function(x) {return x.id; }).indexOf(id);
            if (i > -1) _actions.splice(i,1);
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting user activity feed was succesful");
                return result.data;
            }
        }
        
        function getIconColors(x, c) {
            switch (x % 10) {
                case 0: { c.bc = '#b3b3b3'; c.fc = 'black'; break; }
                case 1: { c.bc = '#666666'; c.fc = 'white'; break; }
                case 2: { c.bc = '#006bb3'; c.fc = 'white'; break; }
                case 3: { c.bc = '#009933'; c.fc = 'white'; break; }
                case 4: { c.bc = '#cc0000'; c.fc = 'white'; break; }
                case 5: { c.bc = '#538cc6'; c.fc = 'black'; break; }
                case 6: { c.bc = '#b36b00'; c.fc = 'white'; break; }
                case 7: { c.bc = '#999966'; c.fc = 'black'; break; }
                case 8: { c.bc = '#4d0099'; c.fc = 'white'; break; }
                case 9: { c.bc = '#009999'; c.fc = 'black'; break; }
            }
        }

        function _load(data){
            _actions.length = 0;
            data.forEach(function(x){
                _actions.push(x);
            });
        }

        function _actionsLoaded() {

            return _actions.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('tablefield', tablefield);

    tablefield.$inject = ['$http', '$q'];

    function tablefield($http, $q) {

        // Members
        var _alltablefields = [];
        var _selectedtablefields;
        var baseURI = '/api/v2/mysql/_table/tablefield';

        var service = {
            getAllTableFields: getAllTableFields,
            getTableFields: getTableFields
            
        };

        return service;

        function getAllTableFields(forceRefresh) {

            if (_areAllTableFieldsLoaded() && !forceRefresh) {

                return $q.when(_alltablefields);
            }

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _alltablefields = result.data.resource;
            }

        }

        function getTableFields(id, forceRefresh) {

      //      if (_isSelectedTableLoaded(id) && !forceRefresh) {
      //              return $q.when(_selectedtablefields);
      //      }
            var url = baseURI + '/?fields=field&filter=tableid=' + id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _selectedtablefields = result.data;
            }
        }

     
        function _areAllTableFieldsLoaded() {

            return _alltablefields.length > 0;
        }

        function _isSelectedTableLoaded(id) {

          return _selectedtablefields.length > 0;
          
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('pixabay', pixabay);

    pixabay.$inject = ['$http', '$rootScope','APP_API_KEY','$cookies'];

    function pixabay($http, $rootScope, APP_API_KEY, $cookies) {

        //Members
        var _results = [];
        var numRes = 10; //This is max number of results from google search
        var baseURI = 'https://pixabay.com/api/';
        var PIXABAY_API_KEY = '5296312-7285c9a61e74685606fe28209';

        var service = {
            search: search,
        };

        

        return service;
        
        function search(query) {

            delete $http.defaults.headers.common['X-Dreamfactory-API-Key'];
            delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];

      //https://pixabay.com/api/?key=5296312-7285c9a61e74685606fe28209&q=yellow+flowers&image_type=photo
            var url = baseURI + '?key=' + PIXABAY_API_KEY + '&q=' + query + '&image_type=photo';

            return $http.get(url).then(function(result){

                _results = [];
                _results = result.data.hits;

                if ($rootScope.DEBUG_MODE) console.log("pixabay results success! - ", result);
                
                $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                return _results;
            }, function (){
                
                $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                if ($rootScope.DEBUG_MODE) console.log("Problem getting Pixabay Images");
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('pexels', pexels);

    pexels.$inject = ['$http', '$rootScope','APP_API_KEY','$cookies','SERVER_URL'];

    function pexels($http, $rootScope, APP_API_KEY, $cookies, SERVER_URL) {

        //Members
        var _results = [];
        var baseURI = 'http://api.pexels.com';
        var PEXELS_API_KEY = '563492ad6f9170000100000116ed76e3fd2b47bb574fb0174737aaf8';

        var service = {
            search: search,
            reqFromServer: reqFromServer,
        };

        
        return service;
        
        function search(query) {

            delete $http.defaults.headers.common['X-Dreamfactory-API-Key'];
            delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];
            $http.defaults.headers.common['Authorization'] = PEXELS_API_KEY;

            console.log("$http.defaults ", $http.defaults);

      //https://pexels.com/api/?key=5296312-7285c9a61e74685606fe28209&q=yellow+flowers&image_type=photo
            var url = baseURI + '/v1/search?query=' + query;

            return $http.get(url).then(function(result){

                _results = [];
                _results = result.data.photos;

                if ($rootScope.DEBUG_MODE) console.log("pexels results success! - ", results);
                
                delete $http.defaults.headers.common['Authorization'];
                $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                
                return _results;
            }, function (){
                delete $http.defaults.headers.common['Authorization'];
                $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                if ($rootScope.DEBUG_MODE) console.log("Problem getting pexels Images");
            });

        }

        function reqFromServer(query){
            var data = {};
            data.query = query;

            var url = SERVER_URL + 'ImageServer/requestPexels';
            var req = {
                method: 'POST',
                data: data,
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            return $http(req);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('instagram', instagram);

    instagram.$inject = ['$http', '$rootScope'];

    function instagram($http, $rootScope) {

        var service = {
            getImages: getImages,
        };

        return service;
        

        function getImages() {
            
            var instagramAPIurl = 'https://api.instagram.com/v1';
			var instagramClientId = 'c46745e083b7451a99461240e01da20b';
            var instagramAccessToken = '4368719989.c46745e.407288e972a64c119093166b8ba280c0';
            var redirecturi = 'https://rank-x.com';
            
            $rootScope.igimages = [];
            
            var tags = $rootScope.canswer.name.replace(' ','');
            
            var url = instagramAPIurl + '/tags/'+ 'rankxdemo' +'/media/recent?access_token='+instagramAccessToken + '&callback=JSON_CALLBACK';
            //var url = instagramAPIurl + '/media/search?lat='+$rootScope.canswer.lat+'&lng='+$rootScope.canswer.lng+
            //'&access_token='+instagramAccessToken + '&callback=JSON_CALLBACK';
            
            //&scope=public_content
            //https://api.instagram.com/v1/tags/{tag-name}?access_token=ACCESS-TOKEN
            //var url = 'https://api.instagram.com/v1/media/search?lat=48.858844&lng=2.294351&access_token='+instagramAccessToken;
            
            //var url = 'https://api.instagram.com/oauth/authorize/?client_id='+ instagramClientId + 
            //'&redirect_uri='+ redirecturi +'&response_type=token&scope=public_content';
            
            //return $http.get(url);
            if ($rootScope.DEBUG_MODE) console.log(url);
            
            return $http.jsonp(url)
                .success(function(data){
                    var myObj = {};
                if ($rootScope.DEBUG_MODE) console.log(data);
                for (var i=0; i<data.data.length; i++){
                    myObj = {};
                    myObj.url = data.data[i].images.standard_resolution.url;
                    myObj.caption = data.data[i].caption ? data.data[i].caption.text : undefined;
                    myObj.from = data.data[i].user.username;
                    $rootScope.igimages.push(myObj);
                    //$rootScope.igimages[i].Name = data.data[i].images.standard_resolution.url;
                    if ($rootScope.DEBUG_MODE) console.log(data.data[i].images.standard_resolution.url);
                }
            });
            /*
            return $http.get(url, {
                crossDomain: true,
                dataType: 'jsonp',
            }).then(function(response){
                
            console.log("Instagram Response: ", response);
            
            });
            
            */
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('imagelist', imagelist);

    imagelist.$inject = ['$http', '$rootScope'];

    function imagelist($http, $rootScope) {

        var service = {
            getImageList: getImageList,
            deleteBlob: deleteBlob,
            getFeatureImageList: getFeatureImageList
        };

        return service;

        function getFeatureImageList() {
            var storageurl = "https://rankx.blob.core.windows.net/sandiego?restype=container&comp=list" + "&prefix=featuredImages/" +
            "&sv=2015-04-05&ss=bfqt&srt=sco&sp=rwdlacup&se=2018-08-30T01:15:12Z&st=2016-08-29T17:15:12Z&spr=https,http&sig=PpyWE0X%2Fpz9SuRje5GtHh44WaWIii0GBU9PbIcDIka8%3D";
            return $http.get(storageurl).then(querySucceeded, queryFailed);
        
            //return imageQuery.then(querySucceeded, queryFailed);
            function querySucceeded(result) {
                
                //var parser = new DOMParser();
                //var xmlDoc = parser.parseFromString(result.data,"text/xml");
                var x2js = new X2JS();
                var myJSON = x2js.xml_str2json(result.data);
                var myObj = {};
                var images = [];
                var resParse = myJSON.EnumerationResults.Blobs.Blob;
                if ((!!resParse) && (resParse.constructor === Array)){
                    for (var i=0; i < resParse.length; i++){
                        myObj = {};
                        myObj.url = 'https://rankx.blob.core.windows.net/sandiego/'+resParse[i].Name;
                        myObj.type = 'azure-uploaded';
                        myObj.size = resParse[i].Properties["Content-Length"]/1024;
                        images.push(myObj);
                    }
                } else if ((!!resParse) && (resParse.constructor === Object)) {
                    myObj = {};
                    myObj.url = 'https://rankx.blob.core.windows.net/sandiego/'+resParse.Name;
                    myObj.type = 'Uploaded';
                    myObj.size = resParse.Properties["Content-Length"]/1024;
                    images.push(myObj);
                }
                
                if ($rootScope.DEBUG_MODE) console.log('query succeded');
                return images;

            }
            function queryFailed(result) {
                if ($rootScope.DEBUG_MODE) console.log('image query failed');
            }

        }
        function getImageList() {

            var storageurl = "https://rankx.blob.core.windows.net/sandiego?restype=container&comp=list" + "&prefix=" + $rootScope.canswer.id + "/" +
            "&sv=2015-04-05&ss=bfqt&srt=sco&sp=rwdlacup&se=2018-08-30T01:15:12Z&st=2016-08-29T17:15:12Z&spr=https,http&sig=PpyWE0X%2Fpz9SuRje5GtHh44WaWIii0GBU9PbIcDIka8%3D";
            return $http.get(storageurl).then(querySucceeded, queryFailed);
        
            //return imageQuery.then(querySucceeded, queryFailed);
            function querySucceeded(result) {
                
                //var parser = new DOMParser();
                //var xmlDoc = parser.parseFromString(result.data,"text/xml");
                var x2js = new X2JS();
                var myJSON = x2js.xml_str2json(result.data);
                var myObj = {};
                var resParse = myJSON.EnumerationResults.Blobs.Blob;
                if (resParse != undefined) {
                    if ((!!resParse) && (resParse.constructor === Array)) {
                        for (var i = 0; i < resParse.length; i++) {
                            myObj = {};
                            myObj.url = 'https://rankx.blob.core.windows.net/sandiego/' + resParse[i].Name;
                            myObj.type = 'azure-uploaded';
                            $rootScope.blobs.push(myObj);
                        }
                    } else if ((!!resParse) && (resParse.constructor === Object)) {
                        myObj = {};
                        myObj.url = 'https://rankx.blob.core.windows.net/sandiego/' + resParse.Name;
                        myObj.type = 'Uploaded';
                        $rootScope.blobs.push(myObj);
                    }
                }
                else $rootScope.blobs = [];
                
                if ($rootScope.DEBUG_MODE) console.log('query succeded');

            }
            function queryFailed(result) {
                if ($rootScope.DEBUG_MODE) console.log('image query failed');
            }


        }
        
        function deleteBlob(blobName) {

            if ($rootScope.DEBUG_MODE) console.log("blobname, ", blobName);
            
            var url = blobName + 
            "?sv=2015-04-05&ss=bfqt&srt=sco&sp=rwdlacup&se=2018-08-30T01:15:12Z&st=2016-08-29T17:15:12Z&spr=https,http&sig=PpyWE0X%2Fpz9SuRje5GtHh44WaWIii0GBU9PbIcDIka8%3D";
            
            return $http.delete(url).then(querySucceeded, queryFailed);
        
            function querySucceeded(result) {
                $rootScope.$emit('refreshImages');
                if ($rootScope.DEBUG_MODE) console.log('Blob image deleted succesfully');

            }
            function queryFailed(result) {
                if ($rootScope.DEBUG_MODE) console.log('Blob image delete failed');
            }            
        }

        function XML2jsobj(node) {

            var data = {};

            // append a value
            function Add(name, value) {
                if (data[name]) {
                    if (data[name].constructor != Array) {
                        data[name] = [data[name]];
                    }
                    data[name][data[name].length] = value;
                }
                else {
                    data[name] = value;
                }
            };
	
            // element attributes
            var c, cn;
            for (c = 0; cn = node.attributes[c]; c++) {
                Add(cn.name, cn.value);
            }
	
            // child elements
            for (c = 0; cn = node.childNodes[c]; c++) {
                if (cn.nodeType == 1) {
                    if (cn.childNodes.length == 1 && cn.firstChild.nodeType == 3) {
                        // text value
                        Add(cn.nodeName, cn.firstChild.nodeValue);
                    }
                    else {
                        // sub-object
                        Add(cn.nodeName, XML2jsobj(cn));
                    }
                }
            }

            return data;
        }
    }
})();


(function () {
    'use strict';

    angular
        .module('app')
        .factory('image', image);

    image.$inject = ['$http', '$rootScope'];

    function image($http, $rootScope) {

        //Members
        var _searchResults = [];
        var numRes = 10; //This is max number of results from google search
        
        var service = {
            imageSearch: imageSearch,
            getImageLinks: getImageLinks,
            filterImageResults: filterImageResults
        };

        return service;
        
        function getImageLinks(fields, attNum, type) {
            var imageQuery = imageSearch(fields, attNum, type);            
            return imageQuery.then(querySucceeded, queryFailed);
            function querySucceeded(result) {
                if ($rootScope.DEBUG_MODE) console.log('query succeded');
                _searchResults = result; 
                return filterImageResults(_searchResults); 

            }
            function queryFailed(result) {

                if ($rootScope.DEBUG_MODE) console.log('image query failed');
            }
        }

        function imageSearch(fields, attNum, type) {

            var searchQuery = '';
            var googleAPIurl = 'https://www.googleapis.com/customsearch/v1?';
            var googleCSEid = '&cx=000139851817949790257%3Aqwkdgi2q2ew';
            var googleAPI_KEY = '&key=AIzaSyBr143lDEROCrUWdKvqPQmhQ5BoFo13oSE';
            var googleCSEconfig = '&num=10&searchType=image&fileType=jpg%2C+png%2C+bmp&imgType=photo&imgSize=large&filter=1';

            var f1 = '';
            var f2 = '';
            var f3 = '';
            var f4 = '';
            var f5 = '';
            var f6 = '';
            
            var keywords = '';
            if ($rootScope.cCategory) keywords = $rootScope.cCategory.keywords;
            //else keywords = $rootScope.cCategory.keywords;
            
            var data = [];
            
            //If used during add Answer use html input, if used during edit, use already stored value
            for (var i=0; i<fields.length; i++){
                if (type == 'edit') data[i] = fields[i].cval;
                else if (type == 'add') data[i] = fields[i].val;   
            }
            
            if (fields.length == 1){
                if (data[0]) f1 = data[0];
            }
            if (fields.length == 2){
                if (data[0]) f1 = data[0];
                if (data[1]) f2 = data[1];
            }
            if (fields.length == 3){
                if (data[0]) f1 = data[0];
                if (data[1]) f2 = data[1];
                if (data[2]) f3 = data[2];
            }
            if (fields.length > 3){
                if (data[0]) f1 = data[0];
                if (data[1]) f2 = data[1];
                if (data[2]) f3 = data[2];
                if (data[3]) f4 = data[3];
            }
            
            switch (attNum) {
                case 1: { searchQuery = 'q=' + f1 + ' ' + f2 + ' ' + keywords; break; }
                case 2: { searchQuery = 'q=' + f1 + ' ' + keywords; break; } 
                case 3: { searchQuery = 'q=' + f1 + ' ' + keywords; break; }
                case 4: { searchQuery = 'q=' + f1 + ' ' + f2 + ' ' + keywords; break; }
            }

            var url = googleAPIurl + searchQuery + googleCSEid + googleCSEconfig + googleAPI_KEY;

            //console.log('url', url);

            return $http.get(url);

        }

        function filterImageResults(_searchResults) {
            //Check results grab those with proper dimensions
            var _imageLinks = [];
            var sizeOk = false;
            var linkOk = false;
            var link_length = 0;
            var iheight = 0;
            var iwidth = 0;
            
            for (var i = 0; i < numRes; i++) {
                sizeOk = false;
                linkOk = false;
                iheight = _searchResults.data.items[i].image.height;
                iwidth = _searchResults.data.items[i].image.width;

                if (iwidth > iheight && (iwidth / iheight) < 1.8) sizeOk = true;

                link_length = _searchResults.data.items[i].link.length; 
                
                //check last character in result link is 'g' or 'p' (jpg, png or bmp)
                // and that image is serve securely from https source
                if ((_searchResults.data.items[i].link[link_length - 1] == 'g' ||
                    _searchResults.data.items[i].link[link_length - 1] == 'p') &&(
                    _searchResults.data.items[i].link.indexOf('https')>-1 )) linkOk = true;
                
                if (sizeOk && linkOk) {
                    var url = _searchResults.data.items[i].link;
                    //console.log('url result ', url);
                    _imageLinks.push(url);
                }
                //console.log('sizeok ', sizeOk, 'linkOk ', linkOk);
            }
            return _imageLinks;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('htmlops', htmlops);

    htmlops.$inject = ['$rootScope'];

    function htmlops($rootScope) {

        var service = {

            specialHtml: specialHtml,
            eventHtml: eventHtml
        };

        return service;

        function specialHtml(x) {
            var htmlmsg = '';
            var sch_str = '';
            if (x.freq == 'weekly') {
                var days_str = strLimit('Every: ' +
                    (x.mon ? ' - Monday' : '') +
                    (x.tue ? ' - Tuesday' : '') +
                    (x.wed ? ' - Wednesday' : '') +
                    (x.thu ? ' - Thursday' : '') +
                    (x.fri ? ' - Friday' : '') +
                    (x.sat ? ' - Saturday' : '') +
                    (x.sun ? ' - Sunday' : ''));
                sch_str = days_str + '<br>From: ' + x.stime2 + ' to ' + x.etime2;
            }
            if (x.freq == 'onetime') {
                var sameday = (x.sdate == x.edate);
                if (sameday) {
                    sch_str = x.sdate + ' from ' + x.stime + ' to ' + x.etime;
                }
                else {
                    sch_str = 'Starts: ' + x.sdate + ' at ' + x.stime + '<br>Ends: ' + x.edate + ' at ' + x.etime;
                }
            }

            var newstr = strLimit(x.details);

            htmlmsg = '<div style="background-color:' + x.bc + ';color:' + x.fc + ';">' +
            '<div class="text-center">' + '<h3>' + x.stitle +
            '</h3><p>' + sch_str + '</p><p>' + newstr + '</p></div>'+
            '</div>';

            return htmlmsg;
        }
        
        function eventHtml(x) {
            var htmlmessage = '';
            
            var addinfomessage = '';
            var sch_str = '';

            if (x.freq == 'weekly') {
                sch_str = x.sdate + ' to ' + x.edate + '<br>'+ 
                strLimit('Every: ' +
                (x.mon ? ' - Monday' : '') +
                (x.tue ? ' - Tuesday' : '') +
                (x.wed ? ' - Wednesday' : '') +
                (x.thu ? ' - Thursday' : '') +
                (x.fri ? ' - Friday' : '') +
                (x.sat ? ' - Saturday' : '') +
                (x.sun ? ' - Sunday' : '')) +
                '<br>' + (x.stime2 == undefined ? '' : 'From: ' + x.stime2 ) +  
                 (x.etime2 == undefined ? '' : ' to ' +  x.etime2 );
                
            }
            if (x.freq == 'onetime') {
                var sameday = (x.sdate == x.edate);
                if (sameday) {
                    sch_str = x.sdate + ' from ' + x.stime + ' to ' + x.etime;
                }
                else {
                    sch_str = (x.edate == undefined ? '' : 'Starts: ') + x.sdate + 
                    (x.stime == undefined ? '' : ' at ' + x.stime ) +
                    (x.edate == undefined ? '' : '<br>Ends: ' + x.edate) + 
                    (x.etime == undefined ? '' : ' at ' + x.etime );
                }
            }
         
            addinfomessage = '<div style="background-color:' + x.bc + ';color:' + x.fc + ';">' +
            /*'<p><strong>' + 
            strLimit(x.name + (x.eventloc != undefined ? (' @ ' + x.eventloc) : '')) + 
            '</strong></p>' +
            '<p>' + (x.location != undefined ? (x.location + '<br>') : '') +
            (x.cityarea != undefined ? ('in ' + x.cityarea) : '') + '</p>' +*/
            '<p>' + sch_str + '</p>' +
            (x.addinfo != undefined ? ('<p>' + strLimit(x.addinfo) + '</p>') : ('')) +
            //(x.website != undefined ? ('<p>For more information visit: <br><a href="' + x.website + '">' + x.website + '</a></p>') : ('')) +
            '</div>';
                        
            htmlmessage = addinfomessage;
            
            return htmlmessage;
            //return '<p>'+sch_str+'</p>';
        }

        //This function takes a string and add a '<br>' every so many characters
        //This is so that the text do not overflow bigger than the screen size.

        function strLimit(x){
            var charlim = 0;
            if ($rootScope.DISPLAY_XSMALL) charlim = 45;
            if ($rootScope.DISPLAY_SMALL) charlim = 60;
            if ($rootScope.DISPLAY_MEDIUM) charlim = 90;
            if ($rootScope.DISPLAY_LARGE) charlim = 150;

            var cc = 0; //char count
            var newstr = '';
            if (x == undefined) return '';
            if (x.length > charlim) {
                for (var n = 0; n < x.length; n++) {

                    if (cc > (charlim-5) && x[n] == ' ') {
                        newstr = newstr + '<br>';
                        cc = 0;
                    }
                    newstr = newstr + x[n];
                    cc++;
                }
            }
            else newstr = x;

            return newstr;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('getwiki', getwiki);

    getwiki.$inject = ['$rootScope', '$http', 'APP_API_KEY', 'GOOGLE_API_KEY','$cookies'];

    function getwiki($rootScope, $http, APP_API_KEY, GOOGLE_API_KEY, $cookies) {

        var service = {

            getWiki: getWiki
        };

        return service;

        function getWiki(answer) {

            delete $http.defaults.headers.common['X-Dreamfactory-API-Key'];
            delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];
            
                var url = 'https://en.wikipedia.org/w/api.php?action=query&format=json&origin=*&prop=extracts&list=&meta=&continue=&titles=' + answer;
                //console.log("url --- ", url);
                //return $http.get(url, {}, {
                return $http.post(url, {}, {   
                    headers: {
                        'Content-Type': 'multipart/form-data'
                        //'Access-Control-Allow-Headers': 'x-dreamfactory-api-key'
                    }
                }).then(function (result) {
                    //console.log("1. wiki results - ", result.query.pages[0].extract);
                    var wikiRaw = JSON.stringify(result.data.query.pages);
                    var wikiRes = wikiRaw.slice(wikiRaw.indexOf('<p><b>'),wikiRaw.indexOf('<h2>'));
                    wikiRes = wikiRes.replace(/<p>/g,'');
                    wikiRes = wikiRes.replace(/<\/p>/g,'');
                    wikiRes = wikiRes.replace(/<i>/g,'');
                    wikiRes = wikiRes.replace(/<\/i>/g,'');
                    wikiRes = wikiRes.replace(/<small>/g,'');
                    wikiRes = wikiRes.replace(/<\/small>/g,'');
                    wikiRes = wikiRes.replace(/<span title\=\\"Representation in the International Phonetic Alphabet \(IPA\)\\">/g,'');
                    wikiRes = wikiRes.replace(/<\/span>/g,'');
                    wikiRes = wikiRes.replace(/<b>/g,'');
                    wikiRes = wikiRes.replace(/<\/b>/g,'');
                    wikiRes = wikiRes.replace(/.\\n\\n/g,'.');
                    wikiRes = wikiRes.replace(/.\\n/g,'.');
                    wikiRes = wikiRes.replace(/<(?:.|\n)*?>/gm, '');

                    if ($rootScope.DEBUG_MODE) console.log("1. wiki results res - ", wikiRes);
                    //answer.location = result.data.results[0].formatted_address;
                    //answer.lat = result.data.results[0].geometry.location.lat;
                    //answer.lng = result.data.results[0].geometry.location.lng;

                    $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                    $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                    $rootScope.$emit('wikiReady', wikiRes);
                    //answer.updateAnswer(cAnswer.id,['lat','lng','location'],[lat,lng,fa]);
                });

            
        }
    }


})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('getgps', getgps);

    getgps.$inject = ['$rootScope', '$http', 'APP_API_KEY', 'GOOGLE_API_KEY','$cookies','$state'];

    function getgps($rootScope, $http, APP_API_KEY, GOOGLE_API_KEY, $cookies, $state) {

        var service = {

            getLocationGPS: getLocationGPS
        };

        return service;

        function getLocationGPS(answer) {

            delete $http.defaults.headers.common['X-Dreamfactory-API-Key'];
            delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];
            
            //Remove '#' from address. This character causes error at google api
            answer.location = answer.location.replace('#','');
            
            var myLoc = '';
                
                //Perform checks to make sure location is in recognizable format for google api
                var nhs = $rootScope.nhs;
                var locationHasNh = false; //location has neighborhood
                for (var i = 0; i < nhs.length; i++) {
                    if (answer.location.indexOf(nhs[i]) > -1) {
                        locationHasNh = true;
                        break;
                    }
                }    
                //if location does not contain any neighborhodd, add 'San Diego, CA'
                if (!locationHasNh && answer.location.indexOf('San Diego') < 0) {
                    myLoc = answer.location + ' San Diego, CA';
                }
                else myLoc = answer.location;
                
                //console.log("myLoc, GOOGLE_API_KEY --- ", myLoc, GOOGLE_API_KEY);
                var url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + myLoc + '&key=' + GOOGLE_API_KEY;
                //console.log("url --- ", url);
                return $http.get(url, {}, {   
                    headers: {
                        'Content-Type': 'multipart/form-data'
                        //'Access-Control-Allow-Headers': 'x-dreamfactory-api-key'
                    }
                }).then(function (result) {
                    answer.location = result.data.results[0].formatted_address;
                    answer.lat = result.data.results[0].geometry.location.lat;
                    answer.lng = result.data.results[0].geometry.location.lng;

                    $http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                    $http.defaults.headers.common['X-DreamFactory-Session-Token'] = $cookies.session_token;
                    
                    var isValid = (answer.location != undefined && answer.location != null &&
                        answer.lat != undefined && answer.lat != null &&
                        answer.lng != undefined && answer.lng != null);
                            
                    
                    if (isValid) {
                        if ($rootScope.coordForUSer){
                            $rootScope.currentUserLatitude = answer.lat;
                            $rootScope.currentUserLongitude = answer.lng;
                            $rootScope.coordForUSer = false;
                            $rootScope.coordsRdy = true;
                            $rootScope.$emit('coordsRdy');
                            if ($rootScope.DEBUG_MODE)  console.log('@gps - 71');
                            //if ($rootScope.loadFbnWhenCoordsRdy) $state.go('rankSummary', { index: 9521 });
                            //if ($rootScope.loadRankWhenCoordsRdy) 
                                //console.log("executed reload");
                                //$state.go('rankSummary', { reload: true }); //$state.reload();
                            
                        }
                        else $rootScope.$emit('answerGPSready');
                    }
                    //answer.updateAnswer(cAnswer.id,['lat','lng','location'],[lat,lng,fa]);
                });

            
        }
    }


})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('flag', flag);

    flag.$inject = ['$http', '$q','$rootScope'];

    function flag($http, $q, $rootScope) {

        //Members
        var _flags = [];
        
        // Members
        var baseURI = '/api/v2/mysql/_table/flagtable';

        var service = {
            flagAnswer: flagAnswer,
            getFlags: getFlags,
            deleteFlag: deleteFlag,
            
        };

        return service;
        
        function flagAnswer(type, id, flag) {
           
            //form match record
            var data = {};
            data.user = $rootScope.user.id;
            data.number = id;
            data.type = type;
			data.flag = flag;
			data.timestmp = Date.now();
             
            var obj = {};
            obj.resource = [];

            obj.resource.push(data);
            
            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("creating flag answer record was succesful");
                return result.data;
            }
        }
        
        function getFlags() {
            
            var url = baseURI;
            
            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _flags = result.data.resource;
            }
        }

        function deleteFlag(flag_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = flag_id;

            obj.resource.push(data);

            var url = baseURI + '/' + flag_id;
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting flag was succesful");
                return result.data;
            }
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .service('fileupload', fileupload);

    fileupload.$inject = ['$http', '$cookies', 'APP_API_KEY'];

    function fileupload($http, $cookies, APP_API_KEY) {
        this.uploadFileToUrl = function (file, uploadUrl) {
            //var fd = new FormData();
            //fd.append('file', file);
            
            delete $http.defaults.headers.common['X-Dreamfactory-API-Key'];
            delete $http.defaults.headers.common['X-DreamFactory-Session-Token'];
            delete $http.defaults.headers.common['Accept'];
            delete $http.defaults.headers.common['Accept-Language'];
            delete $http.defaults.headers.common['Accept-Encoding'];
            delete $http.defaults.headers.common['Referer'];
            delete $http.defaults.headers.common['origin'];
            delete $http.defaults.headers.common['Connection'];
            
            var STORAGE_ACCESS_KEY = 'XvsnVKjNv25OVh37Z6UviHjw0DCfo0V5XTXpxqktR9PxHBw==';
            var url = 'https://rankx.file.core.windows.net/sandiego/est/'+file.name;
            var now = new Date().toUTCString(); 
            console.log("date in UTC format --- ", now);
                         
            var canonicalizedHeader = "x-ms-date:"+ now + "\nx-ms-version:2015-02-21";
            var canonicalizedResource = "/sandiego/est/"+file.name;
            
            /*
            var StringToSign = "PUT"+"\n"+
            "gzip, deflate, br\n"+  //Content-Encoding
            "en-US,en;q=0.5\n"+  //Content-Language
            file.size+"\n"+ //Content-Length
            "\n"+ //Content-MD5
            "multipart/form-data\n"+ //Content-Type
            now+"\n"+  //Date
            "\n\n\n\n\n"+canonicalizedHeader+"\n"+canonicalizedResource;*/
            
            var StringToSign = "PUT" + "\n" +
               "\n" +
               "multipart/form-data\n" +
               "\n" +
               canonicalizedHeader + 
               canonicalizedResource;
            
            /*StringToSign = VERB + "\n" +
               Content-Encoding + "\n" +
               Content-Language + "\n" +
               Content-Length + "\n" +
               Content-MD5 + "\n" +
               Content-Type + "\n" +
               Date + "\n" +
               If-Modified-Since + "\n" +
               If-Match + "\n" +
               If-None-Match + "\n" +
               If-Unmodified-Since + "\n" +
               Range + "\n" +
               CanonicalizedHeaders + 
               CanonicalizedResource;*/         
               console.log("StringToSign",StringToSign);
               
               //Decode to UTF8- Storage Access Key 
               var keyWords = CryptoJS.enc.Base64.parse(STORAGE_ACCESS_KEY); //Parse Key on Base64
               var keyUTF8 = CryptoJS.enc.Utf8.stringify(keyWords.words); //Encode Key to UTF8
                
               var StringToSignUTF8 = CryptoJS.enc.Utf8.parse(StringToSign);
               var hash = CryptoJS.HmacSHA256(StringToSignUTF8.sigBytes, keyUTF8);
               var signature = CryptoJS.enc.Base64.stringify(hash);
               
               console.log("signature---",signature);
            
            return $http.put(url, file,{
                headers: { 
                    'Content-Type': "multipart/form-data",
                    //'Content-Type':"application/json;charset=utf-8",
                    'x-ms-date': now,
                    'x-ms-version': '2015-02-21',
                    Authorization: 'SharedKey rankx:'+signature,
                     }
                
            })
                .success(function (result) {
                    //console.log("result", result);
                      console.log("Uploading file was succesful");
                      //$http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                })
                .error(function (error) {
                    //console.log("error", error)
                    console.log("There was a problem uploading your file");
                    //$http.defaults.headers.common['X-Dreamfactory-API-Key'] = APP_API_KEY;
                });
        }                
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('file', file);

    file.$inject = ['$http', 'APP_API_KEY'];

    function file($http, APP_API_KEY) {

        // Members
        var baseUri = '/api/v2/files/images';

        var service = {
            uploadFile: uploadFile,
            getFile: getFile
        };

        return service;

        function uploadFile(myFile) {

            console.log("file", myFile);
            var url = baseUri + '/' + myFile.name;

            return $http.post(url, myFile, {
                headers: {
                    "Content-Type": "multipart/form-data"
                }
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }
        }

        function getFile(fileName) {
            var url = baseUri + '/' + encodeURIComponent(fileName);

            return $http.get(url, {
                params: {
                    "api_key": APP_API_KEY
                }
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {
                
                return result.data;
            }
        }

        function _queryFailed(error) {

            console.log("Error: ", error)
            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('event', event);

    event.$inject = ['$http', '$q', '$rootScope','catans','vrows'];

    function event($http, $q, $rootScope,catans, vrows) {

        //Members
        var _events = [];
        var _selectedevent;
        var baseURI = '/api/v2/mysql/_table/events';

        var service = {
            getevents: getevents,
            getevent: getevent,
            addevent: addevent,
            update: update,
            deleteEvent: deleteEvent,
            flagEvent: flagEvent,                       
        };

        return service;
        

        function getevents(forceRefresh) {
            // console.log("getevents..._areeventsLoaded()", _areeventsLoaded());

            if (_areeventsLoaded() && !forceRefresh) {

                return $q.when(_events);
            }
            
            //Get all event records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            var url1 = baseURI + '?offset=' + 1 * 1000;

            var p0 = $http.get(url0);
            var p1 = $http.get(url1);

            return $q.all([p0, p1]).then(function (d){
                _events = d[0].data.resource.concat(d[1].data.resource);
                if ($rootScope.DEBUG_MODE) console.log("No. events: ", _events.length);
                return _events;            
            }, _queryFailed);  

        }

        function getevent(id, forceRefresh) {

            if (_isSelectedeventLoaded(id) && !forceRefresh) {

                return $q.when(_selectedevent);
            }

            var url = baseURI + '/' + id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _selectedevent = result.data;
            }
        }
        

        function addevent(event) {

            var url = baseURI;
            var resource = [];

            resource.push(event);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var eventx = event;
                eventx.id = result.data.resource[0].id; 
                _events.push(eventx);
                                
               	return result.data;
            }

        }

        function update(event_id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = event_id;
            
            for (var i=0; i<field.length; i++){
                data[field[i]] = val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            //var idx = _events.map(function(x) {return x.id; }).indexOf(event_id);
            //var idx = $rootScope.A.indexOf(+event_id);
            var idx = _events.map(function(x) {return x.id; }).indexOf(event_id);  
            for (var i=0; i<field.length; i++){
               _events[idx][field[i]] = val[i];
            }                        
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating event succesful");
                return result.data;
            }
        }
        
        function flagEvent(event_id, flag) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = event_id;
            data.flag = flag

            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;          
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log(" event flagged succesful");
                return result.data;
            }
        }
        

        function deleteEvent(event_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = event_id;

            obj.resource.push(data);

            var url = baseURI + '/' + event_id;
            
            //update (delete event) local copy of events
            var i = _events.map(function(x) {return x.id; }).indexOf(event_id);
            if (i > -1) _events.splice(i,1);
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting event was succesful");
                return result.data;
            }
        }

        function _areeventsLoaded() {

            return _events.length > 0;
        }

        function _isSelectedeventLoaded(id) {

            return _selectedevent && _selectedevent.id == id;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('editvote', editvote);

    editvote.$inject = ['$http', '$q', '$rootScope','uaf'];

    function editvote($http, $q, $rootScope,uaf) {

        // Members
        var _editvotes = [];
        var baseURI = '/api/v2/mysql';

        var service = {
            loadEditVotesTable: loadEditVotesTable,
            patchEditVoteRec: patchEditVoteRec,
            postEditVoteRec: postEditVoteRec,
            deleteEditVotes: deleteEditVotes,
            deleteEditVotesbyAnswer: deleteEditVotesbyAnswer

        };

        return service;


        function loadEditVotesTable(forceRefresh) {

            if (_isEditVotesLoaded() && !forceRefresh) {

                return $q.when(_editvotes);
            }
            
            //Get all vote records for current user
            var url = baseURI + '/_table/editvotetable/?filter=user=' + $rootScope.user.id;

            return $http.get(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                return _editvotes = result.data.resource;
            }

        }

        function postEditVoteRec(items) {
            
            //form match record
            var obj = {};
            obj.resource = [];

            obj.resource.push(items);

            var url = baseURI + '/_table/editvotetable';

            return $http.post(url, items, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: items
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copies
                var itemx = {};
                for (var i = 0; i < result.data.resource.length; i++) {
                    itemx = items[i];
                    itemx.id = result.data.resource[i].id;
                    _editvotes.push(itemx);

                    $rootScope.ceditvotes.push(itemx);
                    if (itemx.vote == 1) uaf.post('upVotedEdit',['answer', 'edit'],[itemx.answer, itemx.edit]); //user activity feed
                    if (itemx.vote == -1) uaf.post('downVotedEdit',['answer', 'edit'],[itemx.answer, itemx.edit]); //user activity feed
                }

                if ($rootScope.DEBUG_MODE) console.log("Creating new voting record for edit was succesful");
                return result.data;
            }
        }

        function patchEditVoteRec(rec_id, vote) {
            
            //form match record
            var obj = {};
            obj.resource = [];


            var data = {};
            data.id = rec_id;
            data.vote = vote;
            data.timestmp = Date.now();

            obj.resource.push(data);

            var url = baseURI + '/_table/editvotetable'; 
            
            //update local record of votes
            var i = _editvotes.map(function (x) { return x.id; }).indexOf(rec_id);
            _editvotes[i].vote = vote;
            _editvotes[i].timestmp = data.timestmp;

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Updating vote record for edit was succesful");
                return result.data;
            }
        }
        function deleteEditVotesbyAnswer(answer_id) {
            
            //delete records from local copy
            for (var i = 0; i < _editvotes.length; i++) {
                if (_editvotes[i].answer == answer_id) {
                    _editvotes.splice(i, 1);
                }
            }

            var url = baseURI + '/_table/editvotetable?filter=answer=' + answer_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting edit vote records for answer was succesful");
                return result.data;
            }
        }

        function deleteEditVotes(edit_id) {
            
            //delete records from local copy
            for (var i = 0; i < _editvotes.length; i++) {
                if (_editvotes[i].edit == edit_id) {
                    _editvotes.splice(i, 1);
                }
            }

            var url = baseURI + '/_table/editvotetable?filter=edit=' + edit_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting edit vote records for answer was succesful");
                return result.data;
            }
        }

        function _isEditVotesLoaded(id) {

            return _editvotes.length > 0;
        }
        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('edit', edit);

    edit.$inject = ['$http', '$q', '$rootScope','uaf'];

    function edit($http, $q, $rootScope,uaf) {

        //Members
        var _edits = [];
        var _fetchAnswersMem = [];

        $rootScope.edits = _edits;
        var baseURI = '/api/v2/mysql/_table/edittable';

        var service = {
            getEdits: getEdits,
            getEditsX: getEditsX,
            addEdit: addEdit,
            updateEdit: updateEdit,
            deleteEdit: deleteEdit,
            deleteEditbyAnswer: deleteEditbyAnswer
        };

        return service;

        function getEdits(forceRefresh) {
            // console.log("getAnswers..._areAnswersLoaded()", _areAnswersLoaded());

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var data = result.data.resource;
                _load (data);

                if ($rootScope.DEBUG_MODE) console.log("Edits Loaded");
                return _edits; 
            }

        }

        function getEditsX(data) {

            var _datax = [];  //this is filtered array (ignore those ranks for which catans already fetched)
            data.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.answer)<0){
                     _datax.push(item);
                     _fetchAnswersMem.push(item.answer);
                }
            });
            //_datax = [];
            if (_datax.length == 0) return $q.when(false);

            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'answer=' + _datax[i].answer+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            
            var url = baseURI + filterstr;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                var _editsx = result.data.resource;
                var map = $rootScope.edits.map(function(x) {return x.id; });
                _editsx.forEach(function(obj){
                        if(map.indexOf(obj.id) < 0)
                        _edits.push(obj);
                });
                
                if ($rootScope.DEBUG_MODE) console.log("editsX data loaded - ", _editsx)

                return _editsx;
            }

        }

       function addEdit(newEdit) {

            var url = baseURI;
            var resource = [];

            resource.push(newEdit);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var newEditx = newEdit;
                newEditx.id = result.data.resource[0].id; 
                _edits.push(newEditx);
                
                //$rootScope.edits.push(newEditx);
                console.log("newEditx - ", newEditx);
                console.log("_edits - ", _edits);
                console.log("$rootScope.edits - ", $rootScope.edits);
                
                uaf.post('editA',['answer', 'edit'],[newEditx.answer, newEditx.id]); //user activity feed 

                if ($rootScope.DEBUG_MODE) console.log("Adding new Edit succesful", result);
                return result.data;
            }

        }

        function updateEdit(edit_id, upV, downV) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = edit_id;
            data.upV = upV;
            data.downV = downV;

            obj.resource.push(data);

            var url = baseURI;

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating edit vote counts succesful");
                return result.data;
            }
        }

        function deleteEdit(edit_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = edit_id;

            obj.resource.push(data);

            var url = baseURI + '/' + edit_id;
            
            //update (delete answer) local copy of answers
            var i = _edits.map(function(x) {return x.id; }).indexOf(edit_id);
            if (i > -1) _edits.splice(i,1);
            
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting edit was succesful");
                return result.data;
            }
        }
        
        function deleteEditbyAnswer(answer_id) {
            
            //delete records from local copy
            for (var i = 0; i < _edits.length; i++) {
                if (_edits[i].answer == answer_id) {
                    _edits.splice(i, 1);
                }
            }

            var url = baseURI + '?filter=answer=' + answer_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting edits for answer was succesful");
                return result.data;
            }
        }

        function _load(data){
            _edits.length = 0;
            _fetchAnswersMem.length = 0;
            data.forEach(function(x){
                _edits.push(x);
                _fetchAnswersMem.push(x.id);
            });
        }
        
        function _areEditsLoaded() {

            return _edits.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('dialog', dialog);

    dialog.$inject = ['$q', '$rootScope', 'useraccnt', 'imagelist', 'answer', 'login',
        '$window','$cookies', '$state', '$compile','htmlops','datetime', 'InstagramService']
    function dialog($q, $rootScope, useraccnt, imagelist, answer, login,
        $window, $cookies, $state, $compile, htmlops, datetime, InstagramService) {

        var service = {
            editConfirm: editConfirm,
            getDialog: getDialog,
            showDialog: showDialog,
            howItWorks: howItWorks,
            addAnswer: addAnswer,
            showAddAnswer: showAddAnswer,
            editChangeEffective: editChangeEffective,
            checkSameAnswer: checkSameAnswer,
            showSameAnswer: showSameAnswer,
            confirmSameAnswer: confirmSameAnswer,
            deleteType: deleteType,
            deleteThisCatans: deleteThisCatans,
            deleteRank: deleteRank,
            getLocation: getLocation,
            url: url,
            createSpecialPreview: createSpecialPreview,
            bizRegistration: bizRegistration,
            bindAccount: bindAccount,
            addVRow: addVRow,
            deleteVRow: deleteVRow,
            addVRowGroup: addVRowGroup,
            editVRowGroup: editVRowGroup,
            deleteVRowGroup: deleteVRowGroup,
            showAddEvent: showAddEvent,
            createEventPreview: createEventPreview,
            askPermissionToLocate: askPermissionToLocate,
            askEmail: askEmail,
            seePhotos: seePhotos,
            loginFacebook: loginFacebook,
            shareOptions: shareOptions,
            tour: tour,
            unbindAccount: unbindAccount,
            confirmCancel: confirmCancel,
            editNumRanks: editNumRanks,
            editInfo: editInfo,
            notificationWithCallback: notificationWithCallback,
            notificationSuccess: notificationSuccess,
            notificationDanger: notificationDanger,
            enterPassword: enterPassword,
            endorse: endorse,
            chooseImgFromIgDlg: chooseImgFromIgDlg,
            showAllFriendsListDlg: showAllFriendsListDlg,
            showBusinessDetailDlg: showBusinessDetailDlg,
            whatisrankquestion: whatisrankquestion,
            changeCommissionDlg: changeCommissionDlg,
            changeCodePriceDlg: changeCodePriceDlg,
            openSubscriptionDlg: openSubscriptionDlg,
            generateAnswerHtml: generateAnswerHtml,
            confirmSameAnswerMultiple: confirmSameAnswerMultiple,
            showTOSPromotersDlg: showTOSPromotersDlg,
            showTOSCustomersDlg: showTOSPromotersDlg,
            sortbyHelpDialog: sortbyHelpDialog,
            maybeRepeatVrows: maybeRepeatVrows,
            showSpecial: showSpecial,
            typemismatch: typemismatch,
            confirmAddRank: confirmAddRank,
            confirmRemoveRank: confirmRemoveRank,
            confirmSiblings: confirmSiblings,
            showLocations: showLocations,
            showLearnMore: showLearnMore,
            imageBank: imageBank,
        };
        return service;


        function showDialog(title, text) {
               type: BootstrapDialog.TYPE_PRIMARY,
            BootstrapDialog.show({
                title: title,
                message: text,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function getDialog(x) {

            var title = $rootScope.dialogs['dialog.' + x + '.title'];
            var text = $rootScope.dialogs['dialog.' + x + '.text'];

            showDialog(title, text);
        }


        function editConfirm(edit, type, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Confirm';
            if (type == 'image') {
                message = 'You want to change the image of <strong><em>' + edit.name + '</em></strong> to this one: </br>' +
                '<img src=' + edit.imageURL + ' class="thumbnail" style="width:60%; max-height:150px">';
            }
            if (type == 'field' && edit.field != 'addinfo') {
                message = 'You want to change the <strong class="capitalize"><em>' + edit.field +
                '</em></strong> of <strong><em>' + edit.name + '</em></strong> to <strong><em>' + edit.nval + '</em></strong>.';
            }
            if (type == 'field' && edit.field == 'addinfo') {
                message = 'You want to change the information of ' +
                '<strong><em>' + edit.name + '</em></strong> to: <br><br>' + edit.nval + '</br>.';
            }

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback(edit);
                }
            });

        }

        function addAnswer(answer, ranks, url, callback) {

            var answerhtml = '';
            var rankshtml = '';
            var newline = '';
            var header = "table" + $rootScope.cCategory.id + ".header";

            for (var i = 0; i < $rootScope.fields.length; i++) {
                switch ($rootScope.fields[i].name) {
                    case "name": {
                        newline = '<strong class="capitalize">' + 'Name' + '</strong>: ' + answer.name + '</br>';
                        break;
                    }
                    case "location": {
                        if (answer.location) newline = '<strong class="capitalize">' + 'Location' + '</strong>: ' + answer.location + '</br>';
                        else newline = '<strong>' + 'Location' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "cityarea": {
                        //newline = '<strong class="capitalize">'+addinfo+'</strong>: ' + $rootScope.cCountries[answer.cnum] + '</br>';
                        newline = '<strong class="capitalize">' + 'City Area' + '</strong>: ' + answer.cityarea + '</br>';
                        break;
                    }
                    case "addinfo": {
                        if (answer.addinfo) newline = '<strong class="capitalize">' + 'Additional Info' + '</strong>: ' + answer.addinfo + '</br>';
                        else newline = '<strong>' + 'Additional Info' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "phone": {
                        if (answer.phone) newline = '<strong class="capitalize">' + 'Phone' + '</strong>: ' + answer.phone + '</br>';
                        else newline = '<strong>' + 'Phone' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "website": {
                        if (answer.website) newline = '<strong class="capitalize">' + 'Website' + '</strong>: ' + answer.website + '</br>';
                        else newline = '<strong>' + 'Website' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "email": {
                        if (answer.email) newline = '<strong class="capitalize">' + 'Email' + '</strong>: ' + answer.email + '</br>';
                        else newline = '<strong>' + 'Email' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                }
                answerhtml = answerhtml + newline;
            }

            for (var j=0; j < ranks.length; j++){
                if (ranks[j].sel){
                    rankshtml = rankshtml + '<em>' + ranks[j].title + '</em></br>';
                }
            }
            
            showAddAnswer(answer, rankshtml, answerhtml, url, callback);
            //console.log("headline ", categoryhtml)
       
        }
        function showAddAnswer(answer, rankshtml, answerhtml, imageurl, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Confirm';
            message = 'You want to add the following: </br></br>' +
            answerhtml + '</br>' +
            'With the following image:' +
            '<div class="text-center"><img src=' + imageurl + ' class="thumbnail" style="width:60%; max-height:150px"></div>'+
            'to the rankings:<br><div class="text-center" style="padding-top:10px">'+ rankshtml + '</div>';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback(answer);
                    //dialogRef.close();
                }
            });
        }

        function editChangeEffective(edit, index, type, callback) {

            var title = '';
            var message = '';

            if (type == 'approve' && edit.field != 'addinfo') {

                title = 'Changed Approved';
                message = 'Congrats! With your vote, the change of <strong>' + edit.field + '</strong> of <strong>' +
                edit.name + '</strong> to <strong>' + edit.nval + '</strong> gets approved.';

            }

            if (type == 'approve' && edit.field == 'addinfo') {

                title = 'Changed Approved';
                message = 'Congrats! With your vote, the information of <strong>' +
                edit.name + '</strong> to <br><br>' + edit.nval + '</br> gets approved.';

            }

            if (type == 'reject') {

                title = 'Changed Rejected';
                message = 'Congrats! With your vote, the change of <strong>' + edit.field + '</strong> of <strong>' +
                edit.name + '</strong> to <strong>' + edit.nval + '</strong> has been rejected.';

            }

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef, result) {
                        callback(index, type);
                        dialogRef.close();
                    }
                }]
            });
        }

        function howItWorks(type) {
            var message = '';
            var title = '';

            if (type == 'editAnswer') {
                title = 'Information Edits';
                message = 'Use edits to correct, add or update information in a profile. ' +
                'All edits need to be accepted by other users before they are approved. </br></br>' +
                'An edit or change becomes approved when the number of people that agree exceeds the number of people that disagree by 3. ' +
                '</br></br>An edit or change gets rejected when the number of people that disagree exceeds those that agree by 3. ' +
                '</br></br> Only one edit per field at a time is allowed. Make sure you vote on the edits you agree or disagree.';
            }
            if (type == 'addAnswer') {
                title = 'Add a new answer';
                message = '1. Fill out the form. The fields marked with ** are required. All other fields are not required but recommended. <br/>' +
                '<br/>2. Click the \'Get Images\' button. <br/>' +
                '<br/>3. Use \'>>\' and \'<<\' buttons to browse through the images. You can \'Get More Images\' button to load more images.<br/>' +
                '<br/>4. When the image you want shows in the image box, click the button \'Add\' to add the new answer' +
                ' to the list.<br/>' +
                '<br/>NOTE: Not all images will correspond to your answer. Entering all fields will help with the image results.';
            }
            if (type == 'shortPhrase') {
                title = 'Add an Answer';
                message = 'Fill out the form. The fields marked with ** are required. <br/>' +
                '<br/> - The <strong>Title</strong> is the main idea of your answer. <br/>' +
                '<br/> - In the <strong>Details</strong> box, write additional details about your answer.' +
                ' You can also write arguments on why it should be included in this list.<br/>' +
                '<br/>For example: <br/>' +
                '<br/>In the rank <strong><em>Reasons why dogs are awesome</em></strong> you can add following answer: <br/>' +
                '<br/><strong>Title:</strong> They enjoy the simple things in life <br/>' +
                '<br/><strong>Details:</strong> Dogs dont need much to be happy, they are happy with simple things ' +
                'like a belly rub, a walk around the block, playing in the snow or going for a drive.';
            }

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function url(link) {
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: "Image URL",
                message: link,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function checkSameAnswer(answer1, answer2, callback1, callback2) {

            var answerhtml = '';
            var answerhtml2 = '';
            var newline = '';
            var newline2 = '';

            for (var i = 0; i < $rootScope.fields.length; i++) {
                switch ($rootScope.fields[i].name) {
                    case "name": {
                        newline = '<strong class="capitalize">' + 'Name' + '</strong>: ' + answer1.name + '</br>';
                        newline2 = '<strong class="capitalize">' + 'Name' + '</strong>: ' + answer2.name + '</br>';
                        break;
                    }
                    case "location": {
                        if (answer1.location) newline = '<strong class="capitalize">' + 'Location' + '</strong>: ' + answer1.location + '</br>';
                        else newline = '<strong>' + 'Location' + '</strong>: ' + '' + '</br>';
                        if (answer2.location) newline2 = '<strong class="capitalize">' + 'Location' + '</strong>: ' + answer2.location + '</br>';
                        else newline2 = '<strong>' + 'Location' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "cityarea": {
                        //newline = '<strong class="capitalize">'+addinfo+'</strong>: ' + $rootScope.cCountries[answer.cnum] + '</br>';
                        newline = '<strong class="capitalize">' + 'City Area' + '</strong>: ' + answer1.cityarea + '</br>';
                        newline2 = '<strong class="capitalize">' + 'City Area' + '</strong>: ' + answer2.cityarea + '</br>';
                        break;
                    }
                    case "addinfo": {
                        if (answer1.addinfo) newline = '<strong class="capitalize">' + 'Additional Info' + 'b</strong>: ' + answer1.addinfo + '</br>';
                        else newline = '<strong>' + 'Additional Info' + '</strong>: ' + '' + '</br>';
                        if (answer2.addinfo) newline2 = '<strong class="capitalize">' + 'Additional Info' + 'b</strong>: ' + answer2.addinfo + '</br>';
                        else newline2 = '<strong>' + 'Additional Info' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "phone": {
                        if (answer1.phone) newline = '<strong class="capitalize">' + 'Phone' + 'b</strong>: ' + answer1.phone + '</br>';
                        else newline = '<strong>' + 'Phone' + '</strong>: ' + '' + '</br>';
                        if (answer2.phone) newline2 = '<strong class="capitalize">' + 'Phone' + 'b</strong>: ' + answer2.phone + '</br>';
                        else newline2 = '<strong>' + 'Phone' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "website": {
                        if (answer1.website) newline = '<strong class="capitalize">' + 'Website' + 'b</strong>: ' + answer1.website + '</br>';
                        else newline = '<strong>' + 'Website' + '</strong>: ' + '' + '</br>';
                        if (answer2.website) newline2 = '<strong class="capitalize">' + 'Website' + 'b</strong>: ' + answer2.website + '</br>';
                        else newline2 = '<strong>' + 'Website' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "email": {
                        if (answer1.email) newline = '<strong class="capitalize">' + 'Email' + 'b</strong>: ' + answer1.email + '</br>';
                        else newline = '<strong>' + 'Email' + '</strong>: ' + '' + '</br>';
                        if (answer2.email) newline2 = '<strong class="capitalize">' + 'Email' + 'b</strong>: ' + answer2.email + '</br>';
                        else newline2 = '<strong>' + 'Email' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                }
                answerhtml = answerhtml + newline;
                answerhtml2 = answerhtml2 + newline2;
            }

            showSameAnswer(answer1, answerhtml, answer2, answerhtml2, callback1, callback2);
            //console.log("headline ", categoryhtml)
       
        }
        function showSameAnswer(answer1, answerhtml, answer2, answerhtml2, callback1, callback2) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Just checking';
            btnCancelLabel = 'No, they are different';
            btnOkLabel = 'Yeah, same';
            message = 'Are these the same ' + $rootScope.cCategory.type + '? </br></br><div class="row">' +
            '<div class="col-sm-6">' + answerhtml + '</br>' +
            '<img src=' + answer1.imageurl + ' class="thumbnail" style="width:60%; max-height:150px"></div>' +

            '<div class="col-sm-6">' + answerhtml2 + '</br>' +
            '<img src=' + answer2.imageurl + ' class="thumbnail" style="width:60%; max-height:150px"></div>' +
            '</div>';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback2();
                    else callback1(answer1);

                }
            });
        }

        function deleteType(thisCatOnly, everywhere) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Scope of Delete';
            btnCancelLabel = 'Just in the category: ' + $rootScope.cCategory.title;
            btnOkLabel = 'Everywhere';
            message = 'Choose scope to delete:';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) everywhere();
                    else thisCatOnly();

                }
            });
        }

        function deleteThisCatans(answer, category, callback) {
            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Confirm Delete';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Delete';
            message = 'This will delete the CatAns record for <strong>' + answer +
            '</strong> in the category of <strong>' + category + '</strong>.';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                }
            });
        }

        function createSpecialPreview(x, addSpecial) {
            var title = '';
            var message = '';
            var htmlmsg = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';
            var sch_str = '';

            title = 'Special Preview';
            btnCancelLabel = 'Back';
            btnOkLabel = 'Save Special';

            var specialhtml = htmlops.specialHtml(x);
            /*
            if (x.freq == 'weekly') {
                sch_str = 'Every: ' +
                (x.mon ? ' - Monday' : '') +
                (x.tue ? ' - Tuesday' : '') +
                (x.wed ? ' - Wednesday' : '') +
                (x.thu ? ' - Thursday' : '') +
                (x.fri ? ' - Friday' : '') +
                (x.sat ? ' - Saturday' : '') +
                (x.sun ? ' - Sunday' : '') +
                '<br>From: ' + x.stime2 + ' to ' + x.etime2;
            }
            if (x.freq == 'onetime') {
                var sameday = (x.sdate == x.edate);
                if (sameday) {
                    sch_str = x.sdate + ' from ' + x.stime + ' to ' + x.etime;
                }
                else {
                    sch_str = 'Starts: ' + x.sdate + ' at ' + x.stime + '<br>Ends: ' + x.edate + ' at ' + x.etime;
                }
            }*/

            message = 'This is how this special will look: </br></br>In the ranking summary:<br>' +
            '<table class="table table-hover cursor ">' +
            '<thead><tr><th>Rank</th><th>Name</th><th>Distance</th><th>Specials</th>' +
            '</tr></thead><tbody><tr><td>1</td><td>' + x.name + '</td><td>1.5</td>' +
            '<td style="background-color:' + x.bc + ';color:' + x.fc + ';">' + x.stitle + '<td></tr></tbody></table><br>' +
            'Inside your business profile:<br>' + specialhtml +
            '</br>' +
            'With the following image:' +
            '<img src=' + x.image + ' class="thumbnail" style="width:70%; max-height:150px">';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) addSpecial();
                    //else callback1(answer1);
                    
                }
            });
        }

        function deleteRank(x,callback,isSpecial) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Yes, Delete';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Delete';
            if (isSpecial)
            message = 'Just confirming, do you want to delete the special <strong>' + x.stitle +'</strong>?';
            else
            message = 'Just confirming, do you want to delete the ranking <strong>' + x.title +'</strong>?';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                }
            });
        }

        function getLocation(callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Share Location';
            btnCancelLabel = 'Not Now';
            btnOkLabel = 'Ok';
            message = 'Please allow browser share location so we can calculate distance to the best places.';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback();
                }
            });


        }

        function bizRegistration(callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Do you own this business?';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Bind';
            message = 'If you own or represent this business, please bind to your account so only you can change or edit its information.' +
            '<br><br><strong>* Name of Business</strong>' +
            '<br><strong>* Address</strong>' +
            '<br><strong>* Phone Number</strong>' +
            '<br><strong>* Main Photo</strong>' +
            '<br><strong>* Hours</strong>' +
            '<br><br>Binding this business to your account is free.';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback();
                }
            });

        }

        function bindAccount(name, business, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Confirmation';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, bind this business to my account';
            message = '<br><strong>Note:</strong> Claiming to have false authority over a business is against the law.' +
            '<br><br>Please confirm:' +
            '<br><br>' +
            'You, <strong>' + name + '</strong>, have the authority to represent <strong>' + business + '</strong>.';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback();
                }
            });

        }

        function addVRow(x, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Enter Data';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Add';
            message = '<br> Enter new vote row to be added in Group: <strong>' + x.gtitle + '</strong>' +
            '<br><br>Vote Row Name:' +
            '<input class="form-control" type="text" placeholder="Enter Vote Row Name">' +
            '<br><br>';
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                
                buttons: [{
                    label: 'Cancel',
                    action: function (dialogRef) {
                        //console.log("dialogRef2---", dialogRef);
                        dialogRef.close();
                    },
                },
                    {
                        label: 'OK',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var vrowname = dialogRef.getModalBody().find('input').val();
                            if (result) callback(x, vrowname);
                            dialogRef.close();
                        },
                    }]
            });
        }

        function deleteVRow(x, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, Delete';
            message = '<br>Please confirm, you want to delete vote row <strong>' + x.title +
            '</strong> from <strong>' + x.gtitle + '</strong>.' +
            '<br><br><strong>Note:</strong> All vote records will be lost';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback(x);
                }
            });
        }

        function addVRowGroup(x, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Enter Data';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Add';
            message = '<br>Enter name of Vote Group you want to create: ' +
            '<br><br>Group Name:' +
            '<input class="form-control" type="text" placeholder="Enter Vote Row Group Name">' +
            '<br><br>';
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                
                buttons: [{
                    label: 'Cancel',
                    action: function (dialogRef) {
                        //console.log("dialogRef2---", dialogRef);
                        dialogRef.close();
                    },
                },
                    {
                        label: 'OK',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var vrowgroupname = dialogRef.getModalBody().find('input').val();
                            if (result) callback(x, vrowgroupname);
                            dialogRef.close();
                        },
                    }]
            });
        }

        function editVRowGroup(x, callback, callback2) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Enter Data';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Edit';
            message = '<br>Enter new name of Vote Group: ' +
            '<br><br>Group Name:' +
            '<input class="form-control" type="text" placeholder="' + x.gtitle + '">' +
            '<br><br>';
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                
                buttons: [{
                    label: 'Cancel',
                    action: function (dialogRef) {
                        //console.log("dialogRef2---", dialogRef);
                        dialogRef.close();
                    },
                },
                    {
                        label: 'Edit',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var vrowgroupname = dialogRef.getModalBody().find('input').val();
                            if (result) callback(x, vrowgroupname);
                            dialogRef.close();
                        },
                    },
                    {
                        label: 'Delete',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            if (result) callback2(x);
                            dialogRef.close();
                        },
                    }
                ]
            });
        }

        function deleteVRowGroup(x, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, Delete';
            message = '<br>Please confirm, you want to delete the vote group <strong>' + x.gtitle +
            '</strong> and all the items within it.' +
            '<br><br><strong>Note:</strong> All vote records for all items will be lost';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) callback(x);
                }
            });
        }

        function createEventPreview(event, mode, callback) {

            var answerhtml = '';
            var newline = '<p style="text-align:left">';
            
              if (event.name)
                    newline = newline + '<strong class="capitalize">' + 'Name' + '</strong>: ' + event.name + '</br>';       
              if (event.eventloc) 
                    newline = newline + '<strong class="capitalize">' + 'Venue' + '</strong>: ' + event.eventloc + '</br>';
              if (event.location) 
                    newline = newline + '<strong class="capitalize">' + 'Address' + '</strong>: ' + event.location + '</br>';
              if (event.cityarea)
                    newline = newline + '<strong class="capitalize">' + 'Neighborhood' + '</strong>: ' + event.cityarea + '</br>';
              if (event.phone) 
                    newline = newline + '<strong class="capitalize">' + 'Phone Number' + '</strong>: ' + event.phone + '</br>';
              if (event.website) 
                    newline = newline + '<strong class="capitalize">' + 'Website' + '</strong>: ' + event.website + '</br>';
            
            answerhtml = newline + '</p>';

            var addinfomessage = htmlops.eventHtml(event);
            showAddEvent(event, answerhtml, addinfomessage, event.imageurl, mode, callback);
            
        }
        function showAddEvent(event, answerhtml, addinfomessage, imageurl, mode, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            if (mode == 'add') 
                message = 'You want to add the following event to <strong>' + $rootScope.cCategory.title + '</strong>. </br><p></p>' +
                    answerhtml + 
                    addinfomessage + '</br>' +
                    'With the following image:' +
                    '<img src=' + imageurl + ' class="thumbnail" style="width:60%; max-height:150px">'; 
            else if (mode == 'edit')
                message = 'Please confirm the new information. </br><p></p>' +
                    answerhtml +
                    addinfomessage + '</br>' +
                    'With the following image:' +
                    '<img src=' + imageurl + ' class="thumbnail" style="width:60%; max-height:150px">';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Confirm';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback(event);
                    //dialogRef.close();
                }
            });

        }

        function askPermissionToLocate() {

            var title = '';
            var messagehtml = ''
            var messageLoading = '';
            var btnCancelLabel = 'No, I don\'t approve';
            var btnOkLabel = 'Yes, locate me';

            title = 'Please Confirm';


            messagehtml = '<div class="text-left">Is it ok if we locate your position?</div>' +
            '<br>' +
            '<div class="row">' +
            //($rootScope.sm ? '<div class="container col-xs-12">':'<div class="container col-xs-6">') +
            '<div class="container col-xs-12">' +
            '<div class="text-left" style="color:blue">Option 1</div>' +
            '<div class="text-center" style="border:2px"><button class="btn btn-success" id="useGeo">Yes, locate me using geolocation</button></div><br>' +
            '<div class="text-left" style="color:blue">Option 2 <small>(recommended for accuracy)</small></div><br>' +
            '<p>Yes, use this address as my current location</p>' +
            '<div class="input-group">' +
            '<input id="address" type="text" class="form-control" placeholder="Enter address">' +
            '<span class="input-group-btn text-right">' +
            '<button class="btn btn-success" type="button" id="gobutton">Go</button>' +
            '</span>' +
            '</div><br><br>' +
            '</div>' +
            //($rootScope.sm ? '<div class="container col-xs-12">':'<div class="container col-xs-6">') +
            '<div class="container col-xs-12">' +
            '<div class="text-center" style="border:2px"><button class="btn btn-default" id="noapprove">No, I don\'t approve</button></div>' +
            '</div>' +
            '</div>';

            messageLoading = '<div style="height:80px;position:relative"><img src="/assets/images/loading.gif" class="img" ' + 
            'style="width:50px;height:50px;position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)"/></div>' +
            '<p>Just a moment, finding your location...</p>';

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);

                    $content.find('#useGeo').click({}, function () {

                        if ($rootScope.isFacebookApp) {
                            getDialog('FacebookAppNotSupported');
                        }
                        else {
                            var x = dialogRef;
                            $rootScope.$emit('getLocation');
                            x.enableButtons(false);
                            x.setClosable(false);
                            x.getModalBody().html(messageLoading);
                            x.setTitle('Please wait');
                            setTimeout(function () {
                                x.close();
                            }, 10000);
                        }
                        //x.close();
                    });
                    $content.find('#gobutton').click({}, function () {
                        var address = $content.find('input').val();
                        var x = dialogRef;
                        $rootScope.$emit('useAddress', { address: address });
                        x.close();
                    });
                    $content.find('#noapprove').click({}, function () {
                        var x = dialogRef;
                        x.close();
                    });

                    return $content;
                },
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                }
            });
        }

        function askEmail(accntname) {

            var title = '';
            var messagehtml = ''
            var btnCancelLabel = 'No, I don\'t approve';
            var btnOkLabel = 'Yes, locate me';

            title = 'Missing info';

            messagehtml = '<div class="text-left">Let\'s stay in touch.' +
            ' Please provide us an email address where we can ' +
            'keep you updated on everything related to the <strong>' + accntname + '</strong> account.</div>' +
            '<br>' +
            '<div class="input-group">' +
            '<input id="email" type="text" class="form-control" placeholder="Enter email address">' +
            '<span class="input-group-btn text-right">' +
            '<button class="btn btn-primary" type="button" id="gobutton">Submit</button>' +
            '</span>' +
            '</div><br>';

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);

                    $content.find('#gobutton').click({}, function () {
                        var address = $content.find('input').val();
                        var x = dialogRef;
                        $rootScope.showWarning = false;
                        useraccnt.updateuseraccnt($rootScope.useraccnts[0].id, ['email'], [address]);
                        x.close();
                        $rootScope.$emit('hideWarning');
                    });

                    return $content;
                },
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                }
            });
        }

        function seePhotos(blobList, idx, answer, isOwner) {

            var title = '';
            var messagehtml = ''
            var btnCancelLabel = 'No, I don\'t approve';
            var btnOkLabel = 'Yes, locate me';
            var n = idx;
            var L = blobList.length;
            var img_style = '';

            if ($rootScope.sm) {
                img_style = 'width:100%;height:auto';
            }
            else {
                img_style = 'width:100%;height:auto';
            }

            title = 'Photos - ' + answer.name;

            var m1 = '';
            var m2 = '';
            var m3 = '';
            var m4 = '';
            var cap = '';
            
            if (isOwner) {
                m1 =
                '<div class="row">' +
                '<div class="text-left col-xs-3 col-md-4">' +
                '<button class="btn btn-default pull-left" id="prevbutton">&lt;&lt</button>' +
                '</div>' +
                '<div class="text-middle col-xs-5 col-md-4">' +
                '<button class="btn btn-default" id="makeprimary">Make Main Photo</button>' +
                '</div>' +
                '<div class="text-right col-xs-4 col-md-4">' +
                '<button class="btn btn-default pull-right" id="nextbutton">&gt;&gt</button>' +
                '</div>' +
                '</div>';
                m4 =
                '<div class="text-right">' +
                '<button type="button" class="btn btn-default pull-right" style="vertical-align:middle;" id="trashbutton">' +
                '<span class="glyphicon glyphicon-trash" style="padding-top:0px;padding-bottom:0px;" aria-hidden="true">' +
                '</span>' +
                '</button>' +
                '</div><br/>';

            }
            else {
                m1 = '<div class="row">' +
                '<div class="text-left col-xs-6">' +
                '<button class="btn btn-default pull-left" id="prevbutton">&lt;&lt</button>' +
                '</div>' +
                '<div class="text-right col-xs-6">' +
                '<button class="btn btn-default pull-right" id="nextbutton">&gt;&gt</button>' +
                '</div>' +
                '</div>';
                m4 = '<br/>';
            }
            m2 = '<br>' +
            '<div class="text-center">' +
            '<img id="image" class="displayed" src="' +
            //'https://rankx.blob.core.windows.net/sandiego/';
            '';
            m3 =
            '" style="' + img_style + '">' +
            '</div>' + 
            '<p>Photo from &nbsp<strong id="source">' + blobList[n].type + '</strong></p></br>' + 
            '<br/>';
            
            if (blobList[n].from != undefined){
                cap = '<p id="credit">Photo by:&nbsp<strong>@'+ blobList[n].from + '</strong></p></br><p id="caption">' + 
                (blobList[n].caption ? blobList[n].caption : '')  +'</p>';
            }
            else{
                cap = '<p id="credit"></p><p id="caption"></p>';
            }
            var m5 = '';
            messagehtml =  m1 + m2 + blobList[n].url + m3 + m4 + cap;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);
                    var x = dialogRef;
                    $content.find('#prevbutton').click({}, function () {
                        n = n - 1;
                        if (n < 0) n = L - 1;
                        $content.find('#image').attr('src', blobList[n].url);
                        $content.find('#source').html(blobList[n].type);
                        if (blobList[n].from != undefined) $('#credit').html('Photo by:&nbsp<strong>@'+ blobList[n].from + '</strong></br>');
                        else $('#credit').html('');
                        
                        if (blobList[n].caption != undefined) $('#caption').html(blobList[n].caption);
                        else $('#caption').html('');
                    });

                    $content.find('#nextbutton').click({}, function () {
                        n = n + 1;
                        if (n >= L) n = 0;
                        $content.find('#image').attr('src', blobList[n].url);
                        $content.find('#source').html(blobList[n].type);
                        if (blobList[n].from != undefined) $('#credit').html('Photo by:&nbsp<strong>@'+ blobList[n].from + '</strong></br>');
                        else $('#credit').html('');

                        if (blobList[n].caption != undefined) $('#caption').html(blobList[n].caption);
                        else $('#caption').html('');
                    });

                    $content.find('#trashbutton').click({}, function () {
                        confirmPhotoDelete(blobList, n, answer);
                        x.close();
                    });

                    $content.find('#makeprimary').click({}, function () {
                        confirmMakePrimary(blobList, n, answer);
                        x.close();
                    });
                    return $content;
                },
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },

            });

        }

        function confirmPhotoDelete(blobList, n, current_answer) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, Delete';
            message = '<br>Please confirm, you want to delete this photo: ' +
            '<br/><img id="image" class="displayed" src="' +
            blobList[n].url +
            '" style="width:100%;height:auto">' +
            '<br><br>';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) {
                        if ($rootScope.DEBUG_MODE) console.log(blobList);
                        if( blobList[n].type == 'Instagram' ){
                            var itempos = current_answer.ig_image_urls.indexOf(blobList[n].url);
                            if( itempos != -1){
                                current_answer.ig_image_urls = current_answer.ig_image_urls.substr(0, itempos-1) + current_answer.ig_image_urls.substr(itempos + blobList[n].url.length);

                                setInstagramImageUrl(current_answer.id, current_answer.ig_image_urls)
                                .then(function(answer){
                                    $rootScope.$emit('refreshImages');
                                })
                            }
                            
                        } else {
                            imagelist.deleteBlob(blobList[n].url);
                        }
                    }
                }
            });
        }

        function confirmMakePrimary(blobList, n, myanswer) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, make primary';
            message = '<br>Please confirm, you want to make this the primary photo: ' +
            '<br/><img id="image" class="displayed" src="' +
            blobList[n].url +
            '" style="width:100%;height:auto">' +
            '<br><br>';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                callback: function (result) {
                    if (result) {
                        var imageurl = blobList[n].url;
                        answer.updateAnswer(myanswer.id, ["imageurl"], [imageurl]);
                    }
                }
            });
        }

        function loginFacebook() {
            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Login required';
            message = 'You must be logged in to add rankings, answers, opinions, endorse establishments and participate in the rankings.' +
            '</br></br>' +
            'Do you want to log in?';

            BootstrapDialog.show({
                title: title,
                message: message,
                buttons: [
                {
                    label: 'Not now',
                    action: function (dialogItself) {
                        dialogItself.close();
                    }
                },
                {
                    icon: 'fa fa-facebook',
                    label: 'Login',
                    cssClass: 'btn-primary',
                    action: function (dialogItself) {

                        //Store current state 
                        $rootScope.stateName = $state.current.name;
                        if ($rootScope.stateName == 'rankSummary') $rootScope.stateNum = $rootScope.cCategory.id;
                        else if ($rootScope.stateName == 'answerDetail') $rootScope.stateNum = $rootScope.canswer.id;
                        else $rootScope.stateNum = undefined;
                    
                        login.facebookSDKLogin()
                        .then(function(){
                            dialogItself.close();
                            $state.go($state.current, {}, {reload: true}); 
                        });
                        // login.loginWithFacebook()
                        //     .then(function (result) {
                        //         $window.location = result.url;
                        //     });
                    }
                }]
            });
        }

        function shareOptions(callback, isMobile, link, text, scope) {
            var title = '';
            var rendercode = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Share Options';
            rendercode =
            '<div class="row">' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485385043_mail.png" id="email" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485384809_2_-_Facebook.png" id="facebook" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485384868_1_-_Twitter.png" id="twitter" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485384841_13_-_Pintrest.png" id="pinterest" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485384824_6_-_Google_Plus.png" id="gplus" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485384853_5_-_Tumbler.png" id="tumblr" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center" style="cursor: pointer">' +
            '<img src="/assets/images/1485425301_reddit.png" id="reddit" style="width:50px;margin-bottom:20px">' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center style="cursor: pointer"">' +    
            '<a href="#" socialshare ' +
                'socialshare-provider="whatsapp" ' +
                'socialshare-text="'+ text + '" ' +
                'socialshare-url="' + link + '">' +
            '<img src="/assets/images/1485384832_16_-_Whatsapp.png" id="whatsapp"'+
            ' style="width:50px;margin-bottom:20px;display:'+ (isMobile ? 'inline':'none') + '">' +
            ' </a>' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center style="cursor: pointer"">' +
            '<a href="#" socialshare ' +
                'socialshare-provider="facebook-messenger" ' +
                'socialshare-url="' + link + '">' +
            '<img src="/assets/images/1485385110_Facebook_Messenger.png" id="messenger"'+
            ' style="width:50px;margin-bottom:20px;display:'+ (isMobile ? 'inline':'none') + '">' +
            ' </a>' +
            '</div>' +
            '<div class="col-xs-3 col-sm-3 col-md-2 col-lg-2 text-center style="cursor: pointer"">' +
            '<a href="#" socialshare ' +
                'socialshare-provider="sms" ' +
                'socialshare-text="'+ text + '" ' +
                'socialshare-url="' + link + '">' +
            '<img src="/assets/images/1485385026_sms.png" id="sms"'+ 
            ' style="width:50px;margin-bottom:20px;display:'+ (isMobile ? 'inline':'none') + '">' +
            ' </a>' +
            '</div>' +
            '</div>';
            var messagehtml = $compile(rendercode)(scope);
            BootstrapDialog.show({
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);
                    var x = dialogRef;
                    $content.find('#twitter').click({}, function () {
                        callback('twitter');
                        x.close();
                    });
                    $content.find('#facebook').click({}, function () {
                        callback('facebook');
                        x.close();
                    });
                    $content.find('#email').click({}, function () {
                        callback('email');
                        x.close();
                    });
                    $content.find('#pinterest').click({}, function () {
                        callback('pinterest');
                        x.close();
                    });
                    $content.find('#gplus').click({}, function () {
                        callback('gplus');
                        x.close();
                    });
                    $content.find('#reddit').click({}, function () {
                        callback('reddit');
                        x.close();
                    });
                    $content.find('#tumblr').click({}, function () {
                        callback('tumblr');
                        x.close();
                    });
                    $content.find('#whatsapp').click({}, function () {
                        // callback('whatsapp');
                        x.close();
                    });
                    $content.find('#messenger').click({}, function () {
                        // callback('messenger');
                        x.close();
                    });
                    $content.find('#sms').click({}, function () {
                        // callback('sms');
                        x.close();
                    });
                    return $content;
                },
                buttons: [{
                    label: 'Cancel',
                    action: function (dialogItself) {
                        dialogItself.close();
                    }
                }]
            });
        }

         function tour() {

            var title = '';
            var messagehtml = ''
            var n = 1;
            var img_style = '';
            
            //if ($rootScope.sm) {
                img_style = 'width:100%;max-width:450px;height:auto;margin-left:auto;margin-right:auto;';
            //}
            //else {
            //    img_style = 'width:90%;height:auto';
            // }

            title = 'Rank-X Intro Tour';

            var m1 = '';
            var m2 = '';
            var m3 = '';
            var m4 = '';
            var cap = '';

           // <div class="container hidden-xs hidden-sm hidden-md col-lg-3" ng-if="isShortPhrase" ng-attr-style="background-color:lightgray;color:black;height:{{sm ? '150px':'200px'}};margin:0px;padding:0px;border:0px;position:relative;">
//  <div style="padding:3px; margin:0px; position:absolute; top:50%; left:50%; margin-right:-50%;transform: translate(-50%,-50%)">
        

            
            m1 =
            '<img id="image" class="displayed" src="' +
            '/assets/images/rxtour1.jpg'+'" style="' + img_style + '">';
            
            messagehtml =  m1;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: messagehtml,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                buttons: [
                {
                id: 'btn1',
                label: 'No, thanks',
                action: function(dialog, messagehtml) {
                    var $button = this; // 'this' here is a jQuery object that wrapping the <button> DOM element.
                    //console.log("bt1-clicked,",n);
                    if (n==1) {
                        $cookies.put('tourviewed', true);
                        dialog.close();
                    }
                    else {
                        n = n - 1;
                        if (n==1){
                            $('#btn1').text('No, thanks');
                            $('#btn2').text('Yes, take tour');
                        }
                        else if (n == 17){
                            $('#btn1').text('Back');
                            $('#btn2').text('Close');
                            $cookies.put('tourviewed', true);
                        } 
                        else {
                            $('#btn1').text('Back');
                            $('#btn2').text('Next');
                        }
                        m1 = '<img id="image" class="displayed" src="' +
                            '/assets/images/rxtour'+n+'.jpg'+'" style="'+img_style+'">';
                        dialog.setMessage(m1);
                        
                        }
                    }
                },
                {
                id: 'btn2',
                label: 'Yes, take tour',
                action: function(dialog, messagehtml) {
                    var $button = this; // 'this' here is a jQuery object that wrapping the <button> DOM element.
                    //console.log("bt2-clicked,",n);
                    if (n==17) {
                        $cookies.put('tourviewed', true);
                        dialog.close();
                    }
                    else {
                        if (n == 17) dialog.getButton(this.id).label = 'Close';
                        else {
                            //$button.text = 'Next'; 
                            n = n + 1;
                            if (n == 1) {
                                $('#btn1').text('No, thanks');
                                $('#btn2').text('Yes, take tour');
                            }
                            else if (n == 17) {
                                $('#btn1').text('Back');
                                $('#btn2').text('Close');
                                $cookies.put('tourviewed', true);
                            }
                            else {
                                $('#btn1').text('Back');
                                $('#btn2').text('Next');
                            }
                        }
                        m1 = '<img id="image" class="displayed" src="' +
                            '/assets/images/rxtour' + n + '.jpg' + '" style="' + img_style + '">';
                        dialog.setMessage(m1);
                    }
                }
            }]

            });

        }

        function unbindAccount(x, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Confirm Unbind';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, Unbind';
            message = 'Just confirming, do you want to unbind <strong>' + x.name + '</strong> from your account?';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                }
            });
        }

        function confirmCancel(x, type, callback){
             var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            if (type == 'Premium'){
                btnOkLabel = 'Cancel Premium Membership';
                message = 'Do you want to cancel your Premium Membership for <strong>'+x.name+'</strong>?'
            }
            if (type == 'Ranks'){
                btnOkLabel = 'Cancel All Custom Ranks';
                message = 'Do you want to cancel all of your Custom Ranks for <strong>'+x.name+'</strong>?'
            }
            if (type == 'All'){
                btnOkLabel = 'Cancel All Subscriptions';
                message = 'Do you want to cancel all of your Subscriptions for <strong>'+x.name+'</strong>?'
            }

            title = 'Please confirm';
            btnCancelLabel = 'Back';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                }
            });
        }

        function editNumRanks(x,callback){
            var title = 'Buy or Cancel Custom Ranks';
            var message = '';
            var btnCancelLabel = 'Back';
            var btnOkLabel = 'Purchase';
            var m1 = '';
            var m2 = '';
            var n = 1;
            var N = x.ranksQty;
            var action = 'purchase';
            var msgpayment = '<br><br>If purchasing Custom Ranks you will be ask for your payment info after clicking the Purchase button.';
            var msgcancel = '<br><br>Your Custom Ranks will be active until the last day of your subscription.';

            var msg = 'You have selected to <strong>purchase ' + n + '</strong> Custom Ranks.' + msgpayment;
            
            //message = getMessageHtml(n,msg);
            //function getMessageHtml(n,msg){
            var message = 
            '<p>You are currently subscribed to <strong>' + N + '</strong> Custom Ranks.</p>'+
            '<br>'+
            '<p class="text-left">Select what you want to do.</p>'+
            '<br>'+
            '<div class="radio">'+
                '<label><input type="radio" value="0" checked name="radiogrp">PURCHASE CUSTOM RANKINGS</label>'+
            '</div>'+
            '<div class="radio">'+
               '<label><input type="radio" value="1" name="radiogrp">CANCEL CUSTOM RANKINGS</label>'+
            '</div>'+
            '<br>' +
            '<div class="row">'+
                '<div class="col-xs-7">'+
                    '<p class="text-right">Select quantity:</p>'+
                '</div>'+
                '<div class="col-xs-5">'+
                    '<div class="input-group">'+
                        '<span class="input-group-btn">'+
                            '<button class="btn btn-primary" id="btn_minus"><i class="fa fa-minus"></i></button>'+
                        '</span>'+
                        '<input style="text-align:center" id="numRanks" class="form-control" type="text" placeholder="'+ n +'">'+
                            '<span class="input-group-btn">'+
                                '<button class="btn btn-primary" id="btn_plus"><i class="fa fa-plus"></i></button>'+
                            '</span>'+
                    '</div>'+
                '</div>'+
            '</div>'+
            '<br><p class="text-left" id="mytext">'+msg+'</p>';
                //return msghtml;    
            
            title = 'Please confirm';
            btnCancelLabel = 'Back';
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(message);
                    var x = dialogRef;
                    var msg = '';
                    var msgpayment = '<br><br>If purchasing Custom Ranks you will be ask for your payment info after clicking the Purchase button.';
                    var msgcancel = '<br><br>Your Custom Ranks will be active until last day of your subscription.';

                    $content.find('#btn_minus').click({}, function () {
                        n = n - 1;
                        if (n < 1) n = 1;
                        $content.find('#numRanks').val(n);
                        //console.log("n, N - ", n, N);
                        if (action == 'purchase'){
                            msg = 'You have selected to <strong>purchase ' + n + '</strong> Custom Ranks. ' + msgpayment;
                            $('#btn2').text('Purchase ' + n + ' Custom Rankings');
                        }
                        else {
                            msg = 'You have selected to <strong>cancel ' + n + '</strong> Custom Ranks. ' + msgcancel;
                            $('#btn2').text('Cancel ' + n + ' Custom Rankings');
                        }
                        //console.log("msg - ", msg);
                        $('#mytext').html(msg);                  
                    });
                    $content.find('#btn_plus').click({}, function () {
                        n = n + 1;
                        if (n > 10) n = 10;
                        if (action == 'cancel'){
                            if (n >= N) n = N;
                        }
                        $content.find('#numRanks').val(n);
                        //console.log("n, N - ", n, N);
                        if (action == 'purchase'){
                            msg = 'You have selected to <strong>purchase ' + n + '</strong> Custom Ranks. ' + msgpayment;
                            $('#btn2').text('Purchase ' + n + ' Custom Rankings');
                        }
                        else {
                            msg = 'You have selected to <strong>cancel ' + n + '</strong> Custom Ranks. ' + msgcancel;
                            $('#btn2').text('Cancel ' + n + ' Custom Rankings');
                        }
                        //console.log("msg - ", msg);
                        $('#mytext').html(msg);                       
                    });
                    $content.find('input[type=radio][name=radiogrp]').change(function() {
                        n = 1;
                        if (this.value == 0) {
                            action = 'purchase';
                            $('#btn2').text('Purchase ' + n + ' Custom Rankings');
                            msg = 'You have selected to <strong>purchase ' + n + '</strong> Custom Ranks. ' + msgpayment;                           
                        }
                        else if (this.value == 1) {
                            action = 'cancel';
                            $('#btn2').text('Cancel ' + n + ' Custom Rankings');
                            msg = 'You have selected to <strong>cancel ' + n + '</strong> Custom Ranks. ' + msgcancel;
                        }
                        $content.find('#numRanks').val(n);
                        $('#mytext').html(msg);
                    });
                    return $content;
                },
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                buttons: [
                {
                id: 'btn1',
                label: 'Back',
                action: function(dialog) {
                    dialog.close();
                    }
                },
                {
                id: 'btn2',
                label: 'Purchase ' + n + ' Custom Rankings',
                action: function(dialog, messagehtml) {
                   callback(action,n);
                   dialog.close();
                }
            }]
            });
        }

         function editInfo(fields,labels,vals,callback) {

            var title = '';
            var messagehtml = ''
            var btnCancelLabel = 'Cancel';
            var btnOkLabel = 'Save';

            title = 'Edit Information';

            messagehtml = '<p>Please verify the information is correct.</p>';

            for (var i=0; i<fields.length; i++){
                messagehtml = messagehtml + 
                
                '<div class="input-group">'+
                '<label class="input-group-addon">'+labels[i]+':</label>'+
                '<input type="text" class="form-control" id="'+fields[i]+'" value="'+ vals[i] +'">'+
                '</div>';
            }
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);
                    return $content;
                },
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                buttons: [
                    {
                        id: 'btn1',
                        label: 'Cancel',
                        action: function (dialog) {
                            dialog.close();
                        }
                    },
                    {
                        id: 'btn2',
                        label: 'Save',
                        action: function (dialog, messagehtml) {
                            var newvals = [];
                            var val = '';
                            for (var i = 0; i < fields.length; i++) {
                                val = dialog.getModalBody().find('#' + fields[i])[0].value;
                                //console.log(fields[i], " ", val);
                                newvals.push(val);
                            }
                            callback(newvals);
                            dialog.close();
                        }
                    }]
            });
         }

         function notificationWithCallback(title, message, callback) {

            var title = title;
            var message = message;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        callback();
                        dialogRef.close();
                    }
                }]
            });

        }

        function notificationSuccess(title, message) {

            var title = title;
            var message = message;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_SUCCESS,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function notificationDanger(title, message) {

            var title = title;
            var message = message;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_DANGER,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function endorse(type) {

            var typeStr = '';

            if (type == 'Establishment') typeStr = 'establishment';
            if (type == 'Person') typeStr = 'person';
            if (type == 'Place') typeStr = 'place';
            if (type == 'Organization') typeStr = 'organization';
            if (type == 'PersonCust') typeStr = 'person';
            if (type == 'Event') typeStr = 'event';
            if (type == 'Thing') typeStr = 'item';
            if (type == 'Short-Phrase') typeStr = 'answer';

            var title = 'Endorse!';
            var message = "Switch to Vote Mode to Vote! <br><br>Your endorsements make the rankings! <br><br>Give a <strong>thumb up</strong> " +
            "if you <strong>endorse</strong> this " + 
            typeStr + " in each ranking;" + " a <strong>thumb down</strong> if you <strong>do not endorse</strong>.";
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'Got it',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }


        function enterPassword(ok_callback, nok_callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Password Required';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Add';
            message = '<br> Please enter access password:' +
            '<br><br>' +
            '<input class="form-control" type="text" placeholder="Enter password">' +
            '<br><br>';
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: false, // <-- Default value is false
                draggable: true, // <-- Default value is false
                
                buttons: [
                    {
                        id: 'btn1',
                        label: 'Cancel',
                        action: function (dialog) {
                            nok_callback();
                            dialog.close();
                        }
                    },
                    {
                        id: 'btn2',
                        label: 'Go',
                        action: function (dialog) {

                            var password = dialog.getModalBody().find('input').val();
                            if (password == 'S@nDieg0') {
                                ok_callback();
                            }
                            else {
                                nok_callback();
                                getDialog('wrongPassword');
                            }
                            dialog.close();
                        }
                    }]
            });
        }

        function setInstagramImageUrl(id, urls){
            return answer.updateAnswer(id, ['ig_image_urls'], [urls]);
        }
        function chooseImgFromIgDlg(blobList,  answer, isOwner, navigateTowards) {

            var title = '';
            var messagehtml = ''
            var btnCancelLabel = 'No, I don\'t approve';
            var btnOkLabel = 'Yes, locate me';
            var L = blobList.length;
            var img_style = '';

            if ($rootScope.sm) {
                img_style = 'width:100%;height:auto';
            }
            else {
                img_style = 'width:100%;height:auto';
            }

            title = 'My Instagram Photos';

            var m1 = '';
            var m2 = '';
            var m3 = '';
            var m4 = '';
            var cap = '';
            
            m1 =
            '<div class="row">' +
                '<div class="col-xs-12">';
            if (InstagramService.isPreviousAvailable())
                m1 += '<button class="btn btn-default pull-left" id="previgpage">Previous</button>';
                
            if (InstagramService.isNextAvailable())
                m1 += '<button class="btn btn-default pull-right" id="nextigpage">Next</button>';
                

            m1 += '</div>';
            '</div>';
            m4 =
            '<div class="text-right">' +
            '</div><br/>';

            var imageListHtml = '';
            m2 = '<img id="image" class="displayed col-xs-3 thumbnail" src="';
            //'https://rankx.blob.core.windows.net/sandiego/';
            m3 ='" style="' + img_style + '">';
            imageListHtml = '<div class="row">';
            for (var i = 0; i < blobList.length; i++) {
                if(blobList[i].type == 'image'){
                    imageListHtml += '<div class="col-xs-6 col-md-4" style="position:relative">';
                    imageListHtml += m2 + blobList[i].images.low_resolution.url + m3;
                    var opacity = 0
                    if( answer.ig_image_urls.indexOf(blobList[i].images.low_resolution.url) != -1 ){
                        
                        opacity = 0.7;
                    }
                    imageListHtml += '<div id="add_photo" style="background-color: grey;opacity:' + opacity + ';position: absolute;left: 19px;right: 19px;top: 4px;bottom: 24px;border-radius: 5px;display: flex;align-items: center;">';
                    imageListHtml += '<i class="fa fa-check-circle-o" aria-hidden="true" style="color: #2d6c38;font-size: 100px;margin: auto" ></i>';
                    imageListHtml += '</div>';

                    // if( answer.ig_image_urls.indexOf(blobList[i].images.low_resolution.url) == -1 )
                    //     imageListHtml +=    '<div class="text-center">' +
                    //                         '<button class="btn btn-primary" style="margin-top:10px" id="add_photo">Add</button>' +
                    //                         '</div>';
                    // else
                    //     imageListHtml +=    '<div class="text-center">' +
                    //                         '<button class="btn btn-primary disabled" style="margin-top:10px" id="add_photo">Added</button>' +
                    //                         '</div>';

                    imageListHtml += '</div>';
                }
            }
            imageListHtml += '</div>';
            
            messagehtml =  m1 + imageListHtml + m4;
            
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_WIDE,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'instagram-image-dialog',
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);
                    var x = dialogRef;
                    

                    $content.find('#previgpage').click({}, function () {
                        dialogRef.close();
                        navigateTowards('previous');
                    });
                    $content.find('#nextigpage').click({}, function () {
                        dialogRef.close();
                        navigateTowards('next');
                    });

                    $content.find('#add_photo').click({}, function () {
                        console.log(answer.ig_image_urls);
                        var url = $(this).parent().children('#image').attr('src');

                        if(answer.ig_image_urls.indexOf(url) != -1){
                            // $(this).html('Added');
                            // $(this).css('opacity', 0.7);
                            var _this = this;
                            var itempos = answer.ig_image_urls.indexOf(url);
                            if( itempos != -1){
                                answer.ig_image_urls = answer.ig_image_urls.substr(0, itempos-1) + answer.ig_image_urls.substr(itempos +url.length);

                                setInstagramImageUrl(answer.id, answer.ig_image_urls)
                                .then(function(answer){
                                    $rootScope.$emit('refreshImages');
                                    $(_this).css('opacity', 0);
                                })
                            }
                        }
                        else{
                            var _this = this;
                            answer.ig_image_urls += ";" + url;
                            setInstagramImageUrl(answer.id, answer.ig_image_urls)
                            .then(function(answer){
                                $rootScope.$emit('refreshImages');
                                // $(_this).html('Added');
                                $(_this).css('opacity', 0.7);
                            })
                        }
                        
                    });
                    return $content;
                },

                buttons: [{
                    label: 'Close',
                    action: function (dialogRef) {
                        //console.log("dialogRef2---", dialogRef);
                        dialogRef.close();
                    },
                }],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },

            });

        }
       
            function whatisrankquestion() {

            var title = 'Ranking Question';
            var message = 'The <strong>Ranking Question</strong> is what you ask users when comparing two items in the rank.' + 
            ' It is the question to determine which item deserves the higher ranking.' + '<br><br>' + 
            'For example, if ranking the "Hamburgers in Pacific Beach", ' + 
            'the <strong>Ranking Question</strong> would be "Who makes the better burgers?".<br><br>'+
            'The Ranking Question is shown in the Rank Console, when users rank their endorsements.<br><br>'+
            '<img style="width:100%;height:auto" src="/assets/images/whatisrankquestion.png">' ;
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'Got it',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
            }
        function showAllFriendsListDlg(userObjs, answername) {
            var imageListHtml = '';
            for (var i = 0; i < userObjs.length; i++) {
                imageListHtml += '<div class="row" style="padding-bottom:10px">';
                imageListHtml += '<div class="col-xs-3 col-md-3 text-center">';
  
                imageListHtml += '<img src="' + userObjs[i].picture.data.url + '" class="img-responsive img-circle profile-avatar" style="width: 100%;height: 100%;"/>';
                imageListHtml += '</div>';

                imageListHtml += '<div class="col-xs-9 col-md-9 text-center">';
                imageListHtml +=  '<div class="text-left"><strong>' + userObjs[i].first_name + ' ' + userObjs[i].last_name + '</strong> endorsed in: </div>';
                for (var j=0; j < userObjs[i].endorsements.length; j++){
                    imageListHtml += '<i>'+userObjs[i].endorsements[j] + '</i></br>';
                }
                imageListHtml += '</div>';
                imageListHtml += '</div>';
            }
                     
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_SM,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'fav-list-user-image-dialog',
                title: "Friends that like " + answername,
                message: function (dialogRef) {
                    var $content = $(imageListHtml);
                    var x = dialogRef;

                    return $content;
                },

                buttons: [{
                    label: 'Close',
                    action: function (dialogRef) {
                        dialogRef.close();
                    },
                }],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: "OK",
                btnOKLabel: "Close",
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },

            });
        }


        function showBusinessDetailDlg(x, STRIPE_COMMISSION_PERCENTAGE,CUSTOM_RANK_PRICE) {
            var imageListHtml = 
            '<div class="row"> ' +
            '<div class="col-xs-12"> ' +
            '<tr ng-repeat-end> ' +
                '<td colspan=3> ' +
                    '<table class="table" > ' +
                        '<thead style="border-style:none;"> ' +
                            '<tr> ' +
                             '   <th style="width:45%" text-align="center">Subscription</th> ' +
                             '   <th style="width:15%" text-align="center">Commission</th> ' +
                            '</tr> ' +
                        '</thead> ' +
                        '<tbody> ';
            if(x.ispremium){
                imageListHtml += 
                            '<tr style="cursor:pointer;">' +
                            '   <td style="width:45%">Premium Membership</td>' +
                            '    <td style="width:15%">' + x.price*STRIPE_COMMISSION_PERCENTAGE + '</td>' +
                            '</tr>';
            }
            if(x.hasranks){
                imageListHtml += 
                            '<tr style="cursor:pointer;">' + 
                                '<td style="width:45%">' + x.ranksqty +' Custom Ranks</td>' + 
                                '<td style="width:15%">$'+x.ranksqty*CUSTOM_RANK_PRICE*STRIPE_COMMISSION_PERCENTAGE + '</td>' + 
                            '</tr>';
            }
            imageListHtml +=          
            '                <tr>' + 
            '                    <td style="width:45%">Total</td>' + 
            '                    <td style="width:15%; background-color: darkgray;">$'+x.totalCommission+'</td>' + 
            '                </tr>' + 
            '            </tbody>' + 
            '        </table>' + 
            '    </td>' + 
            '</tr></div></div>';
            
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_SM,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'admin-payment-business-detail-dialog',
                title: x.answerObj.name + " Details",
                message: function (dialogRef) {
                    var $content = $(imageListHtml);
                    var x = dialogRef;

                    return $content;
                },

                buttons: [{
                    label: 'Close',
                    action: function (dialogRef) {
                        dialogRef.close();
                    },
                }],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: "OK",
                btnOKLabel: "Close",
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },

            });
        }

        function changeCommissionDlg(STRIPE_COMMISSION_PERCENTAGE, execChangeFee) {
            var imageListHtml = 
            '<div class="row"> ' +
            '<div class="col-xs-12"> ' +
            '<div class="form-group">' +
            '    <label for="commission-percent">Please Type Commission Percentage.</label> '+
            '    <div class="col-xs-11"><input type="commission-percent" class="form-control" id="commission-percent" value="' + STRIPE_COMMISSION_PERCENTAGE*100 + '"> </div>' +
            '    <div class="col-xs-1" style="padding: 10px;padding-left: 0px;"><span>%</span></div>' +
            '</div>'
            '</div></div>';
            
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_SM,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'change-commission-percentage-dialog',
                title: "Change Commmission",
                message: function (dialogRef) {
                    var $content = $(imageListHtml);
                    var x = dialogRef;

                    return $content;
                },

                buttons: [
                    {
                        label: 'Close',
                        action: function (dialogRef) {
                            dialogRef.close();
                        }
                    },
                    {
                        label: 'OK',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var percent = dialogRef.getModalBody().find('input').val();
                            if (result) execChangeFee(percent);
                            dialogRef.close();
                        },
                    }
                ],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: "OK",
                btnOKLabel: "Close",
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                }
            });
        }

        function changeCodePriceDlg(codeprice, execChangeCodePrice) {
            var imageListHtml = 
            '<div class="row"> ' +
            '<div class="col-xs-12"> ' +
            '<div class="form-group">' +
            '    <label for="commission-percent">Please Enter '+codeprice.code+' plan price.</label> '+
            '    <div class="col-xs-11"><input type="commission-percent" class="form-control" id="commission-percent" value="' + codeprice.price + '"> </div>' +
            '    <div class="col-xs-1" style="padding: 10px;padding-left: 0px;"><span>$</span></div>' +
            '</div>'
            '</div></div>';
            
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_SM,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'change-commission-percentage-dialog',
                title: "Change " + codeprice.code + " Price",
                message: function (dialogRef) {
                    var $content = $(imageListHtml);
                    var x = dialogRef;

                    return $content;
                },

                buttons: [
                    {
                        label: 'Close',
                        action: function (dialogRef) {
                            dialogRef.close();
                        }
                    },
                    {
                        label: 'Change',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var price = dialogRef.getModalBody().find('input').val();
                            if (result) execChangeCodePrice(codeprice, price);
                            dialogRef.close();
                        },
                    }
                ],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: "OK",
                btnOKLabel: "Close",
                btnOKClass: 'btn-success',
                btnCancelClass: 'btn-warning',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                }
            });
        }


        function openSubscriptionDlg(execSubscription) {
            var imageListHtml = 
            '<div class="row"> ' +
            '<div class="col-xs-12"> ' +
            '<div class="form-group">' +
            //'    <label for="commission-percent">You want to subscribe? Please Enter Email Address.</label> '+
            '    <p>Hey there, enjoying <strong>Rank-X</strong>? <br><br> Let\'s stay in touch!<br><br> Enter your email address' +
                ' below to subscribe to our newsletter to get <strong>updates</strong> about new and popular rankings and <strong>stay informed</strong> of local deals and events!</p><br>'+
            '    <div class="col-xs-11"><input type="text" id="subscribe-email" class="form-control"  ' + 
            '    value="' + ($rootScope.user ? $rootScope.user.email : '') + '" placeholder="Enter your email here"> </div>' +
            '</div>'
            '</div></div>';
            
            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_SM,
                type: BootstrapDialog.TYPE_PRIMARY,
                cssClass: 'subscription-dialog',
                title: "Sign up for our newsletter!",
                message: function (dialogRef) {
                    var $content = $(imageListHtml);
                    var x = dialogRef;

                    return $content;
                },

                buttons: [
                    {
                        label: 'Not Now',
                        action: function (dialogRef) {
                            dialogRef.close();
                        }
                    },
                    {
                        label: 'Subscribe',
                        cssClass: 'btn-success',
                        action: function (dialogRef, result) {
                            //console.log("dialogRef---", dialogRef);
                            var email = dialogRef.getModalBody().find('input').val();
                            if (result) execSubscription(email);
                            dialogRef.close();
                        },
                    }
                ],
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
            });
        }

        function confirmSameAnswer(answer1, callback) {

            var answerhtml = generateAnswerHtml(answer1);

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Just checking';
            btnCancelLabel = 'No, different one';
            btnOkLabel = 'Yes, that\'s it';
            message = 'Do you mean this <strong>' + answer1.name + '</strong>? </br></br>' +
            answerhtml + 
            '</br>' +
            '<div class="row">'+
            '<div class="col-xs-2 col-sm-3 col-md-3"></div>'+
            '<div class="col-xs-8 col-sm-6 col-md-6"><img src=' + answer1.imageurl + ' class="thumbnail" style="width:100%; max-height:200px;" id="ansimage"></div>' +
            '<div class="col-xs-2 col-sm-3 col-md-3"></div>'+
            '</div>';

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                    //else callback1(answer1);
                }
            });
       
        }

        function generateAnswerHtml(answer1){
            var answerhtml = '';
            var newline = '';
            
            for (var i = 0; i < $rootScope.fields.length; i++) {
                switch ($rootScope.fields[i].name) {
                    case "name": {
                        newline = '<strong class="capitalize">' + 'Name' + '</strong>: ' + answer1.name + '</br>';
                        break;
                    }
                    case "location": {
                        if (answer1.location) newline = '<strong class="capitalize">' + 'Location' + '</strong>: ' + answer1.location + '</br>';
                        else newline = '<strong>' + 'Location' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "cityarea": {
                        newline = '<strong class="capitalize">' + 'Neighborhood' + '</strong>: ' + answer1.cityarea + '</br>';
                        break;
                    }
                    case "addinfo": {
                        if (answer1.addinfo) newline = '<strong class="capitalize">' + 'Additional Info' + '</strong>: ' + answer1.addinfo + '</br>';
                        else newline = '<strong>' + 'Additional Info' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "phone": {
                        if (answer1.phone) newline = '<strong class="capitalize">' + 'Phone' + '</strong>: ' + answer1.phone + '</br>';
                        else newline = '<strong>' + 'Phone' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "website": {
                        if (answer1.website) newline = '<strong class="capitalize">' + 'Website' + '</strong>: ' + answer1.website + '</br>';
                        else newline = '<strong>' + 'Website' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                    case "email": {
                        if (answer1.email) newline = '<strong class="capitalize">' + 'Email' + '</strong>: ' + answer1.email + '</br>';
                        else newline = '<strong>' + 'Email' + '</strong>: ' + '' + '</br>';
                        break;
                    }
                }
                answerhtml = answerhtml + newline;                
            }
            
            return answerhtml;
        }

        function confirmSameAnswerMultiple(answers, callback) {            

            var title = '';
            var messagehtml = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';
            var answerhtml = generateAnswerHtml(answers[0]);
            var n = 0;

            title = 'Just checking';
            btnCancelLabel = 'None of the options';
            btnOkLabel = 'Yes, that\'s it';
            messagehtml = '<p>We have '+ answers.length + ' records for <strong>' + answers[0].name + '</strong>. Please browse '+
            'these records to see if the one wish to add to the ranking <strong><i>'+ $rootScope.cCategory.title + '</i></strong> already exists.</p></br>' +
            '<div class="text-center"><div class="row">'+
            '<button class="btn btn-default" id="nextbutton">Next</button>'+
            '<p id="number">&nbsp&nbsp'+(n+1)+'</p>'+
            '</div></div>'+'<br>'+
            '<p id="answerinfo">'+answerhtml+'</p>'+
            '</br>' +
            '<div class="row">'+
            '<div class="col-xs-2 col-sm-3 col-md-3"></div>'+
            '<div class="col-xs-8 col-sm-6 col-md-6"><img src=' + answers[0].imageurl + ' class="thumbnail" style="width:100%; max-height:200px;" id="ansimage"></div>' +
            '<div class="col-xs-2 col-sm-3 col-md-3"></div>'+
            '</div>';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(messagehtml);
                    var x = dialogRef;
                    $content.find('#nextbutton').click({}, function () {
                        n = n + 1;
                        if (n > answers.length-1) n = 0;
                        answerhtml = generateAnswerHtml(answers[n]);
                        //x.setMessage(messagehtml+answerhtml);
                        $('#number').html(n+1);
                        $('#answerinfo').html(answerhtml);
                        $content.find('#ansimage').attr('src', answers[n].imageurl);
                    });
                    return $content;
                },            
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback(n);
                    //else callback1(answer1);
                }
            });
       
        }
        
        function showTOSCustomersDlg() {

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: "Terms of Service",
                message: $('<div></div>').load('/assets/partials/toscustomer.tem'),
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnOKLabel: "Back",
                btnOKClass: 'btn-primary',
                size: BootstrapDialog.SIZE_WIDE,
            });
        }


        function showTOSPromotersDlg() {

            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: "Terms of Service",
                message: $('<div></div>').load('/assets/partials/tospromoter.tem'),
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnOKLabel: "Back",
                btnOKClass: 'btn-primary',
                size: BootstrapDialog.SIZE_WIDE,
            });
        }


        function sortbyHelpDialog(type) {

            var title = 'Sorting Options';
            var message = "<p style='text-align:left'><strong>Rank</strong>. Sorts list by rank points, which are a mix of endorsements and rank matches.</p>" +
                "<p style='text-align:left'><strong>Popular</strong>. Sorts list by votes (endorsements) in this ranking.</p>" +
                "<p style='text-align:left'><strong>Distance</strong>. Sorts list by distance closest to you. </p>" +
                "<p style='text-align:left'><strong>Trending</strong>. Sorts list by votes (endorsements) in the last month.</p>";

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'Got it',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function maybeRepeatVrows(newop, vrows, callback) {

            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Just checking';
            btnCancelLabel = 'Cancel';
            btnOkLabel = 'My opinion is different, add it';
            message = 'Your opinion:' +
            '<br><p class="text-center"><i>' + newop + '</i></p>' +
            'might be similar to these already existing opinions: <br><br><p class="text-center">'; 

            for (var i=0; i< vrows.length; i++){
                message = message + '<i>' + vrows[i].title + '</i><br>';
            }

            message = message + '</p>Double check you are not adding an opinion that is essentially same as one already there.<br>';
            
            //message = message;
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'btn-primary',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                    //else callback1(answer1);
                }
            });
       
        }

        function showSpecial(x) {

            var title = 'Special Details';
            var message = '';
            var imageStyle = '';

            datetime.formatdatetime(x);
            //$rootScope.specials[i].name = vm.answer.name;
            var htmlmsg = htmlops.specialHtml(x);
            //$rootScope.specials[i].html = htmlmsg;
            //Separate style (not working with ng-bind-html)
            var spStyle = 'background-color:' + x.bc + ';color:' + x.fc + ';' +
                'white-space:pre;';
            x.style = spStyle;
            if (x.image != undefined &&
                x.image != $rootScope.EMPTY_IMAGE) {
                x.hasimage = true;
            }
            else x.hasimage = false;

            if ($rootScope.DISPLAY_XSMALL) imageStyle = 'width:100%;height:auto;';
            if ($rootScope.DISPLAY_SMALL)  imageStyle = 'width:100%;height:auto;max-height:300px;'; 
            if ($rootScope.DISPLAY_MEDIUM) imageStyle = 'width:100%;height:auto;max-height:350px;';
            if ($rootScope.DISPLAY_LARGE)  imageStyle = 'width:100%;height:auto;max-height:400px;';

            //console.log("x.image, x.hasimage - ", x.image, x.hasimage);

            message = '<div ng-attr-style="'+ x.style +'">' + htmlmsg  + '</div>' +
            (x.hasimage ? '<div class="text-middle">' +
            '<img class="displayed" src=' + x.image + ' style="' + imageStyle + 'margin-left:auto;margin-right:auto;">'+
            '</div><br>' : '<br>');
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef, result) {
                        dialogRef.close();
                    }
                }]
            });
        }

        function typemismatch(y,x) {

            var title = 'Type MisMatch';
            var message = '';
            
            message = 'Can not add an answer of type <em>' +
            ((x == 'Establishment' || x == 'Place' || x == 'Organization')  ? 'Establishment or Place':'') +
            (x == 'PersonCust' ? 'Freelancer':'') + 
            (x == 'Short-Phrase' ? 'Opinion':'') +
            (x == 'Event' ? 'Event':'') +
            (x == 'Thing' ? 'Item':'') +
            (x == 'Simple' ? 'Private Item':'') + 
            '</em> to a ranking of type <em>'+
            ((y == 'Establishment' || y == 'Place' || y == 'Organization')  ? 'Establishment or Place':'') +
            (y == 'PersonCust' ? 'Freelancer':'') + 
            (y == 'Short-Phrase' ? 'Opinion':'') +
            (y == 'Event' ? 'Event':'') +
            (y == 'Thing' ? 'Item':'') +
            (y == 'Simple' ? 'Private Item':'') + 
            '</em>.';

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef, result) {
                        dialogRef.close();
                    }
                }]
            });
        }

         function confirmAddRank(category,answer,callback){
            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            message = 'This will add '+ answer.name + ' to ' + '<em>' + category.title +'</em>.';

            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Ok';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback(category,answer);
                }
            });
        }

        function confirmRemoveRank(category,answer,callback){
            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';

            title = 'Please Confirm';
            message = 'This will remove '+ answer.name + ' from ' + '<em>' + category.title +'</em>.';

            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Yes, delete';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback(category,answer);
                }
            });
        }

        function confirmSiblings(answer,callback){
            var title = '';
            var message = '';
            var btnCancelLabel = '';
            var btnOkLabel = '';
            var siblingshtml = '<div class="text-center">';

            var idx = 0;
            for (var i=0; i<answer.ansLocs.length; i++){
                idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf(answer.ansLocs[i]);  
                siblingshtml = siblingshtml + $rootScope.answers[idx].name + '</br>';
            }
            siblingshtml = siblingshtml + '</div>'; 

            title = 'Please Confirm';
            message = 'This will add the following sibling Establishments: <br>' + siblingshtml + '<br> to ' + '<strong>' + answer.name +'</strong>.';

            btnCancelLabel = 'Cancel';
            btnOkLabel = 'Ok';
            
            BootstrapDialog.confirm({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                closable: true, // <-- Default value is false
                draggable: true, // <-- Default value is false
                btnCancelLabel: btnCancelLabel,
                btnOKLabel: btnOkLabel,
                btnOKClass: 'default',
                btnCancelAction: function (dialogRef) {
                    dialogRef.close();
                },
                //callback: function (dialogRef, result) {
                callback: function (result) {
                    if (result) callback();
                }
            }); 
        }

        function showLocations(locs){
            var title = 'Additional Locations';
            var message = '' ;
            var list = '';

            list = '<ul class="list-group">';
            for (var i=0; i< locs.length; i++){

                list = list +
                '<li id="item' + i +'"class="list-group-item"'+ 
                    ' style="cursor:pointer;"><strong>' + locs[i].name + '</strong>,&nbsp'+ locs[i].location + ',&nbsp'+ locs[i].cityarea + 
                '</li>';
            }
            list = list + '</ul>';

            message = list;

            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(message);
                    var x = dialogRef;
                    $content.find('#item0').click({}, function () {
                            $window.scrollTo(0, 0);
                            $state.go('answerDetail',{index: locs[0].id});
                            dialogRef.close();
                    });
                    $content.find('#item1').click({}, function () {
                            $window.scrollTo(0, 0);
                            $state.go('answerDetail',{index: locs[1].id});
                            dialogRef.close();
                    });
                    $content.find('#item2').click({}, function () {
                            $window.scrollTo(0, 0);
                            $state.go('answerDetail',{index: locs[2].id});
                            dialogRef.close();
                    });
                    $content.find('#item3').click({}, function () {
                            $window.scrollTo(0, 0);
                            $state.go('answerDetail',{index: locs[3].id});
                            dialogRef.close();
                    });
                    $content.find('#item4').click({}, function () {
                            $window.scrollTo(0, 0);
                            $state.go('answerDetail',{index: locs[4].id});
                            dialogRef.close();
                    });
                    
                    return $content;
                },
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef, result) {
                        dialogRef.close();
                    }
                }]
            });


        }


        function showLearnMore(url){
            var title = 'Learn More';
            var message = '<div class="text-center"><iframe width="' + ($rootScope.sm ? '300' : '500') + '" height="' + ($rootScope.sm ? '200' : '350') + '" src="'+ url + '?autoplay=1"' +
                        ' frameborder="0" allowfullscreen></iframe></div>' ;

            BootstrapDialog.show({
                size: BootstrapDialog.SIZE_WIDE,
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: function (dialogRef) {
                    var $content = $(message);
                    
                    return $content;
                },
                buttons: [{
                    id: 'btn-ok',
                    label: 'I got it.',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef, result) {
                        dialogRef.close();
                    }
                }]
            });
            
        }

        function imageBank() {

            var title = 'Image Banks';
            var message = '<strong>Pixabay</strong> and <strong>Pexels</strong> are databases of royalty free images. We encourage you to '+
            'visit their websites to learn more about the services they offer. <br><br>' +
            '<div class="row">'+
            '<div class="col-xs-12 col-sm-6">'+     
            '<img src="../../../assets/images/pixabay-logo.png" alt="Pixabay"'+
            'style="width:100%;height:45px;padding:3px;border-style:solid;border-width:1px;">'+
             '<div class="text-center"><a href="https://www.pixabay.com/">Visit Pixabay</a></div>'+
            '</div>'+
            '<div class="col-xs-12 col-sm-6">'+
            '<img src="../../../assets/images/pexels-logo.png" alt="Pexels"'+
            'style="width:100%;height:45px;padding:3px;border-style:solid;border-width:1px;">'+
            '<div class="text-center"><a href="https://www.pexels.com/">Visit Pexels</a></div>'+
            '</div>'+
            '</div>';
            
            BootstrapDialog.show({
                type: BootstrapDialog.TYPE_PRIMARY,
                title: title,
                message: message,
                buttons: [{
                    id: 'btn-ok',
                    label: 'OK',
                    cssClass: 'btn-primary',
                    autospin: false,
                    action: function (dialogRef) {
                        dialogRef.close();
                    }
                }]
            });

        }

    }
    
})();

(function () {
    'use strict';

    angular
        .module('app')
        .service('commentops', commentops);

    commentops.$inject = ['$rootScope', 'table', 'answer', 'comment', 'comment2'];

    function commentops($rootScope, table, answer, comment, comment2) {

        var service = {

            loadComments: loadComments,
            postComment: postComment,
            getIconColors: getIconColors
        };

        var _colors = {};
        _colors.bc = '';
        _colors.fc = '';

        return service;

        function loadComments(type, x) {
            if (!x.commLoaded) {
                x.commLoaded = true;
                if ($rootScope.isLoggedIn) {
                    x.initials = $rootScope.user.name.replace(/[^A-Z]/g, '');
                    getIconColors($rootScope.user.id, _colors);
                    x.bc = _colors.bc;
                    x.fc = _colors.fc;
                }
                //comments = [];
                if (type == 'answer') {
                    return comment2.getcomments().then(function (_comments) {
                        //console.log("_comments", _comments);
                        x.comments = _comments;
                        for (var i = 0; i < x.comments.length; i++) {
                            x.comments[i].initials = x.comments[i].username.replace(/[^A-Z]/g, '');

                            var datenow = new Date();
                            var tz = datenow.getTimezoneOffset();

                            //Explicitly format the date -- iPhone has issues otherwise
                            var t = x.comments[i].timestmp.split(/[- :]/);
                            var cdate = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5]);
                            
                            cdate.setMinutes(cdate.getMinutes() - tz);
                            function pad(n) {return n < 10 ? '0'+ n : n;}
                            
                            var dateStr = cdate.getMonth()+1+"/"+cdate.getDate()+"/"+cdate.getFullYear();
                            
                            var hrs = cdate.getHours();
                            var timeStr = hrs > 12 ? hrs%12 + ':'+ pad(cdate.getMinutes()) + ' '+'PM' :
                                                     hrs + ':'+ pad(cdate.getMinutes()) + ' '+'AM'; 
                                          
                            x.comments[i].date = dateStr + ' ' + timeStr;
                            getIconColors(x.comments[i].user, _colors);
                            x.comments[i].bc = _colors.bc;
                            x.comments[i].fc = _colors.fc;
                        }
                        //console.log("vm.commLoaded, vm.comments.length, vm.isLoggedIn, vm.commentAllowed ---", vm.commLoaded, vm.comments.length, vm.isLoggedIn, vm.commentAllowed);
                    });
                }
                if (type == 'category') {
                    return comment.getcomments().then(function (_comments) {
                        //console.log("_comments", _comments);
                        x.comments = _comments;
                        for (var i = 0; i < x.comments.length; i++) {
                            x.comments[i].initials = x.comments[i].username.replace(/[^A-Z]/g, '');

                            var datenow = new Date();
                            var tz = datenow.getTimezoneOffset();

                            //Explicitly format the date -- iPhone has issues otherwise
                            var t = x.comments[i].timestmp.split(/[- :]/);
                            var cdate = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5]);
                            
                            cdate.setMinutes(cdate.getMinutes() - tz);
                            function pad(n) {return n < 10 ? '0'+ n : n;}
                            
                            var dateStr = cdate.getMonth()+1+"/"+cdate.getDate()+"/"+cdate.getFullYear();
                            
                            var hrs = cdate.getHours();
                            var timeStr = hrs > 12 ? hrs%12 + ':'+ pad(cdate.getMinutes()) + ' '+'PM' :
                                                     hrs + ':'+ pad(cdate.getMinutes()) + ' '+'AM'; 
                                          
                            x.comments[i].date = dateStr + ' ' + timeStr;
                            getIconColors(x.comments[i].user, _colors);
                            x.comments[i].bc = _colors.bc;
                            x.comments[i].fc = _colors.fc;
                        }
                        //console.log("vm.commLoaded, vm.comments.length, vm.isLoggedIn, vm.commentAllowed ---", vm.commLoaded, vm.comments.length, vm.isLoggedIn, vm.commentAllowed);
                    });
                }
            }
        }

        function postComment(type, x) {
            var cobj = {};
            cobj.body = x.newComment;
            cobj.username = $rootScope.user.name;
            cobj.user = $rootScope.user.id;
            cobj.picture = $rootScope.user.picture.data.url;
            cobj.timestmp = Date.now();
            x.newComment = '';
            if (type == 'category') {
                cobj.category = $rootScope.cCategory.id;
                comment.addcomment(cobj).then(function () {
                    cobj.initials = $rootScope.user.name.replace(/[^A-Z]/g, '');
                    getIconColors($rootScope.user.id, _colors);
                    //datetime.formatdatetime(cobj);
                    cobj.fc = _colors.fc;
                    cobj.bc = _colors.bc;
                    cobj.date = 'Just now';
                    x.comments.push(cobj);
                    table.update($rootScope.cCategory.id, ['numcom'], [x.comments.length]);
                });
            }
            if (type == 'answer') {
                cobj.answer = $rootScope.canswer.id;
                comment2.addcomment(cobj).then(function () {
                    cobj.initials = $rootScope.user.name.replace(/[^A-Z]/g, '');
                    getIconColors($rootScope.user.id, _colors);
                    //datetime.formatdatetime(cobj);
                    cobj.fc = _colors.fc;
                    cobj.bc = _colors.bc;
                    cobj.date = 'Just now';
                    x.comments.push(cobj);
                    answer.updateAnswer($rootScope.canswer.id, ['numcom'], [x.comments.length]);
                    //console.log("vm.comments - ", vm.comments);                
                });
            }
        }

        function getIconColors(x, c) {
            switch (x % 10) {
                case 0: { c.bc = '#b3b3b3'; c.fc = 'black'; break; }
                case 1: { c.bc = '#666666'; c.fc = 'white'; break; }
                case 2: { c.bc = '#006bb3'; c.fc = 'white'; break; }
                case 3: { c.bc = '#009933'; c.fc = 'white'; break; }
                case 4: { c.bc = '#cc0000'; c.fc = 'white'; break; }
                case 5: { c.bc = '#538cc6'; c.fc = 'black'; break; }
                case 6: { c.bc = '#b36b00'; c.fc = 'white'; break; }
                case 7: { c.bc = '#999966'; c.fc = 'black'; break; }
                case 8: { c.bc = '#4d0099'; c.fc = 'white'; break; }
                case 9: { c.bc = '#009999'; c.fc = 'black'; break; }
            }
        }


    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('comment2', comment2);

    comment2.$inject = ['$http', '$q', '$rootScope','uaf'];

    function comment2($http, $q, $rootScope, uaf) {

        //Members
        var _comments = [];
        var baseURI = '/api/v2/mysql/_table/comments2';

        var service = {
            getcomments: getcomments,
            getcommentsbyanswer: getcommentsbyanswer,
            addcomment: addcomment,
            updatecomment: updatecomment,
            deletecomment: deletecomment,
            deletecommentsbyuser: deletecommentsbyuser
        };

        return service;

        function getcomments(forceRefresh) {
            // console.log("getAnswers..._areAnswersLoaded()", _areAnswersLoaded());

            if (_arecommentsLoaded() && !forceRefresh) {

                 return $q.when(_comments);
            }

            var url = baseURI +'/?filter=answer='+ $rootScope.canswer.id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _comments = result.data.resource;
            }

        }

        function getcommentsbyanswer(answer) {
            
            var url = baseURI +'/?filter=answer='+ answer;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _comments = result.data.resource;
            }

        }

       function addcomment(newcomment) {

            var url = baseURI;
            var resource = [];

            resource.push(newcomment);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var newcommentx = newcomment;
                newcommentx.id = result.data.resource[0].id; 
                //_comments.push(newcommentx);
                
                uaf.post('commentA',['answer', 'comment'],[newcomment.answer, newcomment.body]); //user activity feed 
                //$rootScope.ccomments.push(newcommentx);

                if ($rootScope.DEBUG_MODE) console.log("Adding new comment succesful", result);
                return result.data;
            }

        }

        function updatecomment(comment_id, upV, downV) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = comment_id;
            data.upV = upV;
            data.downV = downV;

            obj.resource.push(data);

            var url = baseURI;

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating comment vote counts succesful");
                return result.data;
            }
        }

        function deletecomment(comment_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = comment_id;

            obj.resource.push(data);

            var url = baseURI + '/' + comment_id;
            
            //update (delete answer) local copy of answers
            var i = _comments.map(function(x) {return x.id; }).indexOf(comment_id);
            if (i > -1) _comments.splice(i,1);
            
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting comment was succesful");
                return result.data;
            }
        }
        
        function deletecommentsbyuser(user_id) {
            
            //delete records from local copy
            for (var i = 0; i < _comments.length; i++) {
                if (_comments[i].user == user_id) {
                    _comments.splice(i, 1);
                }
            }

            var url = baseURI + '?filter=user=' + user_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting comments for answer was succesful");
                return result.data;
            }
        }
        

        function _arecommentsLoaded() {

            //return _comments.length > 0;
            return false;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('comment', comment);

    comment.$inject = ['$http', '$q', '$rootScope','uaf'];

    function comment($http, $q, $rootScope,uaf) {

        //Members
        var _comments = [];
        var baseURI = '/api/v2/mysql/_table/comments';

        var service = {
            getcomments: getcomments,
            getcommentsbyrank: getcommentsbyrank,
            addcomment: addcomment,
            updatecomment: updatecomment,
            deletecomment: deletecomment,
            deletecommentsbyuser: deletecommentsbyuser
        };

        return service;

        function getcomments(forceRefresh) {
            // console.log("getAnswers..._areAnswersLoaded()", _areAnswersLoaded());

            if (_arecommentsLoaded() && !forceRefresh) {

                 return $q.when(_comments);
            }

            var url = baseURI +'/?filter=category='+ $rootScope.cCategory.id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _comments = result.data.resource;
            }

        }

        function getcommentsbyrank(category) {
            var url = baseURI +'/?filter=category='+ category;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _comments = result.data.resource;
            }

        }

       function addcomment(newcomment) {

            var url = baseURI;
            var resource = [];

            resource.push(newcomment);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var newcommentx = newcomment;
                newcommentx.id = result.data.resource[0].id; 
                //_comments.push(newcommentx);
                
                uaf.post('commentR',['category'],[newcomment.category]); //user activity feed 
                //$rootScope.ccomments.push(newcommentx);

                if ($rootScope.DEBUG_MODE) console.log("Adding new comment succesful", result);
                return result.data;
            }

        }

        function updatecomment(comment_id, upV, downV) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = comment_id;
            data.upV = upV;
            data.downV = downV;

            obj.resource.push(data);

            var url = baseURI;

            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating comment vote counts succesful");
                return result.data;
            }
        }

        function deletecomment(comment_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = comment_id;

            obj.resource.push(data);

            var url = baseURI + '/' + comment_id;
            
            //update (delete answer) local copy of answers
            var i = _comments.map(function(x) {return x.id; }).indexOf(comment_id);
            if (i > -1) _comments.splice(i,1);
            
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting comment was succesful");
                return result.data;
            }
        }
        
        function deletecommentsbyuser(user_id) {
            
            //delete records from local copy
            for (var i = 0; i < _comments.length; i++) {
                if (_comments[i].user == user_id) {
                    _comments.splice(i, 1);
                }
            }

            var url = baseURI + '?filter=user=' + user_id;

            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting comments for answer was succesful");
                return result.data;
            }
        }
        

        function _arecommentsLoaded() {

            //return _comments.length > 0;
            return false;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('catans', catans);

    catans.$inject = ['$http', '$q','$rootScope','votes','uaf'];

    function catans($http, $q, $rootScope, votes, uaf) {

        // Members
        var _allcatans = [];
        var _fetchAnswersMem = [];
        var _fetchRanksMem = [];
        var _idx = 0;
        
        $rootScope.catansrecs = _allcatans;

        var baseURI = '/api/v2/mysql/_table/catans';

        //for performance request only following fields:
        var fields = '';
            fields += 'category,answer,upV,downV,rank,scope,id';
        
        var service = {
            getAllcatans: getAllcatans,
            getAllcatansX: getAllcatansX,
            getAllcatansY: getAllcatansY,
            //getbyCategory: getbyCategory,
            postRec: postRec,
            postRec2: postRec2,
            deleteRec: deleteRec,
            deleteAnswer: deleteAnswer,
            updateRec: updateRec,
            deletebyCategory: deletebyCategory,
            getCatan: getCatan,
            deleteCatan: deleteCatan
        };

        return service;

        function getCatan(id) {


            var url = baseURI + '/' + id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return result.data;
            }
        }
        
        function getAllcatans(forceRefresh) {

            //Get all catans records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            var url1 = baseURI + '?offset=' + 1 * 1000;
            var url2 = baseURI + '?offset=' + 2 * 1000;
            var url3 = baseURI + '?offset=' + 3 * 1000;
            var url4 = baseURI + '?offset=' + 4 * 1000;
            var url5 = baseURI + '?offset=' + 5 * 1000;
            var url6 = baseURI + '?offset=' + 6 * 1000;
            var url7 = baseURI + '?offset=' + 7 * 1000;
            var url8 = baseURI + '?offset=' + 8 * 1000;
            var url9 = baseURI + '?offset=' + 9 * 1000;

            var p0 = $http.get(url0);
            var p1 = $http.get(url1);
            var p2 = $http.get(url2);
            var p3 = $http.get(url3);
            var p4 = $http.get(url4);
            var p5 = $http.get(url5);
            var p6 = $http.get(url6);
            var p7 = $http.get(url7);
            var p8 = $http.get(url8);
            var p9 = $http.get(url9);

            return $q.all([p0, p1, p2, p3, p4, p5, p6, p7, p8, p9]).then(function (d){
                var data = d[0].data.resource.concat(d[1].data.resource, d[2].data.resource, d[3].data.resource, d[4].data.resource,
                d[5].data.resource, d[6].data.resource, d[7].data.resource, d[8].data.resource, d[9].data.resource);
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Cat-Ans: ", _allcatans.length);
                return _allcatans;            
            }, _queryFailed);  
            
        }

        function getAllcatansX(data) {
            var _datax = [];  //this is filtered array (ignore those ranks for which catans already fetched)
            if (data.length > 0) {
                data.forEach(function (item) {
                    if (_fetchRanksMem.indexOf(item.id) < 0) {
                        _datax.push(item);
                        _fetchRanksMem.push(item.id);
                    }
                });
            }
            //_datax = [];
            if (_datax.length == 0) return $q.when(false);
                
            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                if (_datax[i].catstr){
                    var catArr = _datax[i].catstr.split(':').map(Number);
                    for (var j=0; j<catArr.length; j++) {
                        filterstr = filterstr + 'category=' + catArr[j]+')OR(';
                    }
                }
                else filterstr = filterstr + 'category=' + _datax[i].id+')OR(';
            }

            filterstr = filterstr.substring(0,filterstr.length-3);
            
            //Get all catans records
            var url0 = baseURI + filterstr + '&fields=' + fields;
            
            var p0 = $http.get(url0);
            return $q.all([p0]).then(function (d){
                
                var _allcatansx = d[0].data.resource;
                var map = _allcatans.map(function(x) {return x.id; });
                _allcatansx.forEach(function(catansobj){
                        if(map.indexOf(catansobj.id) < 0)
                        _allcatans.push(catansobj);
                });

                if ($rootScope.DEBUG_MODE) 
                    console.log("getAllCatansX loaded: ", _allcatansx.length);
                
                return _allcatansx;            
            }, _queryFailed);  
            
        }

        function getAllcatansY(data) {
            
            var _datax = [];  //this is filtered array (ignore those answers for which catans already fetched)
            if (data.length > 0) {
                data.forEach(function (item) {
                    if (_fetchAnswersMem.indexOf(item.id) < 0) {
                        _datax.push(item);
                        _fetchAnswersMem.push(item.id);
                    }
                });
            }
            //_datax = [];
            if (_datax.length == 0) return $q.when(false);
            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'answer=' + _datax[i].id+')OR(';
                //console.log("@catansY -- answer =", _datax[i].id);
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            //Get all catans records
            var url0 = baseURI + filterstr + '&fields=' + fields;
            
            var p0 = $http.get(url0);
            return $q.all([p0]).then(function (d){
                
                var _allcatansy = d[0].data.resource;
                var map = _allcatans.map(function(x) {return x.id; });
                _allcatansy.forEach(function(catansobj){
                        if(map.indexOf(catansobj.id) < 0)
                        _allcatans.push(catansobj);
                });
                if ($rootScope.DEBUG_MODE) 
                    console.log("getAllCatansY loaded: ", _allcatansy.length);
                return _allcatansy;            
            }, _queryFailed);  
            
        }

        function deleteCatan(catan_id) {
            
            //delete records from local copy
            for (var i=0; i<_allcatans.length;i++){
                if (_allcatans[i].id == catan_id){
                    _allcatans.splice(i,1);
                    break;
                } 
            }
            
           var url = baseURI + '?filter=id=' + catan_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                
                //Everytime a CatAns record is deleted, delete associated user votes with it
                for (var i=0; i<result.data.resource.length; i++){
                    votes.deleteVotesbyCatans(result.data.resource[i].id);
                }
                if ($rootScope.DEBUG_MODE) console.log("Deleting catans records was succesful");
                return result.data;
            }
        }
/*
        function getbyCategory(catarr) {

            //Create filter string
            var filtstr = '';
            for (var i=0; i<catarr.length; i++){
                if (i == 0) filtstr = filtstr + '(answer=' + catarr[i] + ')';
                else filtstr = filtstr + ' OR (answer=' + catarr[i] + ')';  
            }

            var url0 = baseURI + '?filter=' + filtstr;

            //console.log('url0 - ', url0); 
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                _allcatans = d[0].data.resource;
                if ($rootScope.DEBUG_MODE) console.log("No. Cat-Ans by Category: ", _allcatans.length);
                return _allcatans;            
            }, _queryFailed);  
       }
       */
        
        function postRec(x) {
           
            //form match record
            var data = {};
            data.answer = x;
            data.category = $rootScope.cCategory.id;
            data.upV = 0;
            data.downV = 0;
            data.user = $rootScope.user.id;
            data.timestmp = Date.now();
             
            var obj = {};
            obj.resource = [];

            //update local copy
            _allcatans.push(data);

            obj.resource.push(data);
            
            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //write id to local copy record
                _allcatans.forEach(function(item){
                    if (item.category == data.category && 
                        item.answer == data.answer)
                        item.id = result.data.resource[0].id; 
                })
                //var datax = data;
                //datax.id = result.data.resource[0].id;
                //_allcatans.push(datax);

                //Create user activity feed
                uaf.post('addedAnswer',['answer','category'],[data.answer, data.category]); //user activity feed
                
                if ($rootScope.DEBUG_MODE) console.log("creating catans record was succesful");
                return result.data;
            }
        }
        
        function postRec2(answer,category) {
           
            //form match record
            var data = {};
            data.answer = answer;
            data.category = category;
            data.upV = 0;
            data.downV = 0;
            data.user = $rootScope.user.id;
            data.timestmp = Date.now();
            //data.isdup = isdup;
             
            var obj = {};
            obj.resource = [];

            //update local copy
            _allcatans.push(data);

            obj.resource.push(data);
            
            var url = baseURI;

            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                //update local copies
                //write id to local copy record
                _allcatans.forEach(function(item){
                    if (item.category == data.category && 
                        item.answer == data.answer)
                        item.id = result.data.resource[0].id; 
                });
                //var datax = data;
                //datax.id = result.data.resource[0].id;
                //_allcatans.push(datax);

                //Create user activity feed
                uaf.post('addedAnswer',['answer','category'],[answer, category]); //user activity feed
                
                //if ($rootScope.DEBUG_MODE) 
                    console.log("@postRec2 creating catans record was succesful");
                return result.data;
            }
        }
        
         function deleteAnswer(answer_id) {
            
            //delete records from local copy
            for (var i=0; i<_allcatans.length;i++){
                if (_allcatans[i].answer == answer_id){
                    _allcatans.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=answer=' + answer_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                
                //Everytime a CatAns record is deleted, delete associated user votes with it
                for (var i=0; i<result.data.resource.length; i++){
                    votes.deleteVotesbyCatans(result.data.resource[i].id);
                }
                if ($rootScope.DEBUG_MODE) console.log("Deleting catans records was succesful");
                return result.data;
            }
        }
        
        function deleteRec(answer_id, category_id) {
            
            //delete records from local copy
            for (var i=0; i<_allcatans.length;i++){
                if (_allcatans[i].answer == answer_id && _allcatans[i].category == category_id){
                    _allcatans.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=(answer=' + answer_id+') AND (category='+category_id+')'; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                
                //Everytime a CatAns record is deleted, delete associated user votes with it
                for (var i=0; i<result.data.resource.length; i++){
                    votes.deleteVotesbyCatans(result.data.resource[i].id);
                }
                
                if ($rootScope.DEBUG_MODE) console.log("Deleting catans records by answer and category was succesful");
                return result.data;
            }
        }
        
        function deletebyCategory(category_id) {
            
            //delete records from local copy
            for (var i=0; i<_allcatans.length;i++){
                if (_allcatans[i].category == category_id){
                    _allcatans.splice(i,1);
                } 
            }
            
           var url = baseURI + '?filter=category=' + category_id; 
            
            return $http.delete(url).then(querySucceeded, _queryFailed);
            
            function querySucceeded(result) {
                
                //Everytime a CatAns record is deleted, delete associated user votes with it
                for (var i=0; i<result.data.resource.length; i++){
                    votes.deleteVotesbyCatans(result.data.resource[i].id);
                }
                if ($rootScope.DEBUG_MODE) console.log("Deleting catans records by category was succesful");
                return result.data;
            }
        }
        
         function updateRec(rec_id, field, val) {
             
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = rec_id;
            
            for (var i=0; i<field.length; i++){
                data[field[i]] = val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            //var idx = $rootScope.B.indexOf(+rec_id);
            var idx = _allcatans.map(function(x) {return x.id; }).indexOf(rec_id);            
            for (var i=0; i<field.length; i++){
                _allcatans[idx][field[i]] = val[i];
            }                        
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("updating catans record succesful");
                return result.data;
            }
        }

        function _load(data){
            _allcatans.length = 0;
            data.forEach(function(x){
                _allcatans.push(x);
            });
        }
     
        function _areAllcatansLoaded() {

            return _allcatans.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('answer', answer);

    answer.$inject = ['$http', '$q', '$rootScope','catans','vrows','uaf','staticpages'];

    function answer($http, $q, $rootScope,catans, vrows, uaf, staticpages) {

        //Members
        var _answers = [];
        var _fetchAnswersMem = [];
        $rootScope.answers = _answers;

        var _selectedAnswer;
        var baseURI = '/api/v2/mysql/_table/answers';

        var service = {
            getAnswers: getAnswers,
            getAnswersX: getAnswersX,
            getAnswersFromCatans: getAnswersFromCatans,
            getAnswer: getAnswer,
            addAnswer: addAnswer,
            addAnswer2: addAnswer2,
            updateAnswer: updateAnswer,
            deleteAnswer: deleteAnswer,
            flagAnswer: flagAnswer,
            getAnswerbyCustomer:  getAnswerbyCustomer           
        };

        return service;
        
        /*
        function getAnswers(forceRefresh) {
            
            //Get all answer records
            var url0 = baseURI + '?offset=' + 0 * 1000;
            var url1 = baseURI + '?offset=' + 1 * 1000;
            var url2 = baseURI + '?offset=' + 2 * 1000;
            var url3 = baseURI + '?offset=' + 3 * 1000;
            var url4 = baseURI + '?offset=' + 4 * 1000;
            var url5 = baseURI + '?offset=' + 5 * 1000;
            var url6 = baseURI + '?offset=' + 6 * 1000;
            var url7 = baseURI + '?offset=' + 7 * 1000;


            var p0 = $http.get(url0);
            var p1 = $http.get(url1);
            var p2 = $http.get(url2);
            var p3 = $http.get(url3);
            var p4 = $http.get(url4);
            var p5 = $http.get(url5);
            var p6 = $http.get(url6);
            var p7 = $http.get(url7);

            return $q.all([p0, p1, p2, p3, p4, p5, p6, p7]).then(function (d){
                var data = d[0].data.resource.concat(d[1].data.resource, d[2].data.resource, d[3].data.resource, 
                d[4].data.resource, d[5].data.resource, d[6].data.resource, d[7].data.resource);
                _load (data);
                if ($rootScope.DEBUG_MODE) console.log("No. Answers: ", _answers.length);
                return _answers;            
            }, _queryFailed);  

        }*/

        function getAnswersX(scope) {

            //for performance request only following fields:
            var fields = '';
            fields += 'id,name,imageurl,type';
            
            //Get all answer records
            var url0 = baseURI + '?offset=' + 0 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url1 = baseURI + '?offset=' + 1 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url2 = baseURI + '?offset=' + 2 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url3 = baseURI + '?offset=' + 3 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url4 = baseURI + '?offset=' + 4 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url5 = baseURI + '?offset=' + 5 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url6 = baseURI + '?offset=' + 6 * 1000 + '&filter=scope='+scope + '&fields=' + fields;
            var url7 = baseURI + '?offset=' + 7 * 1000 + '&filter=scope='+scope + '&fields=' + fields;

            var p0 = $http.get(url0);
            var p1 = $http.get(url1);
            var p2 = $http.get(url2);
            var p3 = $http.get(url3);
            var p4 = $http.get(url4);
            var p5 = $http.get(url5);
            var p6 = $http.get(url6);
            var p7 = $http.get(url7);

            return $q.all([p0, p1, p2, p3, p4, p5, p6, p7]).then(function (d){
                var data = d[0].data.resource.concat(d[1].data.resource, d[2].data.resource, d[3].data.resource, 
                d[4].data.resource, d[5].data.resource, d[6].data.resource, d[7].data.resource);
                
                if (_answers.length == 0) _load (data); //clear answers array and put new data
                else _merge(data, _answers); //merge existing answers with new data
                
                if ($rootScope.DEBUG_MODE) console.log("No. Answers: ", _answers.length);
                return _answers;            
            }, _queryFailed);  

        }

        function getAnswersFromCatans(catans) {

            var _datax = [];  //this is filtered array (ignore those ranks for which catans already fetched)
            catans.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.answer)<0){
                     _datax.push(item);
                     _fetchAnswersMem.push(item.answer);
                }
            });
            //_datax = [];
            if (_datax.length == 0) return $q.when(false);
            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'id=' + _datax[i].answer+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            //Get all answer records
            var url0 = baseURI + filterstr;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                var _answersx = d[0].data.resource;

                //make sure reference value is array
                if (_answersx.constructor === Array) _merge(_answers,_answersx);
                else _merge(_answers,[_answersx]);
                
                if ($rootScope.DEBUG_MODE) console.log("answer.getAnswersFromCatans ", _answersx); 
                return _answersx;            
            }, _queryFailed);  
        }

        function getAnswers(answers) {
            var _datax = [];  //this is filtered array (ignore those ranks for which catans already fetched)
            answers.forEach(function(item){
                if (_fetchAnswersMem.indexOf(item.id)<0){
                     _datax.push(item);
                     _fetchAnswersMem.push(item.id);
                }
            });
            //_datax = [];
            if (_datax.length == 0) return $q.when(false);
            var filterstr = '?filter=(';
            for (var i=0; i< _datax.length; i++){
                filterstr = filterstr + 'id=' + _datax[i].id+')OR(';
            }
            filterstr = filterstr.substring(0,filterstr.length-3);
            //Get all answer records
            var url0 = baseURI + filterstr;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                
                var _answersx = d[0].data.resource;

                //make sure reference value is array
                if (_answersx.constructor === Array) _merge(_answers,_answersx);
                else _merge(_answers,[_answersx]);
                
                if ($rootScope.DEBUG_MODE) console.log("answer.getAnswers ", _answersx); 
                return _answersx;            
            }, _queryFailed);  
        }

        function getAnswer(id) {

            var url0 = baseURI + '/?filter=id=' + id;

            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var answerx = d[0].data.resource[0];

                //var idx = _answers.map(function(x) {return x.id; }).indexOf(answerx.id);
                //if (idx < 0) _answers.push(answerx);
                //_append([answerx]);
                _merge(_answers,[answerx]);
                
                if ($rootScope.DEBUG_MODE) console.log("single answer loaded: ", _answerx);
                return answerx;
            });
            
        }
        
        function getAnswerbyCustomer(customer_id) {

            var url = baseURI + '/?filter=customer='+ customer_id;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return result.data;
            }
        }

        function addAnswer(answer, ranks) {

            answer.scope = $rootScope.SCOPE;
            
            var url = baseURI;
            var resource = [];

            //the isprivate flag is to distinghish answers that are for custom ranks
            if ($rootScope.cCategory.owner != undefined && $rootScope.cCategory.owner != 0 ) answer.isprivate = true;
            else answer.isprivate = false;
            
            resource.push(answer);
            
            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var answerx = answer;
                answerx.id = result.data.resource[0].id; 
                
                //update slug tag and featured image
                var slug = answerx.name.toLowerCase(); 
                slug = slug.replace(/ /g,'-');
                slug = slug.replace('/','at');
                slug = slug + '-' + result.data.resource[0].id;
                answerx.slug = slug;
                
                _answers.push(answerx);

                updateAnswer(result.data.resource[0].id,['slug'],[slug]);
                //staticpages.createPageAnswer(answerx);
                
                //Update current establishment and person names for typeahead
                if (answerx.type == 'Establishment') {
                    $rootScope.estNames.push(answerx.name);
                    $rootScope.estAnswers.push(answerx);
                }
                if (answerx.type == 'Person') {
                    $rootScope.pplNames.push(answerx.name);
                    $rootScope.pplAnswers.push(answerx);
                }
                if (answerx.type == 'Place') {
                    $rootScope.plaNames.push(answerx.name);
                    $rootScope.plaAnswers.push(answerx);
                }
                                
                for (var i=0; i<ranks.length; i++){
                    catans.postRec2(answerx.id, ranks[i].id);
                }
                //vrows.postVrows4Answer(answerx);
                
                //uaf.post('addedAnswer',['answer','category'],[answerx.id, $rootScope.cCategory.id]); //user activity feed
                
                if ($rootScope.DEBUG_MODE) console.log("created catans for a new answer");
                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }

        }
        
        function addAnswer2(answer, category) {

            answer.scope = $rootScope.SCOPE;

            var url = baseURI;
            var resource = [];

            answer.user = $rootScope.user.id;

            //the isprivate flag is to distinghish answers that are for custom ranks
            if (category.owner != undefined && category.owner != 0 ) answer.isprivate = true;
            else answer.isprivate = false;

            resource.push(answer);

            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var answerx = answer;
                answerx.id = result.data.resource[0].id; 
                
                //update slug tag and featured image
                var slug = answerx.name.toLowerCase(); 
                slug = slug.replace(/ /g,'-');
                slug = slug.replace('/','at');
                slug = slug + '-' + result.data.resource[0].id;
                answerx.slug = slug;

                _answers.push(answerx);
                updateAnswer(result.data.resource[0].id,['slug'],[slug]);

                //staticpages.createPageAnswer(answerx);
                
                //Update current establishment and person names for typeahead
                if (answerx.type == 'Establishment') {
                    $rootScope.estNames.push(answerx.name);
                    $rootScope.estAnswers.push(answerx);
                }
                if (answerx.type == 'Person') {
                    $rootScope.pplNames.push(answerx.name);
                    $rootScope.pplAnswers.push(answerx);
                }
                if (answerx.type == 'Place') {
                    $rootScope.plaNames.push(answerx.name);
                    $rootScope.plaAnswers.push(answerx);
                }
                
                //uaf.post('addedAnswer',['answer','category'],[answerx.id, category[0]]); //user activity feed
                                
                for (var n=0; n<category.length; n++){
                    if (n == 0) catans.postRec2(answerx.id, category[n]);
                    else catans.postRec2(answerx.id, category[n]);    
                }
                
                //vrows.postVrows4Answer(answerx);
                
                if ($rootScope.DEBUG_MODE) console.log('created '+ category.length + 'catans records for the new answer');
                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }

        }

        function updateAnswer(answer_id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = answer_id;
            
            for (var i=0; i<field.length; i++){
               data[field[i]] = val[i];
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            //update local copy
            var idx = _answers.map(function(x) {return x.id; }).indexOf(answer_id);  
            for (var i=0; i<field.length; i++){
                _answers[idx][field[i]] = val[i];
            }
            
            //determine if necessary to update static file
            var updateStaticFile = false;
            for (var i = 0; i < field.length; i++) {
                if (field[i] == 'name' || (field[i] == 'slug' && field.length > 1) || 
                    field[i] == 'imageurl' || field[i] == 'addinfo'){
                        updateStaticFile = true;
                        break;
                    }               
            }
            //if (updateStaticFile) staticpages.createPageAnswer(_answers[idx]);
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {
                
                if (field[0] == 'owner') uaf.post('binded',['answer'],[answer_id]); //user activity feed 

                if ($rootScope.DEBUG_MODE) console.log("updating answer succesful");
                return result.data;
            }
        }
        
        function flagAnswer(answer_id, flag) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = answer_id;
            data.flag = flag

            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;          
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log(" answer flagged succesful");
                return result.data;
            }
        }
        

        function deleteAnswer(answer_id) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = answer_id;

            obj.resource.push(data);

            var url = baseURI + '/' + answer_id;
            
            //update (delete answer) local copy of answers
            var i = _answers.map(function(x) {return x.id; }).indexOf(answer_id);
            if (i > -1) _answers.splice(i,1);
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                //delete static page for this answer
                var filename = 'answer' + answer_id + '.html';
                var data = {};
                data.filename = filename;
                staticpages.removeFile(data);

                if ($rootScope.DEBUG_MODE) console.log("Deleting answer was succesful");
                return result.data;
            }
        }

        function _load(data){
            //if (data.length < _answers.length) {
                _answers.length = 0;
                _fetchAnswersMem.length = 0;
                data.forEach(function (x) {
                    _answers.push(x);
                    //_fetchAnswersMem.push(x.id);
                });
        }
/*
        function _append(data){
           data.forEach(function(item){
                var idx = _answers.map(function(x) {return x.id; }).indexOf(item.id);
                if (idx < 0) _answers.push(item);
            }); 
        }*/

        function _merge(lg,sm){  //lg is large set of data, sm is small set of data, merge small into large is more efficient
            sm.forEach(function(item){
                var idx = lg.map(function(x) {return x.id; }).indexOf(item.id);
                if (idx < 0) lg.push(item);
                else lg[idx] = item;
                _fetchAnswersMem.push(item.id);
            });
        }

        function _areAnswersLoaded() {

            return _answers.length > 0;
        }

        function _isSelectedAnswerLoaded(id) {

            return _selectedAnswer && _selectedAnswer.id == id;
        }

        function _queryFailed(error) {

            throw error;
        }

    }
})();
angular.module('app').directive('catBar', ['color', '$window', '$rootScope','$state', 
function (color, $window, $rootScope, $state) {
    'use strict';

    return {
        templateUrl: 'app/answer/Partials/catbar.html',
        transclude: true,
        scope: {
            text: '@',
            leftFn: '&leftFn',
            rightFn: '&rightFn',
            closeRank: '&closeRank',
        },
        link: function (scope) {
            
            scope.bc = "#006dcc";
            scope.bc2 = color.shadeColor(scope.bc,-0.3);
            scope.fc = "white";
            if ($window.innerWidth < 769){
                scope.ht = 50;
                if (scope.text.length > 50) scope.ht = 90;            
            }
            else if ($window.innerWidth < 870){
                scope.ht = 50;
                if (scope.text.length > 50) scope.ht = 75;
            }
            else scope.ht = 50;

            scope.goPrev = function(){
                scope.leftFn();
            }

            scope.goNext = function(){
                scope.rightFn();
            }

            scope.selRank = function(){
                scope.closeRank();
            }           
        },
    }
}
]);
angular.module('app').directive('blobUpload', ['$rootScope', '$state', function ($rootScope, $state) {
    //angular.module('app').directive('contentBlock', ['$rootScope', '$state', function ($rootScope, $state) {
    'use strict';

    return {
        
        templateUrl: 'app/answer/Partials/blobupload.html',
        transclude: true,
        scope: {
            //   modeNum: '=mode',
            //   isDynamic: '=dynamic',
            //   isRoW: '=rankofweek'
        },
         controller: ['$scope', 'Upload', '$timeout', '$http', '$rootScope', 'useruploadedimages','mailing',
          function blobUploadCtrl($scope, Upload, $timeout, $http, $rootScope, useruploadedimages, mailing) {           
            //$scope.uploadfile = function($scope, Upload, $timeout, $http) {
            // jshint validthis:true 
            displayError("");
            //$scope.errFile = {};
            //$scope.errFile.name = '';
                
            $scope.uploadFiles = function (file, errFiles) {
                $scope.f = file;
                $scope.errFile = errFiles && errFiles[0];

                if (file == null) {
                    console.log("file is null");
                    if ($scope.errFile != undefined) {
                        var errorMgs = 'Uploading failed for ' + $scope.errFile.name + ', ' +
                            $scope.errFile.$error + ' exceeds ' + $scope.errFile.$errorParam;
                        //console.log("errormsg", errorMgs);
                        displayError(errorMgs);
                    }
                    else displayError("");
                }
               
                else {
                    
                    var storageurl = "https://rankx.blob.core.windows.net/sandiego/"+$rootScope.canswer.id+"/" + file.name + "?sv=2015-04-05&ss=bfqt&srt=sco&sp=rwdlacup&se=2018-08-30T01:15:12Z&st=2016-08-29T17:15:12Z&spr=https,http&sig=PpyWE0X%2Fpz9SuRje5GtHh44WaWIii0GBU9PbIcDIka8%3D";
                    var fileReader = new FileReader();
                    
                    fileReader.readAsArrayBuffer(file);
                    fileReader.onload = function (e) {
                        Upload.http({
                            //file.upload = Upload.upload({
                            url: storageurl,
                            method: "PUT",
                            headers: {
                                'x-ms-blob-type': 'BlockBlob',
                                'x-ms-blob-content-type': file.type
                             },
                            data: e.target.result 
                            //file: file
                        }).then(function (response) {
                            if (response.status > 0)
                                $scope.errorMsg = response.status + ': ' + response.data;
                                var imageurl = 'https://rankx.blob.core.windows.net/sandiego/'+$rootScope.canswer.id+'/' + file.name;
                                console.log('emitted fileUploaded!!');
                                postUserUploadedRecord(imageurl);
                                $rootScope.$emit('fileUploaded', imageurl);
                        }, null, function (evt) {
                            file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                        });
                    }
                }
            }
        
                function displayError(s) {
                    $scope.errorMsg = s;
                }

                function postUserUploadedRecord(x){
                    var obj = {};
                    console.log("$rootScope.user - ", $rootScope.user);
                    obj.user = $rootScope.user.id;
                    obj.username = $rootScope.user.name;
                    obj.imageurl = x;
                    obj.answer = $rootScope.canswer.id;
                    obj.answername = $rootScope.canswer.name;
                    useruploadedimages.postRecord(obj);
                    //Mail to moderation notification of new image
                    mailing.newImageUploaded(obj).then(function(data){
                     console.log("Send mail request for image notification");
                    })
                }

            }] 
    }
}
]);
angular.module('app').directive('answerHeader', ['color', '$window', '$rootScope','$state','dialog', 
function (color, $window, $rootScope, $state, dialog) {
    'use strict';

    return {
        templateUrl: 'app/answer/Partials/answerheader.html',
        transclude: true,
        scope: {
            ans: '@',
            idx: '@',
        },
        link: function (scope) {
            var vm = scope;
            scope.isMobile = false;
            // device detection
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
                || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4)))
                scope.isMobile = true;
            
            scope.answer = JSON.parse(scope.ans);
            
            //Type Flags
            if (scope.answer.type == 'Short-Phrase') scope.isShortPhrase = true;
            else scope.isShortPhrase = false;
            if (scope.answer.type == 'Event') scope.isEvent = true;
            else scope.isEvent = false;

            //User is Owner Flag
            if ($rootScope.isLoggedIn) {
                if ($rootScope.user.id == scope.answer.owner) {
                    scope.userIsOwner = true;
                }
                else scope.userIsOwner = false;
            }
            else scope.userIsOwner = false;

            scope.modeIsImage = true; //Image Mode
            scope.imgmode = 'Show Map';
            scope.imgmodeicon = 'fa fa-globe';
            scope.hasMap = scope.answer.location != undefined && scope.answer.location != ''; 

            //Effective width vs $window.innerWidth
            var iWa = [0, 401, 474, 769, 971, 996, 1173, 1201, 1635, 1960, 3500];
            var eWa = [0.86, 0.86, 0.88, 0.96, 0.75, 0.96, 0.68, 0.96, 0.64, 0.6, 0.6];
            var iW = $window.innerWidth;
            var eW = 0; //effective width
            for (var n = 0; n < iWa.length - 1; n++) {
                if (iW > iWa[n] && iW < iWa[n + 1]) {
                    //equation of line y=mx+b (m is slope, b is y intersect)
                    var slp = (eWa[n + 1] - eWa[n]) / (iWa[n + 1] - iWa[n]);
                    var bpt = eWa[n] - iWa[n] * slp;
                    eW = iW * slp + bpt;
                }
            }
            
            //Adjust picture size for very small displays
            if ($window.innerWidth < 763) {
                scope.sp1 = 'width:5%;padding:0px;';
                scope.sp2 = 'width:25%;max-height:50px';
                scope.sp3 = 'width:20%';
                scope.sm = true; scope.nsm = false;
                scope.width = Math.round(iW * eW);
                scope.mxheight = Math.round((scope.width / 1.25));
                //clamp max height
                if (scope.mxheight > 300) scope.mxheight = 300;
                if ($rootScope.cCategory) {
                    var colors = color.defaultRankColor($rootScope.cCategory);
                    scope.bc = colors[0];
                    scope.fc = colors[1];
                }
                else {
                    scope.bc = 'gray';
                    scope.fc = 'black';
                }
                scope.bc2 = color.shadeColor(scope.bc, 0.4);
            }
            else {
                scope.mxheight = '300';
                scope.sp1 = 'width:15%';
                scope.sp2 = 'width:22.5%;max-height:50px;';
                scope.sp3 = 'width:20%';
                scope.sm = false; scope.nsm = true;
                scope.width = Math.round(iW * eW);
                scope.width2 = Math.round((iW * eW) / 2);
                scope.width3 = Math.round((iW * eW) / 3);
                if ($rootScope.cCategory) {
                    var colors = color.defaultRankColor($rootScope.cCategory);
                    scope.bc = colors[0];
                    scope.fc = colors[1];
                }
                else {
                    scope.bc = 'gray';
                    scope.fc = 'black';
                }
                scope.bc2 = '#d8d8d8';
            }

            // Answer additional info text slice
           if (scope.answer.addinfo != undefined) {
                scope.answer.addinfo_teaser = scope.answer.addinfo.slice(0, 300);
                scope.answer.addinfo_complete = scope.answer.addinfo.slice(300);
            }

            scope.moretext = ' more ';
            scope.completeinfo = false;

           //Get distance if not available
           if ($rootScope.coordsRdy && scope.answer.location && scope.answer.dist == undefined) {
               //Calculate distances to user
               var p = 0.017453292519943295;    // Math.PI / 180
               var c = Math.cos;
               var a = 0;
               var lat_o = $rootScope.currentUserLatitude;
               var lng_o = $rootScope.currentUserLongitude;
               var lat = 0;
               var lng = 0;
               var dist_mi = 0;

               lat = scope.answer.lat;
               lng = scope.answer.lng;

               a = 0.5 - c((lat - lat_o) * p) / 2 + c(lat_o * p) * c(lat * p) * (1 - c((lng - lng_o) * p)) / 2;

               dist_mi = (12742 * Math.asin(Math.sqrt(a))) / 1.609; // 2 * R; R = 6371 km

               if (dist_mi < 1) scope.answer.dist = dist_mi.toPrecision(2);
               else scope.answer.dist = dist_mi.toPrecision(3);
           }

            getHours();

        //Directive Methods
        scope.toggleimgmode = function() {
            if (scope.modeIsImage) setMap();
            else setImage();
        }

        function setImage() {
            scope.imgmode = 'Show Map';
            scope.imgmodeicon = 'fa fa-globe';
            scope.modeIsImage = true;
            $rootScope.modeIsImage = true;
        }

        function setMap() {
            scope.imgmode = 'Show Image';
            scope.imgmodeicon = 'fa fa-picture-o';
            scope.modeIsImage = false;
            $rootScope.modeIsImage = false;
        }

        function getHours() {
            scope.hrset = false;
            if (scope.answer.strhours != undefined && scope.answer.strhours != null) {
                scope.hrset = true;
                var cdate = new Date();
                var dayOfWeek = cdate.getDay();
                var idx = dayOfWeek - 1;
                if (idx < 0) idx = 6;

                var openhours = JSON.parse(scope.answer.strhours);
                if (openhours[idx].opn == 'CLOSED') {
                    scope.hourstr = 'Closed today';
                }
                else {
                    scope.hourstr = 'Open today from: ' + openhours[idx].st + ' to ' + openhours[idx].ct;
                }
            }
        }

         scope.editAnswer = function() {
            if ($rootScope.isLoggedIn) {
                if (scope.answer.type == 'Event') {
                    $rootScope.eventmode = 'edit';
                    $state.go("addEvent", { index: scope.answer.id });
                }
                else $state.go("editAnswer", { index: scope.answer.id });
            }
            else dialog.loginFacebook(); 
            //dialog.getDialog('notLoggedIn');           
        }
 
          scope.showcomplete = function() {
            if (scope.moretext == ' more ') {
                scope.moretext = ' less ';
                scope.completeinfo = true;
                return;
            }
            if (scope.moretext == ' less ') {
                scope.moretext = ' more ';
                scope.completeinfo = false;
                return;
            }
        }

        scope.gotoLocationAnswer = function(){
            console.log("eventlocid - ", scope.answer.eventlocid);
            $state.go('answerDetail',{index: scope.answer.eventlocid})
        }


        },
    }
}
]);
(function () {
    'use strict';

    angular
        .module('app')
        .controller('answerDetail', answerDetail);

    answerDetail.$inject = ['flag', '$stateParams', '$state', 'answer', 'dialog', '$rootScope','$window', 'useractivity','htmlops',
        'votes', 'matchrec', 'edit', 'editvote', 'catans', 'datetime','commentops', 'userdata','useraccnt','dataloader','$timeout',
        '$location', 'vrows', 'vrowvotes','imagelist','instagram', '$scope', 'table', 'SERVER_URL','$http', 'common',
        '$cookies', '$q', 'fbusers', 'InstagramService', 'mailing', 'Socialshare']; //AM:added user service

    function answerDetail(flag, $stateParams, $state, answer, dialog, $rootScope, $window, useractivity,htmlops,
        votes, matchrec, edit, editvote, catans, datetime, commentops, userdata,useraccnt, dataloader, $timeout,
        $location, vrows, vrowvotes, imagelist, instagram, $scope, table, SERVER_URL, $http, common,
        $cookies, $q, fbusers, InstagramService, mailing, Socialshare) { //AM:added user service
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'answerDetail';
        //if ($location.absUrl().indexOf('code=')>-1)$window.location.search = '';

        var voteRecordExists = false;
        var dV = 0;
        var upVi = 0;  //upVotes initial value
        var downVi = 0; //downVotes initial value
        var answers = [];
        var recordsUpdated = false;
        var vrowsByUserCounter = 0;
        vm.numEdits = 0;
        var numImages = 0;
        var numImagesPage = 0;
        
        // Members
        vm.relativetable = [];
        vm.catans = [];
        vm.sm = $rootScope.sm;
        vm.votemode = false;
        vm.dispRanks = 3;
               
        // Methods
        vm.UpVote = UpVote;
        vm.DownVote = DownVote;
        vm.refresh = refresh;
        vm.goBack = goBack;
        vm.goPrev = goPrev;
        vm.goNext = goNext;
        vm.deleteAnswer = deleteAnswer;
        vm.flagAnswer = flagAnswer;
        vm.deleteButton = false;
        vm.showUrl = showUrl;
        vm.closeRank = closeRank;
        vm.closeAnswerDetail = closeAnswerDetail;
        vm.rankSel = rankSel;
        vm.bizRegDialog = bizRegDialog;
        vm.openSpecials = openSpecials;
        vm.editVRows = editVRows;
        vm.getImages = getImages;
        vm.showsimage = showsimage;
        vm.gotoRank = gotoRank;
        vm.vrowVoteUp = vrowVoteUp;
        vm.vrowVoteDown = vrowVoteDown;
        vm.loadComments = loadComments;
        vm.postComment = postComment;
        vm.selectPhoto = selectPhoto;
        vm.cmFlag = cmFlag;
        vm.deleteThisCatans = deleteThisCatans;
        vm.addRankforAnswer = addRankforAnswer;
        vm.votemodeON = votemodeON;
        vm.votemodeOFF = votemodeOFF;
        vm.user = $rootScope.user;
        vm.endorseDialog = endorseDialog;
        vm.selectInstagramImages = selectInstagramImages;
        vm.showRanks = showRanks;
        vm.hideCustomRanks = hideCustomRanks;
        vm.hideGetPremium = hideGetPremium;
        vm.gotoMyBusiness = gotoMyBusiness;
        vm.share = share;
        vm.addvrow = addvrow;
        vm.moreImagesRev = moreImagesRev;
        vm.moreImagesFwd = moreImagesFwd;
        vm.showSpecial = showSpecial;
        vm.showLocations = showLocations;
        vm.navigateTowards = navigateTowards;
        vm.gotoCustomRank = gotoCustomRank;
        vm.backToResults = backToResults;
      
        //Admin Function adding catans on spot
        vm.addCatans = addCatans;
        vm.addctsactive = false;
        vm.addcts = addcts;

       //Comments related variables
        var cObj = {};
        cObj.commLoaded = false;
        cObj.initials = '';
        cObj.bc = '';
        cObj.fc = '';
        cObj.comments = [];
        cObj.newComment = '';
        vm.cm = cObj;
        vm.commentAllowed = true;
        vm.searchActive = $rootScope.searchActive;
        var answerFound = false;
        vm.dataReady = false;
        
        vm.isMobile = false; 
        // device detection
        if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) 
            vm.isMobile = true;
        
        //TODO: Would like to add this abstract template, but dont know how                           
        var updateRecordsListener = $rootScope.$on('$stateChangeStart',
            function (ev, to, toParams, from, fromParams) {
                if (from.name == 'answerDetail' && to.name != 'answerDetail') {
                    if (!recordsUpdated && $rootScope.isLoggedIn && answerFound) updateRecords();
                }
            });

        var refreshImagesListener = $rootScope.$on('refreshImages', function () {
            if ($state.current.name == 'answerDetail') getImages();
        });
        var fileUploadedListener = $rootScope.$on('fileUploaded', function () {
            if ($state.current.name == 'answerDetail') getImages();
        });

        var answerDataLoadedListener = $rootScope.$on('answerDataLoaded', function () {
            if (vm.dataReady == false) checkAnswerExists();
        });

        $scope.$on('$destroy',refreshImagesListener);
        $scope.$on('$destroy',fileUploadedListener);
        $scope.$on('$destroy',answerDataLoadedListener);
        $scope.$on('$destroy',updateRecordsListener);

        //Flags to hide advertisement blocks
        vm.hideCustomRanksMsg = $rootScope.hideCustomRankMsg == undefined ? false:$rootScope.hideCustomRankMsg; 
        vm.hideGetPremiumMsg = $rootScope.hideGetPremiumMsg == undefined ? false:$rootScope.hideGetPremiumMsg;

        window.prerenderReady = false;
        checkAnswerExists();

        function checkAnswerExists(){
            $rootScope.canswer = null;
            var ansid = common.getIndexFromSlug($stateParams.index);
            
            var idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf(Number(ansid));
            if (idx > -1) $rootScope.canswer = $rootScope.answers[idx];
            
            //if rank exists continue loading controller, else get from database
            if ($rootScope.canswer != null) activate();
            else dataloader.getAnswer($stateParams.index);
        }

        function activate() {

            vm.dataReady = true;
            vm.answer = $rootScope.canswer;

            answers = $rootScope.canswers;
            vm.fields = $rootScope.fields;
            vm.isAdmin = $rootScope.isAdmin || $rootScope.dataAdmin;
            if (vm.isAdmin) vm.bizcat = useraccnt.getBizCat(vm.answer.id);

            $rootScope.isLoggedIn = $rootScope.isLoggedIn ? $rootScope.isLoggedIn : false;
            vm.isLoggedIn = $rootScope.isLoggedIn;

            $rootScope.cansvrows = undefined;

            // ----- SEO tags ----
            $scope.$parent.$parent.$parent.seo = { 
                pageTitle : vm.answer.name, 
                metaDescription: vm.answer.addinfo 
            };

            if (vm.answer.isprivate == undefined) vm.answer.isprivate = false;            

            vm.type = vm.answer.type;
            vm.i = -1;
            if ($rootScope.DISPLAY_XSMALL || $rootScope.DISPLAY_SMALL) numImagesPage = 4;
            if ($rootScope.DISPLAY_MEDIUM) numImagesPage = 6;
            if ($rootScope.DISPLAY_LARGE) numImagesPage = 12;
            getImages();
            //vm.isShortPhrase = vm.type == 'Short-Phrase';
            
            //if there is no category, look for it in cookies
            /*if ($rootScope.cCategory == undefined) {
                var ccategoryid = $cookies.get('ccategory');
                if ($rootScope.DEBUG_MODE) console.log("@answerDetail - ccategory ", ccategoryid);
                var idx = $rootScope.content.map(function (x) { return x.id; }).indexOf(ccategoryid);
                if (idx > -1) $rootScope.cCategory = $rootScope.content[idx];
            }*/

            if ($rootScope.inFavMode) vm.ranking = $rootScope.myfavs.title;
            else if ($rootScope.cCategory) vm.ranking = $rootScope.cCategory.title;
            else vm.ranking = '';

            //if answers not loaded (state went straight to asnwerDetail, answers is just current answer)
            if (answers == undefined) answers = [vm.answer];

            vm.idx = answers.map(function (x) { return x.id; }).indexOf(vm.answer.id) + 1;
            if ($rootScope.cCategory == undefined) vm.idx = 0;

            //Temp for Instagram Demo
            if (vm.answer.id == 2225) vm.igdemo = true;
            else vm.igdemo = false;

            getFields();

            //Set Image Mode -- Map or Photo
            vm.modeIsImage = $rootScope.modeIsImage == undefined ? true : $rootScope.modeIsImage;
            if (vm.answer.location == undefined) vm.modeIsImage = true;

            if ($rootScope.previousState != 'answerDetail') $window.scrollTo(0, 0);

            //vm.showImageGallery = false;
            //$rootScope.$emit('showLogo');

            getHeader();
            //        getCatAnsId(vm.answer.id);
            getEdits(vm.answer.id);
            
            vm.access = false; //use this variable to access editspecials
            if ($rootScope.isLoggedIn) {
                if ($rootScope.user.id == vm.answer.owner) {
                    vm.userIsOwner = true;
                    //dataloader.getDemoData();
                    if (vm.answer.isactive) vm.access = true;
                }
                else vm.userIsOwner = false;
                if ($rootScope.isAdmin) vm.userIsOwner = true;
            }
            else vm.userIsOwner = false;

            $rootScope.userIsOwner = vm.userIsOwner;
            deleteButtonAccess();

            //if (vm.type == 'Establishment') getHours();
            if (vm.type != 'Establishment' && vm.type != 'Event' && false) makeRelativeTable(vm.answer.id);
            if (vm.type == 'Establishment') getSpecials(vm.answer.id);
            //if (vm.type == 'Establishment' || vm.type == 'PersonCust') 
            getVRows(vm.answer.id);
            getAnswerRanks();
            dataloader.pulldata('ranks',vm.answerRanks);                        

            //if user votes are available - do my thing at getAnswerVotes
            //else fetch user votes
            //if ($rootScope.cvotes) {
            //    console.log('exec answer votes, $rootScope.isLoggedIn - ', $rootScope.isLoggedIn);
                
            //}
            //else {
            //    $rootScope.cvotes = [];
            //    $rootScope.ceditvotes = [];
            //}

            //Check if answer is event
            if (vm.type == 'Event') {
                var eventObj = JSON.parse(vm.answer.eventstr);
                //Object.assign(vm.answer, eventObj);
                mergeObject(vm.answer, eventObj);
                vm.ehtml = htmlops.eventHtml(vm.answer);
                vm.estyle = 'background-color:' + vm.answer.bc + ';color:' + vm.answer.fc + ';' + 'white-space:pre;';
            }

            //custom ranks 
            if (vm.answer.hasranks) {
                var n = 0;
                vm.myranks = JSON.parse(vm.answer.ranks);
                if (vm.myranks != undefined && vm.myranks.length > 0){
                    for (var i=0; i<vm.myranks.length; i++){
                        n = $rootScope.customranks.map(function(x) {return x.id; }).indexOf(vm.myranks[i].id);
                        vm.myranks[i].title = $rootScope.customranks[n].title.replace(' @ '+vm.answer.name,'');
                        vm.myranks[i].image = $rootScope.customranks[n].image1url;
                        if (vm.myranks[i].image == undefined || vm.myranks[i].image == '')
                        vm.myranks[i].image = $rootScope.EMPTY_IMAGE;
                    }
                }
           }
            //Demo custom ranks
            else if (vm.userIsOwner){
                vm.myranks = [];
                //Demo custom rank 1
                var demorank = {};
                demorank.id = 11091;
                demorank.bc = '#027fa8';
                demorank.fc = 'white';
                vm.myranks.push(demorank);
                //Demo custom rank 2
                demorank={};
                demorank.id = 11092;
                demorank.bc = '#027fa8';
                demorank.fc = 'white';
                vm.myranks.push(demorank);
                //Demo custom rank 3
                demorank={};
                demorank.id = 11093;
                demorank.bc = '#027fa8';
                demorank.fc = 'white';
                vm.myranks.push(demorank);

                for (var i=0; i<vm.myranks.length; i++){
                    n = $rootScope.customranks.map(function(x) {return x.id; }).indexOf(vm.myranks[i].id);
                    if (n > -1){
                        vm.myranks[i].title = $rootScope.customranks[n].title.replace(' @ Demo','');
                        vm.myranks[i].image = $rootScope.customranks[n].image1url;
                    }
                    if (vm.myranks[i].image == undefined || vm.myranks[i].image == '')
                    vm.myranks[i].image = $rootScope.EMPTY_IMAGE;
                }
                $rootScope.rankOwner = {};
                $rootScope.rankOwner.name = vm.answer.name;
                $rootScope.rankOwner.slug = vm.answer.slug;
            }
            
            //Determine number of user comments
            if (vm.answer.numcom == undefined) vm.numcom = 0;
            else vm.numcom = vm.vrows.length;

            if (vm.answer.numcom != vm.vrows.length)
                answer.updateAnswer(vm.answer.id, ['numcom'], [vm.numcom]);

            //Determine if necessary to show navigation buttons
            if (vm.ranking) vm.showNextnPrev = true;
            else vm.showNextnPrev = false;

            //Update number of views
            incViews();

            votemodeOFF();

            if ($rootScope.DEBUG_MODE) console.log("Answer details loaded");

            window.prerenderReady = true;
        }

        function getFields() {

            if ($rootScope.fields) return;
            else {
                var fidx = 0;
                switch (vm.answer.type) {
                    case "Place": { fidx = 0; break; }
                    case "Person": { fidx = 1; break; }
                    case "Event": { fidx = 2; break; }
                    case "Organization": { fidx = 3; break; }
                    case "Short-Phrase": { fidx = 4; break; }
                    case "Activity": { fidx = 5; break; }
                    case "Establishment": { fidx = 6; break; }
                    case "Thing": { fidx = 7; break; }
                    case "PersonCust": { fidx = 8; break; }
                    case "Simple": { fidx = 9; break; }
                }

                var fields = $rootScope.typeSchema[fidx].fields;
                $rootScope.fields = fields;
            }

        }

        function getHeader() {
            //vm.public = $rootScope.canswers.public;
            if (vm.answer.owner == undefined || vm.answer.owner == null || vm.answer.owner == 0) {
                vm.answer.hasOwner = false;
            }
            else vm.answer.hasOwner = true;

            vm.bindtxt = '';
            if (vm.type == 'Establishment') vm.bindtxt = 'I represent this business';
            if (vm.type == 'PersonCust') vm.bindtxt = 'I am this person';
            if (vm.type == 'Event') vm.bindtxt = 'I organize this event';

        }

        //AM: Create the relative table of this answer with respect to the other ones.
        function makeRelativeTable(id) {
            //rank.computeRanking(answers,mrecs);
            var PctF = 0;
            var PctC = 0;
            var vsName = "";
            vm.relativetable = [];
            var R = $rootScope.R;
            var GP = $rootScope.GP;
            var answersR = $rootScope.answersR;
            var x = A.indexOf(+id);
            var W = 0;
            var mainField = $rootScope.fields[0].name;
            var isC = false; //main field is country

            for (var n = 0; n < answersR.length; n++) {
                if (A[n] != id) {
                    //W = (GP[x][n] + R[x][n]) / 2;
                    W = R[x][n];

                    switch (mainField) {
                        case "name": { vsName = answersR[n].name; break; }
                        case "nickname": { vsName = answersR[n].nickname; break; }
                        case "country": { vsName = answersR[n].country; isC = true; break; }
                        case "club": { vsName = answersR[n].club; break; }
                    }

                    if (GP[x][n]) {
                        PctF = Math.round((W / GP[x][n]) * 100);
                        PctC = 100 - PctF;
                    }
                    else {
                        PctF = 0;
                        PctC = 0;
                    }
                    vm.relativetable.push({
                        id: answersR[n].id,
                        Rank: answersR[n].Rank,
                        PctF: PctF,
                        vsName: vsName,
                        PctC: PctC,
                        GP: GP[x][n],
                        isC: isC
                    })
                }
            }
        }
        
        //AM: Refresh display when new answer is selected from relative table
        function refresh(x) {
            //$window.scrollTo(0,0);
            updateRecords();
            recordsUpdated = false;
            voteRecordExists = false;


            vm.answer = answers[A.indexOf(+x)];
            $rootScope.canswer = vm.answer;
            getEdits(vm.answer.id);
            upVi = vm.catans.upV;
            downVi = vm.catans.downV;
            getHeader();
            getAnswerRanks();
            getAnswerVotes();
            makeRelativeTable(x);
            getSpecials(vm.answer.id);
            getVRows(vm.answer.id);
        }
        
        //Update Records
        function updateRecords() {

            if ($rootScope.isLoggedIn && answerFound){
            
            //update vote record if necessary
            if ($rootScope.DEBUG_MODE) console.log("UpdateRecords @answerDetail");
            
            //TODO Need to pass table id
            for (var i = 0; i < vm.answerRanks.length; i++) {

                var voteRecordExists = vm.answerRanks[i].voteRecordExists;
                var userHasRank = false;
                var useractivityrec = {};
                //console.log("$rootScope.thisuseractivity - ", $rootScope.thisuseractivity);
                try {
                    var idx = $rootScope.thisuseractivity.map(function (x) { return x.category; }).indexOf(vm.answerRanks[i].id);
                }
                catch (err) {
                    console.log("Error: ", err);
                    console.log("$rootScope.thisuseractivity - ", $rootScope.thisuseractivity);
                    var idx = -1;                    
                }
                if (idx >= 0) {
                    userHasRank = true;
                    useractivityrec = $rootScope.thisuseractivity[idx];
                }
                else userHasRank = false;  
                //if vote is changed to non-zero
                if (voteRecordExists && vm.answerRanks[i].uservote.vote != vm.answerRanks[i].dV && vm.answerRanks[i].dV != 0) {
                    //update vote
                    if ($rootScope.DEBUG_MODE) console.log("UR-1");
                    votes.patchRec(vm.answerRanks[i].uservote.id, vm.answerRanks[i].dV);
                }
                //if vote is changed to zero
                if (voteRecordExists && vm.answerRanks[i].uservote.vote != vm.answerRanks[i].dV && vm.answerRanks[i].dV == 0) {
                    //Delete vote
                    if ($rootScope.DEBUG_MODE) console.log("UR-2");
                    votes.deleteRec(vm.answerRanks[i].uservote.id);
                    //Decrease vote counter from user activity. If counter is 1, also delete user activiy record (since there is no more votes
                    //from this user)
                    if (useractivityrec.votes < 2) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-3");
                        useractivity.deleteRec(useractivityrec.id);
                    }
                    else {
                        if ($rootScope.DEBUG_MODE) console.log("UR-4");
                        useractivity.patchRec(useractivityrec.id, useractivityrec.votes - 1);
                        //$rootScope.userActRec.votes--;
                    }
                }
                if (!voteRecordExists && vm.answerRanks[i].dV != 0) {
                    //Post a new vote and create useractivity record
                    if ($rootScope.DEBUG_MODE) console.log("UR-5");
                    votes.postRec(vm.answerRanks[i].catans, vm.answer.id, vm.answerRanks[i].id, vm.answerRanks[i].dV);
                    if (userHasRank) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-6");
                        useractivity.patchRec(useractivityrec.id, useractivityrec.votes + 1);
                        //$rootScope.userActRec.votes++;
                    }
                    else {
                        if ($rootScope.DEBUG_MODE) console.log("UR-7");
                        useractivity.postRec(vm.answerRanks[i].id);
                        //$rootScope.thisuseractivity.push();
                    }
                }
            
                //update answer record (vote count) if necessary
                //TODO Need to pass table id
                if ((vm.answerRanks[i].upV != vm.answerRanks[i].upVi) || (vm.answerRanks[i].downV != vm.answerRanks[i].downVi)) {
                    if ($rootScope.DEBUG_MODE) console.log("UR-8");
                    //catans.getCatan(vm.answerRanks[i].catans).then(function(catan){
                      //  var updV = vm.answerRanks[i].upV + vm.answerRanks[i].upVi;
                      //  var downdV = vm.answerRanks[i].downV + vm.answerRanks[i].downVi;
                        
                        catans.updateRec(vm.answerRanks[i].catans, ["upV", "downV"], [vm.answerRanks[i].upV, vm.answerRanks[i].downV]);    
                    //})
                    
                }
            }

            if (vm.vrows) {
                for (var i = 0; i < vm.vrows.length; i++) {
                    var voteRecExists = vm.vrows[i].voteExists;
                    if (voteRecExists && vm.vrows[i].dVi != vm.vrows[i].dV) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-9");
                        $rootScope.cvrowvotes[vm.vrows[i].vidx].val = vm.vrows[i].dV;
                        vrowvotes.patchRec(vm.vrows[i].voteid, vm.vrows[i].dV);
                    }
                    if (!voteRecExists && vm.vrows[i].dV != 0) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-10");
                        vrowvotes.postRec(vm.vrows[i].id, vm.vrows[i].dV);
                    }

                    if ((vm.vrows[i].upV != vm.vrows[i].upVi) || (vm.vrows[i].downV != vm.vrows[i].downVi)) {
                        if ($rootScope.DEBUG_MODE) console.log("UR-11");
                        vrows.updateRec(vm.vrows[i].id, ["upV", "downV"], [vm.vrows[i].upV, vm.vrows[i].downV]);
                    }
                }
            }
            recordsUpdated = true;
        }
        }
        
        //AM:Refresh Thumb Up and Thumb down Vote Displays
        
        function getAnswerVotes() {
            //look for user vote for this catans
            for (var i = 0; i < vm.answerRanks.length; i++) {
                vm.answerRanks[i].voteRecordExists = false;

                for (var j = 0; j < $rootScope.cvotes.length; j++) {
                    if ($rootScope.cvotes[j].catans == vm.answerRanks[i].catans) {
                        vm.answerRanks[i].uservote = $rootScope.cvotes[j];
                        vm.answerRanks[i].uservote.ansvidx = i;
                        //ansvidx = i;
                        vm.answerRanks[i].voteRecordExists = true;
                        break;
                    }

                }
                if (vm.answerRanks[i].voteRecordExists) {
                    vm.answerRanks[i].dV = vm.answerRanks[i].uservote.vote;
                    //catansid = uservote.catans;
                }
                else {
                    vm.answerRanks[i].dV = 0;
                    //catansid = x;
                }
                displayVote(vm.answerRanks[i]);
            }

        }

        function getVRowVotes() {
            if ($rootScope.isLoggedIn) {
                for (var i = 0; i < $rootScope.cansvrows.length; i++) {
                    //check votes for display
                    for (var j = 0; j < $rootScope.cvrowvotes.length; j++) {

                        if ($rootScope.cvrowvotes[j].vrow == $rootScope.cansvrows[i].id) {
                            $rootScope.cansvrows[i].voteExists = true;
                            $rootScope.cansvrows[i].dVi = $rootScope.cvrowvotes[j].val;
                            $rootScope.cansvrows[i].dV = $rootScope.cvrowvotes[j].val;
                            $rootScope.cansvrows[i].voteid = $rootScope.cvrowvotes[j].id;
                            $rootScope.cansvrows[i].vidx = j;
                            setVRowVoteImage($rootScope.cansvrows[i], $rootScope.cvrowvotes[j].val);
                        }
                    }
                }
            }
            displayVRows();
        }

        function setVRowVoteImage(obj, val) {
            if (val == 1) {

                obj.upImage = 'thumbs_up_blue_table.png';
                obj.downImage = 'thumbs_down_gray_table.png';
            }
            if (val == 0) {
                obj.dVi = 0;
                obj.dV = 0;
                obj.upImage = 'thumbs_up_gray_table.png';
                obj.downImage = 'thumbs_down_gray_table.png';
            }
            if (val == -1) {
                obj.dVi = -1;
                obj.dV = -1;
                obj.upImage = 'thumbs_up_gray_table.png';
                obj.downImage = 'thumbs_down_blue_table.png';
            }
        }
        //See if there are edits for this answer
        function getEdits(id) {
            vm.numEdits = 0;
            for (var i = 0; i < $rootScope.edits.length; i++) {
                if ($rootScope.edits[i].answer == id) {
                    vm.numEdits++;
                }
            }
        }

        function displayVote(x) {

            if (x.dV == 1) {
                //x.thumbUp = "thumbs_up_blue_table.png";//"thumbs_up_blue.png";//
                //x.thumbDn = "thumbs_down_gray_table.png";//"thumbs_down_gray.png";
                x.thumbUp = '#0070c0';
                x.thumbDn = 'grey';
            }

            if (x.dV == 0) {
                //x.thumbUp = "thumbs_up_gray_table.png";//"thumbs_up_gray.png";
                //x.thumbDn = "thumbs_down_gray_table.png";//"thumbs_down_gray.png";
                x.thumbUp = 'grey';
                x.thumbDn = 'grey';
            }
            if (x.dV == -1) {
                //x.thumbUp = "thumbs_up_gray_table.png";//"thumbs_up_gray.png";
                //x.thumbDn = "thumbs_down_blue_table.png";//"thumbs_down_blue.png";
                x.thumbUp = 'grey';
                x.thumbDn = '#0070c0';
            }
        }
        
        //AM:UpVote
        function UpVote(x) {

            if ($rootScope.isLoggedIn) {

                switch (x.dV) {
                    case -1: { x.dV = 1; x.upV++; x.downV--; break; }
                    case 0: { x.dV = 1; x.upV++; break; }
                    case 1: { x.dV = 0; x.upV--; break; }
                }

                displayVote(x);
                if ($rootScope.DEBUG_MODE) console.log("UpVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }

        }
        
        //AM:DownVote
        function DownVote(x) {

            if ($rootScope.isLoggedIn) {
                switch (x.dV) {
                    case -1: { x.dV = 0; x.downV--; break; }
                    case 0: { x.dV = -1; x.downV++; break; }
                    case 1: { x.dV = -1; x.upV--; x.downV++; break; }
                }

                displayVote(x);
                if ($rootScope.DEBUG_MODE) console.log("DownVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }

        }

        function goBack() {

            if ($rootScope.DEBUG_MODE) console.log("goBack");       
            
            //update Up and Down votes, and counter
            //if (!recordsUpdated && $rootScope.isLoggedIn) updateRecords();
            
            if ($rootScope.previousState == 'match') {
                $state.go('match');
            }
            else if ($rootScope.inFavMode) {
                $state.go('favs');
            }
            else {
                //var nViews = vm.answer.views + 1;
                //answer.updateAnswer(vm.answer.id, ['views'], [nViews]);
                if ($rootScope.cCategory) {
                    if ($rootScope.cCategory.title.indexOf('@')>-1) $rootScope.isCustomRank = true;
                    $state.go('rankSummary', { index: $rootScope.cCategory.id });
                }
                else //$state.go('cwrapper');
                backToResults();
            }
        }

        function rankSel(x) {
            //console.log(x);
            $rootScope.title = x.title;
            $state.go('rankSummary', { index: x.id });
        }

        function deleteAnswer() {

            console.log("Delete Answer");

            dialog.deleteType(function () {
                //delete catans for this answer
                matchrec.deleteRecordsbyCatans($rootScope.cCategory.id, vm.answer.id);
                catans.deleteRec(vm.answer.id, $rootScope.cCategory.id).then(function () {
                    vm.addctsactive = false;
                    getAnswerRanks();
                    vm.dispRanks--;
                });

            }, function () {
                //delete answer 
                answer.deleteAnswer(vm.answer.id);
                //delete match records of that answer
                matchrec.deleteRecordsbyAnswer(vm.answer.id);
                //delete vote records from that answer
                //votes.deleteVotesbyCatans(vm.answer.id);
                //delete edits for this answer
                edit.deleteEditbyAnswer(vm.answer.id);
                //delete edit votes for this answer
                editvote.deleteEditVotesbyAnswer(vm.answer.id);
                //delete catans for this answer
                catans.deleteAnswer(vm.answer.id);
                //delete vrows for this answer
                vrows.deleteVrowByAnswer(vm.answer.id);
                $state.go("rankSummary", { index: $rootScope.cCategory.id });
            });

        }

        function deleteThisCatans(r) {

            var thisAnswer = vm.answer.name;
            var idx = $rootScope.content.map(function (x) { return x.id; }).indexOf(r.id);
            var thisCategory = $rootScope.content[idx].title;
            dialog.deleteThisCatans(thisAnswer, thisCategory, function () {
                //delete catans for this answer
                matchrec.deleteRecordsbyCatans(r.id, vm.answer.id);
                catans.deleteRec(vm.answer.id, r.id).then(function () {
                    vm.addctsactive = false;
                    getAnswerRanks();
                    vm.dispRanks--;
                });
            });
        }



        function flagAnswer(x) {
            if ($rootScope.isLoggedIn) {
                if ($rootScope.DEBUG_MODE) console.log("Answer Flagged");
                flag.flagAnswer('answer', vm.answer.id, x);
                dialog.getDialog('answerFlagged');
                return;
            }
            else dialog.loginFacebook(); 
            //dialog.getDialog('notLoggedIn');
        }

        function cmFlag(x) {
            if ($rootScope.isLoggedIn) {
                if ($rootScope.DEBUG_MODE) console.log("Answer Comment Flagged");
                flag.flagAnswer('comment-answer', vm.answer.id, x);
                dialog.getDialog('commentFlagged');
                return;
            }
            else dialog.loginFacebook(); 
            //dialog.getDialog('notLoggedIn'); 
        }

        function getAnswerRanks() {
           vm.answerRanks = [];
            var rankObj = {};
            for (var i = 0; i < $rootScope.catansrecs.length; i++) {
                //if ($rootScope.catansrecs[i].answer == vm.answer.id && $rootScope.catansrecs[i].category != $rootScope.cCategory.id) {
                if ($rootScope.catansrecs[i].answer == vm.answer.id) {
                    for (var j = 0; j < $rootScope.content.length; j++) {
                        if ($rootScope.content[j].id == $rootScope.catansrecs[i].category) {
                            //to each rank object attach catans data
                            rankObj = {};
                            rankObj = $rootScope.content[j];
                            rankObj.upV = $rootScope.catansrecs[i].upV;
                            rankObj.downV = $rootScope.catansrecs[i].downV;
                            rankObj.catans = $rootScope.catansrecs[i].id;
                            rankObj.rank = $rootScope.catansrecs[i].rank;
                            if (rankObj.rank > rankObj.answers) rankObj.rank = rankObj.answers;  
                            rankObj.uservote = {};
                            rankObj.upVi = $rootScope.catansrecs[i].upV;
                            rankObj.downVi = $rootScope.catansrecs[i].downV;

                            if (rankObj.rank == 1) rankObj.icon = "/assets/images/gold.png";
                            else if (rankObj.rank == 2) rankObj.icon = "/assets/images/silver.png";
                            else if (rankObj.rank == 3) rankObj.icon = "/assets/images/bronze.png";
                            else if (rankObj.rank > 3 && rankObj.rank < 11) rankObj.icon = "/assets/images/top10.png";
                            else if (rankObj.rank >= 11 && rankObj.rank < 21) rankObj.icon = "/assets/images/top20.png";
                            else if (rankObj.rank >= 21 && rankObj.rank < 51) rankObj.icon = "/assets/images/top50.png";
                            else if (rankObj.rank >= 51 && rankObj.rank < 101) rankObj.icon = "/assets/images/top100.png";
                            else rankObj.icon = "/assets/images/blank.png";
   
                            //TODO insert rank position out of total list, will be in catans
                            vm.answerRanks.push(rankObj);
                        }
                    }
                }
            }
            //vm.otherRanksExist = vm.otherRanks.length > 0 ? true : false;
            vm.otherRanksExist = true;
            getAnswerVotes();
            //$timeout(function(){
            //    $scope.$apply();
            //});   
            //console.log("vm.answerRanks - ", vm.answerRanks);
        }

        function getSpecials(x) {
            var answerid = 0;
            if (!vm.answer.ispremium && vm.userIsOwner) answerid = 1;
            else answerid = x;
            vm.specialsList = [];
            for (var i = 0; i < $rootScope.specials.length; i++) {
                if ($rootScope.specials[i].answer == answerid) {
                    //format date, load name and html msg
                    vm.specialsList.push($rootScope.specials[i]);
                }
            }
        }

        function showSpecial(x){
            dialog.showSpecial(x);
        }

        function showsimage(x) {
            if (!x.showimage) {
                x.showimage = true;
            }
            else x.showimage = false;
        }

        function getVRows(answerid) {
            var objExists = false;
            var obj = {};
            var callgetVotes = false;

            if ($rootScope.cansvrows == undefined) {
                $rootScope.cansvrows = [];
                callgetVotes = true;
            }
            
            //Load vrows for this answer
            if ($rootScope.cvrows) {
                for (var i = 0; i < $rootScope.cvrows.length; i++) {
                    if ($rootScope.cvrows[i].answer == answerid) {
                        objExists = false;
                        //Check vrow is not already added
                        for (var j=0; j < $rootScope.cansvrows.length; j++){
                            if ($rootScope.cansvrows[j].id == $rootScope.cvrows[i].id)
                                objExists = true;
                        }
                        
                        if (!objExists) {
                            obj = {};
                            obj = $rootScope.cvrows[i];
                            obj.idx = i; //Store object but store index in main local copy
                            obj.voteExists = false;
                            obj.dV = 0;
                            obj.upVi = $rootScope.cvrows[i].upV;
                            obj.downVi = $rootScope.cvrows[i].downV;
                            obj.upImage = 'thumbs_up_gray_table.png';
                            obj.downImage = 'thumbs_down_gray_table.png';
                            obj.delta = obj.upV - obj.downV;
                            if ($rootScope.isLoggedIn){
                                if (obj.user == $rootScope.user.id) vrowsByUserCounter++;
                            }
                            $rootScope.cansvrows.push(obj);
                        }
                    }
                }
                if (callgetVotes) getVRowVotes();
                else (vm.newop = '');
                if (vrowsByUserCounter >= 3 || !$rootScope.isLoggedIn) vm.addvrowbutton = 'disabled';
                //if (!callgetVotes) displayVRows();                
            }
        }

        function displayVRows() {
            vm.vrows = $rootScope.cansvrows;
        }

        function validateNewVrow(){
            vm.maybeRepeatedVrows = [];
            var tags = [];
            var vrowtitle = '';
            var newop = vm.newop;
            var foundMatch = false;
            newop = newop.toLowerCase();
            newop = newop.replace(',',' ');
            newop = newop.replace('!',' ');
            var tagsnewop = newop.split(" ");
            for (var i=0; i < vm.vrows.length ; i++){
                foundMatch = false;
                vrowtitle = vm.vrows[i].title;
                vrowtitle = vrowtitle.toLowerCase();
                vrowtitle = vrowtitle.replace(',',' ');
                vrowtitle = vrowtitle.replace('!',' ');
                tags = vrowtitle.split(" ");
                for (var j=0; j < tags.length; j++){
                    for (var k=0; k < tagsnewop.length; k++){
                        
                        if (tags[j].length > 3 && tagsnewop[k].length > 3 ){
                            //if tags from vrow bigger than opinion
                            if (tags[j].length >= tagsnewop[k].length){
                                if(tags[j].indexOf(tagsnewop[k])>-1){
                                    vm.maybeRepeatedVrows.push(vm.vrows[i]);
                                    foundMatch = true;
                                    break;
                                }
                            }
                            else {
                                if(tagsnewop[k].indexOf(tags[j])>-1){
                                    vm.maybeRepeatedVrows.push(vm.vrows[i]);
                                    foundMatch = true;
                                    break;
                                }
                            }
                        }
                        //if (newop.indexOf(tags[j])>-1)                    
                    }
                    if (foundMatch) break;                    
                }
            }
        }

        function deleteButtonAccess() {
            if ($rootScope.dataAdmin || $rootScope.isAdmin || (vm.userIsOwner && vm.answer.isprivate)) vm.deleteButton = true;
            else vm.deleteButton = false;
        }

        function showUrl() {
            dialog.url(vm.answer.imageurl);
        }

        function closeRank() {
            $state.go('cwrapper');            
        }

        function closeAnswerDetail(){
            goBack();
        }

        function bizRegDialog() {
            dialog.bizRegistration(bizRegistration);
        }

        function bizRegistration() {
            if ($rootScope.isLoggedIn) {
                dialog.bindAccount($rootScope.user.name, vm.answer.name, bindAccount);
            }
            else {
                dialog.getDialog('notLoggedInBiz');
            }
            //$state.go('register');
        }

        function bindAccount() {
            if ($rootScope.DEBUG_MODE) console.log("Bind business to user account");
            answer.updateAnswer(vm.answer.id, ['owner'], [$rootScope.user.id]).then(reloadAnswer);
            var item = {};
            item = vm.answer;
            item.username = $rootScope.user.first_name + ' ' + $rootScope.user.last_name;  
            item.email = $rootScope.user.email;
            useraccnt.adduseraccnt(item).then(function (useracc) {
                //Check if user account has email - if not set warning in navbar
                mailing.newBizCreated({account: useracc, answer: item}).then(function(data){
                    // console.log()
                })
                var hasEmail = false;
                for (var i = 0; i < $rootScope.useraccnts.length; i++) {
                    if ($rootScope.useraccnts[i].email != '') hasEmail = true;
                }
                if (!hasEmail) $rootScope.$emit('showWarning');
                $rootScope.$emit('userAccountsLoaded');
            });
        }

        function reloadAnswer() {
            vm.userIsOwner = true;
            getHeader();
            //$state.go("answerDetail", { index: vm.answer.id }, { reload: true });
        }

        function openSpecials() {
            $state.go('specials');
        }

        function editVRows() {
           // $state.go('editvrows');
        }

        function addRankforAnswer() {
            $state.go('answerRanksManager');
        }

        function getImages() {
            vm.showImageGallery = true;
            if (vm.igdemo) instagram.getImages().then(showImages);
            else {
                $rootScope.blobs = [];
                var urls = vm.answer.ig_image_urls.split(';');

                for (var i = 0; i < urls.length; i++) {
                    if(urls[i] != ''){
                        var myObj = {};
                        myObj.url = urls[i];
                        myObj.type = 'Instagram';
                        $rootScope.blobs.push(myObj);
                    }
                }
                imagelist.getImageList().then(showImages);
                //imagelist.getImageList().then();
            }
        }
        function showImages() {
            var specialImages = [];
            if (vm.specialsList) specialImages = vm.specialsList.map(function(special){ return special.image;});
            $rootScope.blobs = $rootScope.blobs.filter(function(blob){
                if (specialImages.indexOf(blob.url) != -1) {
                    return false;
                } else {
                    return true;
                }
                
            })
            if (vm.igdemo) vm.images = $rootScope.igimages;
            else vm.images = $rootScope.blobs;

            numImages = vm.images.length;
            vm.i = 0;
            imageNav();
            //console.log("@showImages - ", vm.images);
        }

        function imageNav(){
            if ((vm.i + (numImagesPage-1)) <= numImages) vm.e = vm.i+numImagesPage;
            else vm.e = numImages;
            if (numImages <= 4) { vm.showFwd = false; vm.showRev = false; }
            else {
                if (vm.i == 0) vm.showRev = false;
                else vm.showRev = true;
                if (vm.e == vm.images.length-1) vm.showFwd = false;
                else vm.showFwd = true;
            }
            if (vm.e >= (numImages-1)) vm.showFwd = false;    
        }

        function moreImagesFwd(){
            if (vm.showFwd){
                vm.i = vm.i+numImagesPage;
                imageNav();
            }
        }

        function moreImagesRev(){
            if (vm.showRev){
                vm.i = vm.i-numImagesPage;
                imageNav();
            }
        }

        /*
        function showMap(){
          google.maps.event.addDomListener(window, "load", initMap);

        }
        var map = {};
        function initMap(){
            var latlng = new google.maps.LatLng(-34.397, 150.644);
            var myOptions = {
                zoom: 8,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map-canvas"),myOptions);
        }*/

        function gotoRank(x) {
            //var nViews = vm.answer.views + 1;
            //answer.updateAnswer(vm.answer.id, ['views'], [nViews]);
            $state.go('rankSummary', { index: x.slug });
        }

        function gotoCustomRank(x) {
            //var nViews = vm.answer.views + 1;
            //answer.updateAnswer(vm.answer.id, ['views'], [nViews]);
            $rootScope.oCategory = $rootScope.cCategory;
            $rootScope.oAnswer = vm.answer;
            $rootScope.isCustomRank = true;
            $state.go('rankSummary', { index: x.id });
        }

        function goPrev() {
            var L = answers.length;
            var i = answers.map(function (x) { return x.id; }).indexOf(vm.answer.id);
            var ni = i - 1; //next index
            if (ni < 0) ni = L - 1; //if less than zero wrap to last
            //var nViews = vm.answer.views + 1;
            //answer.updateAnswer(vm.answer.id, ['views'], [nViews]);
            if ($rootScope.isLoggedIn) updateRecords();
            $state.go('answerDetail', { index: answers[ni].id });
        }

        function goNext() {
            var L = answers.length;
            var i = answers.map(function (x) { return x.id; }).indexOf(vm.answer.id);
            var ni = i + 1; //next index
            if (ni > L - 1) ni = 0; //if less than zero wrap to last
            //var nViews = vm.answer.views + 1;
            //answer.updateAnswer(vm.answer.id, ['views'], [nViews]);
            if ($rootScope.isLoggedIn) updateRecords();
            $state.go('answerDetail', { index: answers[ni].id });
        }

        function vrowVoteUp(x) {

            if ($rootScope.isLoggedIn) {

                switch (x.dV) {
                    case -1: { x.dV = 1; x.upV++; x.downV--; break; }
                    case 0: { x.dV = 1; x.upV++; break; }
                    case 1: { x.dV = 0; x.upV--; break; }
                }
                x.delta = x.upV - x.downV;
                displayVRowVote(x);
                if ($rootScope.DEBUG_MODE) console.log("VRow UpVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }
            //console.log("vm.answerRanks ---", vm.answerRanks);
        }        
        //AM:DownVote
        function vrowVoteDown(x) {

            if ($rootScope.isLoggedIn) {
                switch (x.dV) {
                    case -1: { x.dV = 0; x.downV--; break; }
                    case 0: { x.dV = -1; x.downV++; break; }
                    case 1: { x.dV = -1; x.upV--; x.downV++; break; }
                }
                x.delta = x.upV - x.downV;
                displayVRowVote(x);
                if ($rootScope.DEBUG_MODE) console.log("DownVote");
            }
            else {
                dialog.loginFacebook();
                //dialog.getDialog('notLoggedIn');
                return;
            }
            //console.log("vm.answerRanks ---", vm.answerRanks);
        }

        function displayVRowVote(x) {

            if (x.dV == 1) {
                x.upImage = "thumbs_up_blue_table.png";
                x.downImage = "thumbs_down_gray_table.png";
            }

            if (x.dV == 0) {
                x.upImage = "thumbs_up_gray_table.png";
                x.downImage = "thumbs_down_gray_table.png";
            }
            if (x.dV == -1) {
                x.upImage = "thumbs_up_gray_table.png";
                x.downImage = "thumbs_down_blue_table.png";
            }
        }

        function loadComments() {
            commentops.loadComments('answer', cObj)
            .then(function(){

                $q.all(cObj.comments.map(function(comment){ return fbusers.getFBUserById(comment.user); }))
                .then(function (fbUsers){
                    for (var i = 0; i < cObj.comments.length; i++) {
                        cObj.comments[i].picture = fbUsers[i] ? fbUsers[i].picture.data.url : null;
                    }
                });
                
            })
        }
        
        function postComment() {
            commentops.postComment('answer', cObj);
        }

        function mergeObject(x, y) {
            x.bc = y.bc;
            x.fc = y.fc;
            x.freq = y.freq;
            x.edate = y.edate;
            x.sdate = y.sdate;
            x.etime = y.etime;
            x.etime2 = y.etime2;
            x.stime = y.stime;
            x.stime2 = y.stime2;
            x.mon = y.mon;
            x.tue = y.tue;
            x.wed = y.wed;
            x.thu = y.thu;
            x.fri = y.fri;
            x.sat = y.sat;
            x.sun = y.sun;
        }

        function selectPhoto(x) {
            dialog.seePhotos(vm.images, x, vm.answer, vm.userIsOwner);
        }

        function addcts(x) {
            var title = '';
            var rank = -1;
            var rFound = false;
            var cat = -1;
            var nh = -1;
            title = vm.addctsval;

            for (var i=0; i<$rootScope.content.length; i++){
                if ($rootScope.content[i].title == title){
                    rFound = true;
                    rank = $rootScope.content[i].id;
                    break;
                }
            }
            console.log("could not find - ", title);
            if (rFound) {
                console.log('rank found, posting record');
                catans.postRec2(vm.answer.id, rank).then(function () {
                    vm.addctsactive = false;
                    getAnswerRanks();
                    vm.dispRanks++;
                });
            }
            //Rank not found, determine category and create ghost
            else {
                //find string to look in category
                console.log('rank not found, will create ghost');
                if (title.indexOf(vm.answer.cityarea) > -1) {
                    title = title.replace(vm.answer.cityarea, '@Nh');
                    console.log('category title - ', title);
                }

                for (var i=0; i< $rootScope.categories.length; i++) {
                    if ($rootScope.categories[i].category == title) {
                        cat = $rootScope.categories[i].id;
                        break;
                    }
                }

                for (var i=0; i< $rootScope.locations.length; i++) {
                    if ($rootScope.locations[i].nh_name == vm.answer.cityarea) {
                        nh = $rootScope.locations[i].id;
                        break;
                    }
                }
                
                if (cat > -1 && nh > -1) {
                    var obj = {};
                    obj.cat = cat;
                    obj.nh = nh;
                    obj.isatomic = true;
                    table.addTable(obj).then(function (tableid) {
                        catans.postRec2(vm.answer.id, tableid).then(function () {
                            vm.addctsactive = false;
                            getAnswerRanks();
                            vm.dispRanks++;
                        })
                    })
                }
                else console.log('Error creating ghost rank, cat, nh ', cat, nh);
            }           
        }

        function addCatans(x) {
            vm.addctsopts = [];
            var opt = '';
            for (var i = 0; i < $rootScope.ctsOptions.length; i++) {
                if ($rootScope.ctsOptions[i].indexOf('@Nh') > -1) {
                    opt = $rootScope.ctsOptions[i].replace('@Nh', vm.answer.cityarea);
                    vm.addctsopts.push(opt);
                }
                else vm.addctsopts.push($rootScope.ctsOptions[i]);
            }
            vm.addctsactive = true;
        }

        function votemodeON(){
            vm.votemode = true;
            vm.voteonstyle = "background-color:#3277b3;color:#e6e6e6";
            vm.voteoffstyle = "background-color:#e6e6e6;color:black";
            //if ($rootScope.endorseDialogShown == undefined) endorseDialog();
            
        }
        function votemodeOFF(){
            vm.votemode = false;
            vm.voteoffstyle = "background-color:#3277b3;color:#e6e6e6";
            vm.voteonstyle = "background-color:#e6e6e6;color:black";
        }

        function endorseDialog(){
            dialog.endorse(vm.type);
            $rootScope.endorseDialogShown = true;
        }

        function addvrow(){
            if (vrowsByUserCounter < 3 && $rootScope.isLoggedIn){
                validateNewVrow();
                if (vm.maybeRepeatedVrows.length > 0 ) 
                    dialog.maybeRepeatVrows(vm.newop, vm.maybeRepeatedVrows, addvrowexec);
                else
                    addvrowexec();
            }
            else if (!$rootScope.isLoggedIn) dialog.loginFacebook();
            else dialog.getDialog('opinionsLimit'); 
                           
        }
        function addvrowexec(){
            vrows.postRec(vm.newop).then(function(){
                    getVRows($rootScope.canswer.id);
             });
        }



        function selectInstagramImages(){
            if(InstagramService.access_token() == null) {
                InstagramService.login();
            }
            else {
                InstagramService.getMyRecentImages()
                .then(function(data){
                    dialog.chooseImgFromIgDlg(data, vm.answer, vm.userIsOwner, vm.navigateTowards);
                })
                .catch(function(err){
                    console.log(err);
                });
            }
            $rootScope.$on("instagramLoggedIn", function (evt, args) {
                InstagramService.getMyRecentImages()
                .then(function(data){
                    dialog.chooseImgFromIgDlg(data, vm.answer, vm.userIsOwner, vm.navigateTowards);
                }).catch(function(err){
                    console.log(err);
                });
            });
        }

        function navigateTowards(direction) {
            if(direction == 'next') {
                InstagramService.getNextPage()
                .then(function(data){
                    dialog.chooseImgFromIgDlg(data, vm.answer, vm.userIsOwner, vm.navigateTowards);
                })
                .catch(function(err){
                    console.log(err);
                });
            } else if (direction == 'previous') {
                InstagramService.getPreviousPage()
                .then(function(data){
                    dialog.chooseImgFromIgDlg(data, vm.answer, vm.userIsOwner, vm.navigateTowards);
                })
                .catch(function(err){
                    console.log(err);
                });    
            }
            
        }

        function showRanks(){
            if (vm.dispRanks <= 3) vm.dispRanks = vm.answerRanks.length;
            else vm.dispRanks = 3; 
        }

        function hideCustomRanks(){
            vm.hideCustomRanksMsg = true;
            $rootScope.hideCustomRankMsg = true;
        }
        function hideGetPremium(){
            vm.hideGetPremiumMsg = true;
            $rootScope.hideGetPremiumMsg = true;
        }

        function gotoMyBusiness(){
            $state.go('mybusiness');
        }

        function showLocations(){
            var locsIdx = vm.answer.family.split(':').map(Number);
            var locs = [];
            var idx = 0;
            for (var i=0; i<locsIdx.length; i++){
                idx = $rootScope.answers.map(function(x) {return x.id; }).indexOf(locsIdx[i]);
                if (idx > -1) locs.push($rootScope.answers[idx]);  
            }

            dialog.showLocations(locs);
        }

        function backToResults(){
            updateRecords();
            if ($rootScope.previousState == 'trends') $state.go('trends');
            else $rootScope.$emit('backToResults');
        }

        function share(){
            //vm.linkurl = 'https://rank-x.com/answerDetail/' + vm.answer.slug;
            vm.linkurl = SERVER_URL + 'answer' + vm.answer.id + '.html';
            vm.tweet = vm.answer.name + ', endorse your favorite ones at: ';

            var imageurl = vm.answer.imageurl;

            dialog.shareOptions(shareFunction, vm.isMobile, vm.linkurl, 'Rank-X, '+ vm.answer.name +  '\n' + imageurl, $scope);
        }
        
        function shareFunction(x){
            
            var imageurl = vm.answer.imageurl;
            switch(x){
                case 'twitter':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'twitter',
                        'attrs': {
                            'socialshareUrl': vm.linkurl,
                            'socialshareText': vm.tweet,
                            'socialshareHashtags': 'rankxsandiego'
                        }
                    }); 
                    break;
                }
                case 'facebook':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    FB.ui(
                    {
                        method: 'feed',
                        link: vm.linkurl,
                        caption: 'Rank-X San Diego',
                    }); 
                    break;
                }  
                case 'email':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'email',
                        'attrs': {
                            'socialshareSubject': 'Rank-X, '+vm.answer.name,
                            'socialshareBody': vm.linkurl
                        }
                    }); 
                    break;
                }
                case 'gplus':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'google',
                        'attrs': {
                            'socialshareUrl': vm.linkurl,
                            'socialshareText': vm.answer.name,
                            'socialshareMedia': imageurl                                
                        }
                    }); 
                    break;
                }
                case 'pinterest':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'pinterest',
                        'attrs': {
                            'socialshareUrl': vm.linkurl,
                            'socialshareText': 'Rank-X, '+ vm.answer.name,
                            'socialshareMedia': imageurl                                
                        }
                    }); 
                    break;
                }
                                    
                case 'tumblr':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'tumblr',
                        'attrs': {
                            'socialshareUrl': vm.linkurl,
                            'socialshareText': 'Rank-X, '+ vm.answer.name,
                            'socialshareMedia': imageurl                                
                        }
                    }); 
                    break;
                }
                case 'reddit':{
                    if ($rootScope.DEBUG_MODE) console.log(x);
                    Socialshare.share({
                        'provider': 'reddit',
                        'attrs': {
                            'socialshareUrl': vm.linkurl,
                            'socialshareText': 'Rank-X, '+ vm.answer.name,
                            'socialshareSubreddit':''                       
                        }
                    }); 
                    break;
                }
                // case 'whatsapp':{
                //     if ($rootScope.DEBUG_MODE) console.log(x);
                //     Socialshare.share({
                //         'provider': 'whatsapp',
                //         'attrs': {
                //             'socialshareUrl': vm.linkurl,
                //             'socialshareText': 'Rank-X, '+ vm.ranking + ', '+ $rootScope.cCategory.question,
                //          }
                //     }); 
                //     break;
                // }
                // case 'messenger':{
                //     if ($rootScope.DEBUG_MODE) console.log(x);
                //     Socialshare.share({
                //         'provider': 'facebook-messenger',
                //         'attrs': {
                //             'socialshareUrl': vm.linkurl,
                //          }
                //     }); 
                //     break;
                // }
                // case 'sms':{
                //     if ($rootScope.DEBUG_MODE) console.log(x);
                //     Socialshare.share({
                //         'provider': 'sms',
                //         'attrs': {
                //             'socialshareUrl': vm.linkurl,
                //             'socialshareText': 'Rank-X, '+ vm.ranking + ', '+ $rootScope.cCategory.question,
                //          }
                //     }); 
                //     break;
                // }
            } 
        }

        function incViews(){
            var nViews = vm.answer.views++;
            //increment number of views of this answer - request to server
            var url = SERVER_URL + 'databaseOps/incViews/answer/' + vm.answer.id;
            var req = {
                method: 'POST',
                url: url,
                headers: {
                    'X-Dreamfactory-API-Key': undefined,
                    'X-DreamFactory-Session-Token': undefined
                }
            }
            $http(req);
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .factory('useruploadedimages', useruploadedimages);

    useruploadedimages.$inject = ['$http', '$q','$rootScope'];

    function useruploadedimages($http, $q, $rootScope) {

        //Members
        var _uuis = [];
        $rootScope.uuis = _uuis;
        
        // Members
        var baseURI = '/api/v2/mysql/_table/useruploadedimages';

        var service = {
            getRecords: getRecords,
            postRecord: postRecord,
            deleteRecord: deleteRecord,            
        };

        return service;
        
        function getRecords(){
            //Get all user uploaded images records
            var url0 = baseURI;
            
            var p0 = $http.get(url0);
            
            return $q.all([p0]).then(function (d){
                var data = d[0].data.resource;
                _load(data);
                if ($rootScope.DEBUG_MODE) console.log("User uploaded images: ", _uuis.length);
                return _uuis;            
            }, _queryFailed);  

        }

        function postRecord(item){
            
            var url = baseURI;
            var resource = [];

            resource.push(item);
            
            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                //update local copy
                var itemx = item;
                itemx.id = result.data.resource[0].id; 
                _uuis.push(itemx);

                if ($rootScope.DEBUG_MODE) console.log("created uui record");
                if ($rootScope.DEBUG_MODE) console.log("result", result);
                return result.data;
            }
        }

        function deleteRecord(id){
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            obj.resource.push(data);

            var url = baseURI + '/' + id;
            
            //update (delete answer) local copy of answers
            var i = _uuis.map(function(x) {return x.id; }).indexOf(id);
            if (i > -1) _uuis.splice(i,1);
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                if ($rootScope.DEBUG_MODE) console.log("Deleting uui record was succesful");
                return result.data;
            }
        }

        function _load(data){
            _uuis.length = 0;
            data.forEach(function(x){
                _uuis.push(x);
            });        
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('query', query);

    query.$inject = ['$http', '$q', '$rootScope'];

    function query($http, $q, $rootScope) {

        // Members
        var _querys = [];
        var baseURI = '/api/v2/mysql/_table/queries';

        var service = {
            getQueries: getQueries,
            postQuery: postQuery,
            flushAll: flushAll,
            deleteRec: deleteRec
        };

        return service;

        function getQueries(forceRefresh) {
            
            if (_areQueriesLoaded() && !forceRefresh) {

                return $q.when(_querys);
            }

            var url = baseURI;

            return $http.get(url).then(querySucceeded, _queryFailed);

            function querySucceeded(result) {

                return _querys = result.data.resource;
            }

        }
        
       function postQuery(query, results){
		     //form match record
           //form match record
            var obj = {};
            obj.resource = [];
                     
            var data={};
            data.query = query;
            data.results = results;
            data.timestmp = Date.now(); 
            
            obj.resource.push(data); 
            
            var url = baseURI; 
            
            return $http.post(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {                
             
                console.log("Creating new query record was succesful");
            }
	   }
       
       function flushAll(resource) {
           
            //form match record
            var obj = {};
            obj.resource = resource;

            //obj.resource.push(data);
            console.log("obj ---",  resource)
            
            var url = baseURI; 
            return $http.delete(url, resource , {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("Flushing queries db was succesful");
            }
        }
        
        function deleteRec(id){
            
             //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = id;

            obj.resource.push(data);

            var url = baseURI + '/' + id;
            
            return $http.delete(url, data, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _queryFailed);
            function querySucceeded(result) {

                console.log("Deleting record was succesful");
                return result.data;
            }
            
        }
	   
        
        function _areQueriesLoaded() {

            return _querys.length > 0;
        }

        function _queryFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('codeprice', codeprice);

    codeprice.$inject = ['$http', '$q', '$rootScope'];

    function codeprice($http, $q, $rootScope) {

        // Members
        var _codeprices = [];
        var baseURI = '/api/v2/mysql/_table/codeprice';

        var service = {
            get: get,
        };

        return service;

        function get(forceRefresh) {
            
            if (_areQueriesLoaded() && !forceRefresh) {

                return $q.when(_codeprices);
            }

            var url = baseURI;

            return $http.get(url).then(codepriceSucceeded, _codepriceFailed);

            function codepriceSucceeded(result) {

                return _codeprices = result.data.resource;
            }

        }
        
        
        function _areQueriesLoaded() {

            return _codeprices.length > 0;
        }

        function _codepriceFailed(error) {

            throw error;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .factory('categorycode', categorycode);

    categorycode.$inject = ['$http', '$q', '$rootScope'];

    function categorycode($http, $q, $rootScope) {

        // Members
        var _categorycodes = [];
        var baseURI = '/api/v2/mysql/_table/categorycode';

        var service = {
            get: get,
            post:post,
            update: update,
        };

        return service;

        function post(item){
            
            var url = baseURI;
            var resource = [];

            resource.push(item);

            //update local copy
            _categorycodes.push(item);
            
            return $http.post(url, resource, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: resource
            }).then(querySucceeded, _categorycodeFailed);

            function querySucceeded(result) {
                if ($rootScope.DEBUG_MODE) console.log("created new category-code paire");
                return result.data;
            }
        }

        function get(forceRefresh) {
            
            if (_areQueriesLoaded() && !forceRefresh) {

                return $q.when(_categorycodes);
            }

            var url = baseURI;

            return $http.get(url).then(categorycodeSucceeded, _categorycodeFailed);

            function categorycodeSucceeded(result) {

                return _categorycodes = result.data.resource;
            }

        }

        function update(rec_id, field, val) {
           
            //form match record
            var obj = {};
            obj.resource = [];

            var data = {};
            data.id = rec_id;
            
            for (var i=0; i<field.length; i++){
                switch (field[i]){
                    case "category": data.category = val[i]; break;
                }
            }
            //console.log("data", data);
            obj.resource.push(data);

            var url = baseURI;
            
            var idx = _categorycodes.map(function(x) {return x.id; }).indexOf(rec_id);  
            for (var i=0; i<field.length; i++){
                switch (field[i]){
                    case "category": _categorycodes[idx].category = val[i]; break;
                }
            }                        
            
            return $http.patch(url, obj, {
                headers: {
                    "Content-Type": "multipart/form-data"
                },
                body: obj
            }).then(querySucceeded, _categorycodeFailed);
            function querySucceeded(result) {
                
                if ($rootScope.DEBUG_MODE) console.log("updating category code succesful");
                return result.data;
            }
        }
        
        
        function _areQueriesLoaded() {

            return _categorycodes.length > 0;
        }

        function _categorycodeFailed(error) {

            throw error;
        }
    }
})();